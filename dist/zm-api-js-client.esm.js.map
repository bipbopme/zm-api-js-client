{"version":3,"file":"zm-api-js-client.esm.js","sources":["../src/normalize/index.ts","../src/normalize/entities.ts","../src/request/types.ts","../src/request/index.ts","../src/schema/generated-schema-types.ts","../src/utils/coerce-boolean.ts","../src/utils/map-values-deep.ts","../src/utils/normalize-attrs-custommetadata.ts","../src/utils/normalize-email-addresses.ts","../src/utils/normalize-mime-parts.ts","../src/utils/normalize-otherAttribute-contact.ts","../src/batch-client/types.ts","../src/batch-client/index.ts","../src/schema/session-handler.ts","../src/schema/schema.ts","../src/apollo/local-batch-link.ts","../src/apollo/zimbra-error-link.ts","../src/apollo/zimbra-in-memory-cache.ts","../src/apollo/sync-offline-operations/index.ts","../src/apollo/offline-queue-link/errors.ts","../src/apollo/offline-queue-link/util.ts","../src/apollo/offline-queue-link/index.ts","../types.ts","../index.ts"],"sourcesContent":["import reduce from 'lodash/reduce';\n\nimport { EntityMapping, EntityMappingValue, NormalizedKey } from './types';\n\nfunction normalizeKey(\n\tkey: string,\n\tschema: Entity,\n\tinverse: Boolean = false\n): NormalizedKey {\n\tconst getKey = inverse ? schema.inverseKey : schema.key;\n\tconst schemaValue = getKey(key);\n\n\tif (typeof schemaValue === 'string') {\n\t\treturn { key: schemaValue };\n\t}\n\tif (Array.isArray(schemaValue)) {\n\t\treturn { key: schemaValue[0] as string, nestedSchema: schemaValue[1] };\n\t}\n\tif (schemaValue instanceof Entity) {\n\t\treturn { key, nestedSchema: schemaValue };\n\t}\n\n\treturn { key };\n}\n\nfunction _normalize(data: {}, schema: Entity, inverse: Boolean = false) {\n\treturn reduce(\n\t\tdata,\n\t\t(result: { [key: string]: any }, v, k) => {\n\t\t\tconst { key, nestedSchema } = normalizeKey(k, schema, inverse);\n\t\t\tconst type = typeof v;\n\t\t\tif (Array.isArray(v)) {\n\t\t\t\tresult[key] = (v as Array<any>).map(i =>\n\t\t\t\t\tnestedSchema ? _normalize(i, nestedSchema, inverse) : i\n\t\t\t\t);\n\t\t\t} else if (type === 'object' && v !== null) {\n\t\t\t\tresult[key] = nestedSchema ? _normalize(v, nestedSchema, inverse) : v;\n\t\t\t} else {\n\t\t\t\tresult[key] = v;\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * An Entity provides a simple object key mapping from one representation\n * to another.\n *\n * \tconst SubResource = new Entity({\n * \t\tf: 'fuu',\n * \t\tbar: 'bar',\n * \t});\n *\n * \tconst Resource = new Entity({\n * \t\tk: ['moreDescriptiveKey', SubResource]\n * \t});\n *\n * \tnormalize(incomingData, Resource);\n * \tdenormalize(outgoingData, Resource);\n */\nexport class Entity {\n\tprivate inverseMapping: EntityMapping = {};\n\tprivate mapping: EntityMapping = {};\n\n\tconstructor(mapping: EntityMapping) {\n\t\tthis.addMapping(mapping);\n\t\tthis.key = this.key.bind(this);\n\t\tthis.inverseKey = this.inverseKey.bind(this);\n\t}\n\n\tpublic addMapping(mapping: EntityMapping) {\n\t\tthis.mapping = {\n\t\t\t...this.mapping,\n\t\t\t...mapping\n\t\t};\n\t\tthis.inverseMapping = this.initInverseMapping(this.mapping);\n\t}\n\n\tinitInverseMapping(mapping: EntityMapping, accumulator = {}) {\n\t\treturn reduce(\n\t\t\tmapping,\n\t\t\t(result: EntityMapping, v: any, k) => {\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\tresult[v[0]] = [k, v[1]];\n\t\t\t\t} else if (typeof v === 'object' && !(v instanceof Entity)) {\n\t\t\t\t\tresult[k] = this.initInverseMapping(v) as EntityMappingValue;\n\t\t\t\t} else if (typeof v === 'string') {\n\t\t\t\t\tresult[v] = k;\n\t\t\t\t} else {\n\t\t\t\t\tresult[k] = v;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\taccumulator\n\t\t);\n\t}\n\n\tpublic inverseKey(k: string) {\n\t\treturn this.inverseMapping[k];\n\t}\n\n\tpublic key(k: string) {\n\t\treturn this.mapping[k];\n\t}\n}\n\nexport function normalize(\n\tschema: Entity\n): (data: any | Array<any>) => any | Array<any> {\n\treturn function(data) {\n\t\treturn Array.isArray(data)\n\t\t\t? data.map(v => _normalize(v, schema))\n\t\t\t: _normalize(data, schema);\n\t};\n}\n\nexport function denormalize(\n\tschema: Entity\n): (data: any | Array<any>) => any | Array<any> {\n\treturn function(data) {\n\t\treturn Array.isArray(data)\n\t\t\t? data.map(v => _normalize(v, schema, true))\n\t\t\t: _normalize(data, schema, true);\n\t};\n}\n","import { Entity } from '.';\n\n/**\n * This file provides the schema necessary to normalize/denormalize the json response we get from the zimbra-apis\n * into more human-readable field names and vice-versa for sending data from our codebase to the zimbra apis.\n *\n * It is only necessary to specify fields that you want renamed.  Fields that you do not want renamed will be kept and be unmodified\n */\n\nconst MimePart = new Entity({\n\tcd: 'contentDisposition',\n\tci: 'contentId',\n\tct: 'contentType',\n\ts: 'size',\n\tpart: 'part',\n\tmid: 'messageId',\n\tcontent: 'content'\n});\n\nconst CalendarItemAlarmTriggerRelative = new Entity({\n\tw: 'weeks',\n\td: 'days',\n\th: 'hours',\n\tm: 'minutes',\n\ts: 'seconds',\n\trelated: 'relatedTo',\n\tneg: 'negative'\n});\n\nconst CalendarItemAlarmTrigger = new Entity({\n\trel: ['relative', CalendarItemAlarmTriggerRelative]\n});\n\nconst IntervalRule = new Entity({\n\tival: 'intervalCount'\n});\n\nconst NumOfOccurences = new Entity({\n\tnum: 'number'\n});\n\nconst UntilDate = new Entity({\n\td: 'date'\n});\n\nconst ByMonthDayRule = new Entity({\n\tmodaylist: 'dayList'\n});\n\nconst ByMonthRule = new Entity({\n\tmolist: 'monthList'\n});\n\nconst SimpleRepeatingRule = new Entity({\n\tfreq: 'frequency',\n\tinterval: ['interval', IntervalRule],\n\tcount: ['count', NumOfOccurences],\n\tuntil: ['until', UntilDate],\n\tbymonthday: ['bymonthday', ByMonthDayRule],\n\tbymonth: ['bymonth', ByMonthRule]\n});\n\nconst AddRecurrenceInfo = new Entity({\n\trule: ['rule', SimpleRepeatingRule]\n});\n\nconst RecurrenceInfo = new Entity({\n\tadd: ['add', AddRecurrenceInfo]\n});\n\nconst CalendarItemAlarmAttendees = new Entity({\n\ta: 'email'\n});\n\nconst CalendarItemAlarm = new Entity({\n\ttrigger: CalendarItemAlarmTrigger,\n\tat: ['attendees', CalendarItemAlarmAttendees]\n});\n\nconst CalendarItemDateTime = new Entity({\n\td: 'date',\n\ttz: 'timezone',\n\ttzoDue: 'timezoneDue',\n\tu: 'utc'\n});\n\nconst CalendarItemAttendees = new Entity({\n\tptst: 'participationStatus',\n\ta: 'address',\n\td: 'name',\n\tcutype: 'calendarUserType'\n});\n\nconst CalendarItemReply = new Entity({\n\tptst: 'participationStatus',\n\tat: 'attendee'\n});\n\nconst CalendarItemOrganizer = new Entity({\n\ta: 'address',\n\td: 'name'\n});\n\nconst commonFieldForMessageAndDocuments = {\n\td: 'date',\n\tf: 'flags',\n\tl: 'folderId',\n\tmd: 'changeDate',\n\tms: 'modifiedSequence',\n\trev: 'revision',\n\ts: 'size',\n\tsf: 'sortField',\n\tt: 'tags',\n\ttn: 'tagNames'\n};\n\nconst commonMessageFields = {\n\t...commonFieldForMessageAndDocuments,\n\tcid: 'conversationId',\n\tfr: 'excerpt'\n};\n\nconst commonInviteFields = {\n\tcompNum: 'componentNum',\n\tcalItemId: 'calendarItemId',\n\tfb: 'freeBusy',\n\tfba: 'freeBusyActual',\n\tfr: 'excerpt',\n\tisOrg: 'isOrganizer',\n\tinvId: 'inviteId',\n\tloc: 'location',\n\tor: ['organizer', CalendarItemOrganizer],\n\tridZ: 'utcRecurrenceId'\n};\n\nconst InviteComponent = new Entity({\n\t...commonMessageFields,\n\t...commonInviteFields,\n\talarm: ['alarms', CalendarItemAlarm],\n\tat: ['attendees', CalendarItemAttendees],\n\tcompleted: 'completedDateTime',\n\tdesc: 'description',\n\tdescHtml: 'htmlDescription',\n\te: ['end', CalendarItemDateTime],\n\tex: 'isException',\n\trecur: ['recurrence', RecurrenceInfo],\n\ts: ['start', CalendarItemDateTime],\n\texceptId: ['exceptId', CalendarItemDateTime],\n\tseq: 'sequence'\n});\n\nconst InviteReplies = new Entity({\n\treply: ['reply', CalendarItemReply]\n});\n\nconst CalTZInfo = new Entity({\n\tstdoff: 'timezoneStdOffset',\n\tdayoff: 'timezoneDaylightOffset'\n});\n\nconst Invitation = new Entity({\n\tseq: 'sequenceNumber',\n\tcompNum: 'componentNum',\n\trecurId: 'recurrenceId',\n\ttz: ['tz', CalTZInfo],\n\tcomp: ['components', InviteComponent],\n\treplies: ['replies', InviteReplies],\n\tmp: ['mimeParts', MimePart]\n});\n\nconst InviteInfo = new Entity({\n\tcomp: ['components', InviteComponent],\n\treplies: ['replies', InviteReplies],\n\tmp: ['mimeParts', MimePart]\n});\n\nconst MailItemEmailAddress = new Entity({\n\ta: 'address',\n\tp: 'name',\n\td: 'displayName',\n\tt: 'type'\n});\n\nconst ExistingAttachmentsInfo = new Entity({\n\tmid: 'messageId',\n\tpart: 'part'\n});\n\nconst AttachmentsInfo = new Entity({\n\taid: 'attachmentId',\n\tdoc: 'documents',\n\tmp: ['existingAttachments', ExistingAttachmentsInfo]\n});\n\nMimePart.addMapping({\n\tmp: ['mimeParts', MimePart],\n\tattach: ['attachments', AttachmentsInfo]\n});\n\nconst commonMailItemFields = {\n\t...commonMessageFields,\n\te: ['emailAddresses', MailItemEmailAddress],\n\tinv: ['invitations', InviteInfo],\n\tmp: ['mimeParts', MimePart],\n\tshr: 'share',\n\tsu: 'subject',\n\torigid: 'origId',\n\tattach: ['attachments', AttachmentsInfo],\n\trt: 'replyType'\n};\n\nconst SendMessageFields = new Entity({\n\t...commonMailItemFields,\n\tid: 'id',\n\taid: 'attachmentId',\n\tirt: 'inReplyTo',\n\trt: 'replyType',\n\tdid: 'draftId',\n\tidnt: 'entityId'\n});\n\nexport const SendMessageInfo = new Entity({\n\tm: ['message', SendMessageFields]\n});\n\nexport const MessageInfo = new Entity({\n\t...commonMailItemFields\n});\n\nexport const AppointmentInfo = new Entity({\n\tinv: ['invitations', Invitation]\n});\n\nexport const Conversation = new Entity({\n\t...commonMailItemFields,\n\tn: 'numMessages',\n\tm: ['messages', MessageInfo],\n\tu: 'unread'\n});\n\nexport const SearchConversation = new Entity({\n\t...commonMailItemFields,\n\tn: 'numMessages',\n\tm: ['messagesMetaData', MessageInfo],\n\tu: 'unread'\n});\n\nexport const CalendarItemCreateModifyRequest = new Entity({\n\trev: 'revision',\n\tcomp: 'componentNum',\n\tm: ['message', MessageInfo],\n\tapptId: 'appointmentId',\n\tcalItemId: 'calendarItemId',\n\tinvId: 'inviteId'\n});\n\nexport const CounterAppointmentInfo = new Entity({\n\trev: 'revision',\n\tcomp: 'componentNum',\n\tm: ['message', MessageInfo],\n\tinvId: 'inviteId'\n});\nexport const InstanceDate = new Entity({\n\td: 'date',\n\ttz: 'timezone'\n});\n\nexport const CalendarItemDeleteRequest = new Entity({\n\tinst: ['instanceDate', InstanceDate],\n\tid: 'inviteId',\n\tcomp: 'componentNum',\n\ts: 'start',\n\tm: ['message', MessageInfo]\n});\n\nconst NewMountpointSpec = new Entity({\n\trid: 'sharedItemId',\n\tzid: 'ownerZimbraId',\n\tf: 'flags',\n\tl: 'parentFolderId'\n});\n\nexport const CreateMountpointRequest = new Entity({\n\tlink: NewMountpointSpec\n});\n\nconst commonAccessControlEntities = {\n\td: 'address',\n\tgt: 'granteeType',\n\tzid: 'zimbraId',\n\tpw: 'password'\n};\n\nconst ACLGrant = new Entity({\n\t...commonAccessControlEntities,\n\tperm: 'permissions'\n});\n\nconst ACL = new Entity({\n\tgrant: ACLGrant\n});\n\nconst ShareNotificationAddress = new Entity({\n\ta: 'address',\n\tt: 'type',\n\tp: 'personalName'\n});\n\nconst Instance = new Entity({\n\t...commonMessageFields,\n\t...commonInviteFields,\n\totherAtt: 'otherAttendees',\n\ts: 'start',\n\tptst: 'participationStatus',\n\tdur: 'duration',\n\tex: 'isException'\n});\n\nconst Alarm = new Entity({\n\tcompNum: 'componentNum',\n\tinvId: 'inviteId',\n\tloc: 'location'\n});\n\nexport const CalendarItemHitInfo = new Entity({\n\t...commonMessageFields,\n\t...commonInviteFields,\n\trecur: 'isRecurring',\n\tptst: 'participationStatus',\n\tdur: 'duration',\n\ttzo: 'timezoneOffset',\n\totherAtt: 'otherAttendees',\n\tinst: ['instances', Instance],\n\tinv: ['invitations', Invitation],\n\talarmData: ['alarmData', Alarm],\n\tsf: 'sortField'\n});\n\nexport const Hit = new Entity({\n\tsf: 'sortField'\n});\n\nconst Folder = new Entity({\n\tu: 'unread',\n\tl: 'parentFolderId',\n\tf: 'flags',\n\tn: 'nonFolderItemCount',\n\ts: 'nonFolderItemCountTotal',\n\trev: 'revision',\n\tacl: ACL,\n\tperm: 'permissions',\n\trid: 'sharedItemId',\n\tzid: 'ownerZimbraId'\n});\n\nFolder.addMapping({\n\tfolder: ['folders', Folder],\n\tlink: ['linkedFolders', Folder]\n});\nexport { Folder };\n\nconst ForwardMessageInput = new Entity({\n\te: ['emailAddresses', MailItemEmailAddress],\n\tmp: ['mimeParts', MimePart],\n\tsu: 'subject'\n});\n\nexport const ForwardAppointmentInfo = new Entity({\n\tm: ['message', ForwardMessageInput],\n\texceptId: ['exceptId', InstanceDate]\n});\n\nexport const ForwardAppointmentInviteInfo = new Entity({\n\tm: ['message', ForwardMessageInput]\n});\n\nexport const FreeBusyInstance = new Entity({\n\ts: 'start',\n\te: 'end'\n});\n\nexport const FreeBusy = new Entity({\n\tt: ['tentative', FreeBusyInstance],\n\tf: ['free', FreeBusyInstance],\n\tb: ['busy', FreeBusyInstance],\n\tu: ['unavailable', FreeBusyInstance],\n\tn: ['nodata', FreeBusyInstance]\n});\n\nexport const ActionOptions = new Entity({\n\tl: 'folderId',\n\ttcon: 'constraints',\n\ttn: 'tagNames',\n\tf: 'flags',\n\tzid: 'zimbraId',\n\tgrant: ACLGrant\n});\n\nexport const AutoComplete = new Entity({\n\tt: 'type'\n});\n\nexport const AutoCompleteMatch = new Entity({\n\tl: 'folderId'\n});\n\nexport const AutoCompleteResponse = new Entity({\n\tmatch: AutoCompleteMatch\n});\n\nexport const ShareNotification = new Entity({\n\te: ['address', ShareNotificationAddress]\n});\n\nexport const ExternalCalendar = new Entity({\n\tname: 'accountName',\n\tl: 'folderId'\n});\n\nconst ImageFields = new Entity({\n\tct: 'contentType',\n\ts: 'size'\n});\n\nconst ContactAttributes = new Entity({\n\timage: ImageFields\n});\n\nconst contactFields = {\n\td: 'date',\n\tl: 'folderId',\n\trev: 'revision',\n\tsf: 'sortField',\n\tt: 'tags',\n\ttn: 'tagNames',\n\t_attrs: ['attributes', ContactAttributes]\n};\n\nconst contactListMembers = new Entity({\n\tcn: ['contacts', new Entity({ ...contactFields })]\n});\n\nexport const ClientInfoResponse = new Entity({\n\t_attrs: 'attributes'\n});\n\nexport const Contact = new Entity({\n\t...contactFields,\n\tm: ['members', contactListMembers]\n});\n\nexport const AutoCompleteGALResponse = new Entity({\n\tcn: ['contacts', Contact]\n});\n\nexport const Appointment = new Entity({\n\talarm: 'alarm',\n\tinst: ['instances', Instance]\n});\n\nexport const Document = new Entity({\n\t...commonFieldForMessageAndDocuments,\n\tluuid: 'folderUuid',\n\tmdver: 'metadataVersion',\n\tmeta: 'metaData',\n\tdescEnabled: 'descriptionEnabled',\n\tver: 'version', //same item may have different versions (i.e same names) will need to implement ListDocumentRevisionsRequest\n\tleb: 'lastEditedAccount',\n\tcr: 'revisonCreator',\n\tcd: 'revisedCreationDate',\n\tloid: 'lockOwnerId',\n\tct: 'contentType'\n});\n\nexport const MessagePartInputForDocuments = new Entity({\n\tid: 'messageId',\n\tpart: 'attachmentPart'\n});\n\nexport const SaveDocument = new Entity({\n\tl: 'folderId',\n\tname: 'name',\n\tver: 'version', //same item may have different versions (i.e same names) will need to implement ListDocumentRevisionsRequest\n\tct: 'contentType',\n\tdescEnabled: 'descriptionEnabled',\n\tm: ['messageData', MessagePartInputForDocuments]\n});\n\nexport const SearchResponse = new Entity({\n\tm: ['messages', MessageInfo],\n\tc: ['conversations', SearchConversation],\n\tcn: ['contacts', Contact],\n\tappt: ['appointments', CalendarItemHitInfo],\n\tdoc: ['documents', Document],\n\thit: Hit\n});\n\nexport const GetAppointmentResponse = new Entity({\n\tappt: ['appointment', AppointmentInfo]\n});\n\nconst RedirectAction = new Entity({\n\ta: 'address'\n});\n\nconst NotifyAction = new Entity({\n\ta: 'address',\n\tsu: 'subject'\n});\n\nconst FilterAction = new Entity({\n\tactionKeep: 'keep',\n\tactionDiscard: 'discard',\n\tactionFileInto: 'fileInto',\n\tactionFlag: 'flag',\n\tactionTag: 'tag',\n\tactionRedirect: ['redirect', RedirectAction],\n\tactionReply: 'reply',\n\tactionNotify: ['notify', NotifyAction],\n\tactionStop: 'stop'\n});\n\nconst DateCondition = new Entity({\n\td: 'date'\n});\n\nconst ImportanceCondition = new Entity({\n\timp: 'importance'\n});\n\nconst SizeCondition = new Entity({\n\ts: 'size'\n});\n\nconst FilterCondition = new Entity({\n\tcondition: 'allOrAny',\n\n\taddressBookTest: 'addressBook',\n\taddressTest: 'address',\n\tattachmentTest: 'attachment',\n\tbodyTest: 'body',\n\tbulkTest: 'bulk',\n\tcontactRankingTest: 'contactRanking',\n\tconversationTest: 'conversation',\n\tdateTest: ['date', DateCondition],\n\tfacebookTest: 'facebook',\n\tflaggedTest: 'flag',\n\theaderExistsTest: 'headerExists',\n\theaderTest: 'header',\n\timportanceTest: ['importance', ImportanceCondition],\n\tinviteTest: 'invite',\n\tlinkedinTest: 'linkedin',\n\tlistTest: 'list',\n\tmeTest: 'me',\n\tmimeHeaderTest: 'mimeHeader',\n\tsizeTest: ['size', SizeCondition],\n\ttwitterTest: 'twitter',\n\tcommunityRequestsTest: 'communityRequests',\n\tcommunityContentTest: 'communityContent',\n\tcommunityConnectionsTest: 'communityConnections'\n});\n\nexport const Filter = new Entity({\n\tfilterActions: ['actions', FilterAction],\n\tfilterTests: ['conditions', FilterCondition]\n});\n\nexport const InviteReply = new Entity({\n\tcompNum: 'componentNum',\n\tm: ['message', MessageInfo],\n\trt: 'replyType',\n\texceptId: ['exceptId', InstanceDate]\n});\n\nconst Signature = new Entity({\n\tcid: 'contentId'\n});\n\nexport const CreateSignatureRequest = new Entity({\n\tsignature: Signature\n});\n\nconst GetFolderSpec = new Entity({\n\tl: 'parentFolderId'\n});\n\nexport const GetFolderRequest = new Entity({\n\ttr: 'traverseMountpoints',\n\tfolder: GetFolderSpec\n});\n\nconst ContactInputAttributes = new Entity({\n\tn: 'name',\n\t_content: 'content'\n});\n\nexport const ContactInputRequest = new Entity({\n\tl: 'folderId',\n\ttn: 'tagNames',\n\ta: ['attributes', ContactInputAttributes],\n\tm: 'memberOps'\n});\n\nconst contentInfo = new Entity({\n\t_content: 'content'\n});\n\nconst AddMsgAttributes = new Entity({\n\tcontent: ['content', contentInfo],\n\td: 'date',\n\tf: 'flags',\n\tl: 'folderId',\n\tt: 'tags',\n\ttn: 'tagNames'\n});\n\nexport const AddMsgInfo = new Entity({\n\tm: ['message', AddMsgAttributes]\n});\n\nconst OnlyEmailAddress = new Entity({\n\taddr: 'emailAddress'\n});\n\nconst Target = new Entity({\n\td: 'displayName',\n\temail: ['email', OnlyEmailAddress]\n});\n\nconst Targets = new Entity({\n\ttarget: ['target', Target]\n});\n\nexport const DiscoverRightsResponse = new Entity({\n\ttargets: ['targets', Targets]\n});\n\nexport const AccountACEInfo = new Entity({\n\t...commonAccessControlEntities,\n\tchkgt: 'checkGrantee'\n});\n\nexport const AccountRights = new Entity({\n\tace: ['access', AccountACEInfo]\n});\n\nexport const SaveDocuments = new Entity({\n\tdoc: ['document', SaveDocument]\n});\n\nexport const GetRightsRequest = new Entity({\n\tace: 'access'\n});\n\nexport const CreateAppSpecificPasswordResponse = new Entity({\n\tpw: 'password'\n});\n\nexport const Tag = new Entity({\n\tu: 'unread'\n});\n\nexport const Mailbox = new Entity({\n\ts: 'used'\n});\n","export enum Namespace {\n\tAccount = 'urn:zimbraAccount',\n\tAdmin = 'urn:zimbraAdmin',\n\tMail = 'urn:zimbraMail',\n\tAll = 'urn:zimbra'\n}\n\nexport type SessionId = string;\nexport type SessionSeq = number;\n\nexport interface UserAgent {\n\tname?: string;\n\tversion?: string;\n}\nexport interface BaseRequestOptions {\n\taccountId?: string;\n\taccountName?: string | null;\n\tcredentials?: RequestCredentials;\n\tcsrfToken?: string | null;\n\theaders?: any;\n\tjwtToken?: string | null;\n\torigin?: string;\n\tsessionId?: SessionId;\n\tsessionSeq?: SessionSeq;\n\tsingleRequest?: boolean;\n\tsoapPathname?: string;\n\tuserAgent?: UserAgent;\n}\n\nexport interface RequestOptions {\n\tbody?: any;\n\tname: string;\n\tnamespace?: Namespace;\n}\n\nexport interface JsonRequestOptions\n\textends BaseRequestOptions,\n\t\tRequestOptions {}\n\nexport interface BatchRequestOptions extends BaseRequestOptions {\n\trequests: Array<RequestOptions>;\n}\n\nexport interface RequestResponse {\n\tbody?: any;\n\terror?: any;\n\theader: any;\n\tnamespace: Namespace;\n\toriginalResponse: Response;\n}\n\nexport interface RequestError {\n\terror: any;\n\toriginalResponse: Response;\n}\n\nexport type RequestBody = any;\n\nexport interface SingleBatchRequestResponse {\n\tbody?: RequestBody;\n\terrors?: any;\n}\n\nexport interface BatchRequestResponse {\n\theader: any;\n\tnamespace: Namespace;\n\toriginalResponse: Response;\n\trequests: Array<SingleBatchRequestResponse | SingleBatchRequestError>;\n}\n\nexport interface ParsedResponse extends Response {\n\tparsed?: any;\n\tparseError?: Error;\n}\n\nexport interface NetworkError extends Error {\n\tparseError?: Error;\n\tresponse: ParsedResponse;\n}\n\nexport interface SingleBatchRequestError extends NetworkError {\n\tfaults: Array<any>;\n}\n\nexport interface SOAPHeader {\n\tcontext: {\n\t\t_jsns: Namespace;\n\t\taccount?: {\n\t\t\t_content: string;\n\t\t\tby: 'name' | 'id'; // name is the account's email address\n\t\t};\n\t\tauthTokenControl?: {\n\t\t\tvoidOnExpired: boolean;\n\t\t};\n\t\tcsrfToken?: string;\n\t\tauthToken?: {\n\t\t\t_content: string;\n\t\t};\n\t\tnotify?: {\n\t\t\tseq: SessionSeq;\n\t\t};\n\t\tsession?: {\n\t\t\t_content: SessionId;\n\t\t\tid: SessionId;\n\t\t};\n\t\tuserAgent?: UserAgent;\n\t};\n}\n","import get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport {\n\tBatchRequestOptions,\n\tBatchRequestResponse,\n\tJsonRequestOptions,\n\tNamespace,\n\tNetworkError,\n\tParsedResponse,\n\tRequestOptions,\n\tRequestResponse,\n\tSingleBatchRequestError,\n\tSingleBatchRequestResponse,\n\tSOAPHeader\n} from './types';\n\nexport const DEFAULT_HOSTNAME = '/@zimbra';\nexport const DEFAULT_SOAP_PATHNAME = '/service/soap';\n\nfunction soapCommandBody(options: RequestOptions) {\n\treturn {\n\t\t_jsns: options.namespace || Namespace.Mail,\n\t\t...options.body\n\t};\n}\n\nfunction parseJSON(response: Response): Promise<ParsedResponse> {\n\tif (!response.ok) {\n\t\t// whenever the response is not ok, for errors 502, 503, and 504 (gateway timeout/bad gateway), throw the network error\n\t\tif ([502, 503, 504].indexOf(response.status) !== -1) {\n\t\t\tthrow networkError(response);\n\t\t}\n\n\t\t// for the rest of the cases (as of now only 500 error), parse and return the error response so that it can\n\t\t// be handled properly by the caller\n\t\treturn parseErrorJSON(response).then(parsedResponse => {\n\t\t\tconst fault = get(parsedResponse.parsed, 'Body.Fault');\n\t\t\tthrow faultError(parsedResponse, [fault]);\n\t\t});\n\t}\n\n\treturn _responseParseHandler(response);\n}\n\nfunction _responseParseHandler(response: Response): Promise<ParsedResponse> {\n\ttry {\n\t\treturn response.json().then(json => {\n\t\t\t(response as ParsedResponse).parsed = json;\n\t\t\treturn response;\n\t\t});\n\t} catch (e) {\n\t\t(response as ParsedResponse).parseError = e;\n\t\treturn Promise.resolve(response);\n\t}\n}\n\nfunction parseErrorJSON(response: Response): Promise<ParsedResponse> {\n\treturn _responseParseHandler(response);\n}\n\nfunction networkError(response: ParsedResponse) {\n\tconst message = `Network request failed with status ${response.status}${\n\t\tresponse.statusText ? `- \"${response.statusText}\"` : ''\n\t}`;\n\tconst error = new Error(message);\n\n\t(error as NetworkError).message = message;\n\t(error as NetworkError).response = response;\n\t(error as NetworkError).parseError = response.parseError;\n\n\treturn error as NetworkError;\n}\n\nfunction faultReasonText(faults: any = []): string {\n\tif (!Array.isArray(faults)) faults = [faults];\n\n\treturn faults\n\t\t.map((f: any) => get(f, 'Reason.Text'))\n\t\t.filter(Boolean)\n\t\t.join(', ');\n}\n\nfunction faultError(response: ParsedResponse, faults: any) {\n\tconst error = new Error(\n\t\t`Fault error: ${faults ? faultReasonText(faults) : 'Unknown Error'}`\n\t);\n\t(error as SingleBatchRequestError).response = response;\n\t(error as SingleBatchRequestError).parseError = response.parseError;\n\t(error as SingleBatchRequestError).faults = faults;\n\treturn error as SingleBatchRequestError;\n}\n\n/**\n * Create one key per SOAP command name, with a value\n * containing an array of the requests for that command.\n */\nfunction batchBody(requests: Array<RequestOptions>) {\n\treturn reduce(\n\t\trequests,\n\t\t(body: { [key: string]: any }, request) => {\n\t\t\tconst key = `${request.name}Request`;\n\t\t\tconst value = soapCommandBody(request);\n\t\t\tif (body[key]) {\n\t\t\t\tbody[key].push(value);\n\t\t\t} else {\n\t\t\t\tbody[key] = [value];\n\t\t\t}\n\t\t\treturn body;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * For each SOAP command key, flatten it back out\n * into the ordered array that was requested.\n */\nfunction batchResponse(requests: any, response: RequestResponse) {\n\tconst {\n\t\tbody: { _jsns: _, ...batchBody },\n\t\t...res\n\t} = response;\n\n\t// For each request type, track which responses have been\n\t// pulled out of the batch request body by incrementing\n\t// indexes.\n\tlet indexes: { [key: string]: number } = {};\n\n\treturn {\n\t\t...res,\n\t\trequests: reduce(\n\t\t\trequests,\n\t\t\t(\n\t\t\t\tresponses: Array<SingleBatchRequestResponse | SingleBatchRequestError>,\n\t\t\t\trequest\n\t\t\t) => {\n\t\t\t\tconst batchResponses = batchBody[`${request.name}Response`];\n\t\t\t\tconst index = indexes[request.name];\n\t\t\t\tconst response: any = batchResponses && batchResponses[index || 0];\n\t\t\t\tif (response) {\n\t\t\t\t\tresponses.push({\n\t\t\t\t\t\tbody: response\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresponses.push(faultError(res.originalResponse, batchBody.Fault));\n\t\t\t\t}\n\n\t\t\t\tif (index) {\n\t\t\t\t\tindexes[request.name] += 1;\n\t\t\t\t} else {\n\t\t\t\t\tindexes[request.name] = 1;\n\t\t\t\t}\n\n\t\t\t\treturn responses;\n\t\t\t},\n\t\t\t[]\n\t\t)\n\t};\n}\n\nexport function batchJsonRequest(\n\toptions: BatchRequestOptions\n): Promise<BatchRequestResponse> {\n\tconst { requests, ...requestOptions } = options;\n\tconst body = batchBody(requests);\n\n\treturn jsonRequest({\n\t\t...requestOptions,\n\t\tname: 'Batch',\n\t\tnamespace: Namespace.All,\n\t\tbody\n\t}).then(res => batchResponse(requests, res));\n}\n\nexport function jsonRequest(\n\trequestOptions: JsonRequestOptions\n): Promise<RequestResponse> {\n\tconst options = {\n\t\t...requestOptions,\n\t\tcredentials: requestOptions.credentials || 'include',\n\t\theaders: requestOptions.headers || {},\n\t\torigin:\n\t\t\trequestOptions.origin !== undefined\n\t\t\t\t? requestOptions.origin\n\t\t\t\t: DEFAULT_HOSTNAME,\n\t\tsoapPathname: requestOptions.soapPathname || DEFAULT_SOAP_PATHNAME,\n\t\tnamespace: requestOptions.namespace || Namespace.Mail\n\t};\n\tconst soapRequestName = `${options.name}Request`;\n\tconst soapResponseName = `${options.name}Response`;\n\tconst url = `${options.origin}${options.soapPathname}/${soapRequestName}`;\n\n\tlet header: SOAPHeader;\n\theader = {\n\t\tcontext: {\n\t\t\t_jsns: Namespace.All,\n\t\t\tauthTokenControl: {\n\t\t\t\tvoidOnExpired: true\n\t\t\t}\n\t\t}\n\t};\n\n\tif (requestOptions.userAgent) {\n\t\theader.context.userAgent = requestOptions.userAgent;\n\t}\n\n\tif (requestOptions.sessionId) {\n\t\theader.context.session = {\n\t\t\tid: requestOptions.sessionId,\n\t\t\t_content: requestOptions.sessionId\n\t\t};\n\t}\n\n\tif (requestOptions.sessionSeq) {\n\t\theader.context.notify = {\n\t\t\tseq: requestOptions.sessionSeq\n\t\t};\n\t}\n\n\tif (requestOptions.accountName) {\n\t\theader.context.account = {\n\t\t\tby: 'name',\n\t\t\t_content: requestOptions.accountName\n\t\t};\n\t}\n\n\tif (requestOptions.accountId) {\n\t\theader.context.account = {\n\t\t\tby: 'id',\n\t\t\t_content: requestOptions.accountId\n\t\t};\n\t}\n\n\tif (requestOptions.jwtToken) {\n\t\theader.context.authToken = {\n\t\t\t_content: requestOptions.jwtToken\n\t\t};\n\t}\n\n\tif (requestOptions.csrfToken) {\n\t\toptions.headers['X-Zimbra-Csrf-Token'] = requestOptions.csrfToken;\n\n\t\theader.context.csrfToken = requestOptions.csrfToken;\n\t}\n\n\tconst body = {\n\t\t[soapRequestName]: soapCommandBody(options)\n\t};\n\n\treturn fetch(url, {\n\t\tmethod: 'POST',\n\t\tcredentials: options.credentials,\n\t\tbody: JSON.stringify({\n\t\t\tBody: body,\n\t\t\tHeader: header\n\t\t}),\n\t\theaders: options.headers\n\t})\n\t\t.then(parseJSON)\n\t\t.then(response => {\n\t\t\tconst globalFault = get(response.parsed, 'Body.Fault');\n\n\t\t\tif (globalFault) {\n\t\t\t\tthrow faultError(response, globalFault);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbody: response.parsed.Body[soapResponseName],\n\t\t\t\theader: response.parsed.Header,\n\t\t\t\tnamespace: response.parsed._jsns,\n\t\t\t\toriginalResponse: response\n\t\t\t};\n\t\t});\n}\n","export type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AccountAceInfo = {\n  __typename?: 'AccountACEInfo';\n  zimbraId?: Maybe<Scalars['ID']>;\n  granteeType: GranteeType;\n  right: Scalars['String'];\n  address?: Maybe<Scalars['String']>;\n  key?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  deny?: Maybe<Scalars['Boolean']>;\n  checkGrantee?: Maybe<Scalars['Boolean']>;\n};\n\n/** Used by GrantRightsRequest */\nexport type AccountAceInfoInput = {\n  zimbraId?: Maybe<Scalars['ID']>;\n  granteeType: GranteeType;\n  right: Scalars['String'];\n  address?: Maybe<Scalars['String']>;\n  key?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  deny?: Maybe<Scalars['Boolean']>;\n  checkGrantee?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AccountCos = {\n  __typename?: 'AccountCos';\n  name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type AccountInfo = {\n  __typename?: 'AccountInfo';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  publicURL?: Maybe<Scalars['String']>;\n  rest?: Maybe<Scalars['String']>;\n  used?: Maybe<Scalars['String']>;\n  profileImageId?: Maybe<Scalars['Int']>;\n  changePasswordURL?: Maybe<Scalars['String']>;\n  soapURL?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  attrs?: Maybe<AccountInfoAttrs>;\n  license?: Maybe<License>;\n  props?: Maybe<PropList>;\n  zimlets?: Maybe<AccountZimlet>;\n  cos?: Maybe<AccountCos>;\n};\n\nexport type AccountInfoAttrs = {\n  __typename?: 'AccountInfoAttrs';\n  displayName?: Maybe<Scalars['String']>;\n  zimbraIsAdminAccount?: Maybe<Scalars['Boolean']>;\n  zimbraIsDelegatedAdminAccount?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureMailEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureCalendarEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureBriefcasesEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureRelatedContactsEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureChangePasswordEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureResetPasswordStatus?: Maybe<ResetPasswordStatus>;\n  zimbraFeatureWebClientOfflineAccessEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraMailBlacklistMaxNumEntries?: Maybe<Scalars['Int']>;\n  zimbraMailQuota?: Maybe<Scalars['String']>;\n  zimbraPublicSharingEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraExternalSharingEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureGalEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureGalAutoCompleteEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureOutOfOfficeReplyEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureFiltersEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureReadReceiptsEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureSharingEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureManageZimlets?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureTwoFactorAuthAvailable?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureTwoFactorAuthRequired?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureViewInHtmlEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraTwoFactorAuthEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureTrustedDevicesEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureAppSpecificPasswordsEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFeatureMailPriorityEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraFileUploadMaxSize?: Maybe<Scalars['Float']>;\n  zimbraMailAlias?: Maybe<Array<Maybe<Scalars['String']>>>;\n  zimbraFeatureTaggingEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraIdentityMaxNumEntries?: Maybe<Scalars['Int']>;\n  zimbraFeatureIdentitiesEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum AccountType {\n  Imap = 'imap',\n  Pop3 = 'pop3'\n}\n\nexport type AccountZimlet = {\n  __typename?: 'AccountZimlet';\n  zimlet?: Maybe<Array<Maybe<AccountZimletInfo>>>;\n};\n\nexport type AccountZimletConfigInfo = {\n  __typename?: 'AccountZimletConfigInfo';\n  name?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  extension?: Maybe<Scalars['String']>;\n  target?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type AccountZimletContext = {\n  __typename?: 'AccountZimletContext';\n  baseUrl?: Maybe<Scalars['String']>;\n  priority?: Maybe<Scalars['Int']>;\n  presence?: Maybe<ZimletPresence>;\n};\n\nexport type AccountZimletDesc = {\n  __typename?: 'AccountZimletDesc';\n  name?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  extension?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n  zimbraXZimletCompatibleSemVer?: Maybe<Scalars['String']>;\n};\n\nexport type AccountZimletInfo = {\n  __typename?: 'AccountZimletInfo';\n  zimletContext?: Maybe<Array<Maybe<AccountZimletContext>>>;\n  zimlet?: Maybe<Array<Maybe<AccountZimletDesc>>>;\n  zimletConfig?: Maybe<Array<Maybe<AccountZimletConfigInfo>>>;\n};\n\nexport type Acl = {\n  __typename?: 'ACL';\n  grant?: Maybe<Array<Maybe<AclGrant>>>;\n};\n\nexport type AclGrant = {\n  __typename?: 'ACLGrant';\n  address?: Maybe<Scalars['String']>;\n  permissions?: Maybe<Scalars['String']>;\n  granteeType?: Maybe<GranteeType>;\n  zimbraId?: Maybe<Scalars['ID']>;\n  password?: Maybe<Scalars['String']>;\n  key?: Maybe<Scalars['String']>;\n};\n\nexport type ActionOpResponse = {\n  __typename?: 'ActionOpResponse';\n  action?: Maybe<ActionOpResponseData>;\n};\n\nexport type ActionOpResponseData = {\n  __typename?: 'ActionOpResponseData';\n  id: Scalars['ID'];\n  op: Scalars['String'];\n};\n\nexport enum ActionTypeName {\n  ContactAction = 'ContactAction',\n  ConvAction = 'ConvAction',\n  DistributionList = 'DistributionList',\n  FolderAction = 'FolderAction',\n  ItemAction = 'ItemAction',\n  MsgAction = 'MsgAction',\n  TagAction = 'TagAction'\n}\n\nexport type AddMsgInput = {\n  folderId: Scalars['ID'];\n  absFolderPath?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n  meta?: Maybe<Scalars['String']>;\n};\n\nexport type AddRecurrenceInfo = {\n  __typename?: 'AddRecurrenceInfo';\n  add?: Maybe<Array<Maybe<AddRecurrenceInfo>>>;\n  exclude?: Maybe<Array<Maybe<ExcludeRecurrenceInfo>>>;\n  except?: Maybe<Array<Maybe<ExceptionRuleInfo>>>;\n  cancel?: Maybe<Array<Maybe<CancelRuleInfo>>>;\n  /** dates: SingleDates # TODO */\n  rule?: Maybe<Array<Maybe<SimpleRepeatingRule>>>;\n};\n\nexport type AddressCondition = {\n  __typename?: 'AddressCondition';\n  header: Scalars['String'];\n  part: Scalars['String'];\n  stringComparison: Scalars['String'];\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  value: Scalars['String'];\n  valueComparison?: Maybe<Scalars['String']>;\n  countComparison?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AddressConditionInput = {\n  header: Scalars['String'];\n  part: Scalars['String'];\n  stringComparison: Scalars['String'];\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  value: Scalars['String'];\n  valueComparison?: Maybe<Scalars['String']>;\n  countComparison?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum AddressType {\n  F = 'f',\n  T = 't',\n  C = 'c',\n  B = 'b',\n  R = 'r',\n  S = 's',\n  N = 'n',\n  Rf = 'rf'\n}\n\nexport type Alarm = {\n  __typename?: 'Alarm';\n  alarmInstStart?: Maybe<Scalars['Float']>;\n  componentNum?: Maybe<Scalars['Int']>;\n  inviteId?: Maybe<Scalars['ID']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nextAlarm?: Maybe<Scalars['Float']>;\n};\n\nexport enum AlarmAction {\n  Display = 'DISPLAY',\n  Audio = 'AUDIO',\n  Email = 'EMAIL',\n  Procedure = 'PROCEDURE',\n  XYahooCalendarActionIm = 'X_YAHOO_CALENDAR_ACTION_IM',\n  XYahooCalendarActionMobile = 'X_YAHOO_CALENDAR_ACTION_MOBILE',\n  None = 'NONE'\n}\n\nexport enum AlarmRelatedTo {\n  Start = 'START',\n  End = 'END'\n}\n\nexport type AppointmentInfo = {\n  __typename?: 'AppointmentInfo';\n  id: Scalars['ID'];\n  invitations?: Maybe<Array<Maybe<Invitation>>>;\n};\n\nexport type AppSpecificPassword = {\n  __typename?: 'AppSpecificPassword';\n  appName?: Maybe<Scalars['String']>;\n  created?: Maybe<Scalars['Float']>;\n  lastUsed?: Maybe<Scalars['Float']>;\n};\n\nexport type AppSpecificPasswords = {\n  __typename?: 'AppSpecificPasswords';\n  passwordData?: Maybe<Array<Maybe<AppSpecificPassword>>>;\n};\n\nexport type AppSpecificPasswordsResponse = {\n  __typename?: 'AppSpecificPasswordsResponse';\n  appSpecificPasswords?: Maybe<AppSpecificPasswords>;\n  maxAppPasswords?: Maybe<Array<Maybe<MaxAppPasswords>>>;\n};\n\nexport type Attachment = {\n  __typename?: 'Attachment';\n  id?: Maybe<Scalars['ID']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type AttachmentInput = {\n  attachmentId?: Maybe<Scalars['String']>;\n  documents?: Maybe<Array<Maybe<DocumentInput>>>;\n  existingAttachments?: Maybe<Array<Maybe<ExistingAttachmentInput>>>;\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  authToken?: Maybe<Array<Maybe<AuthToken>>>;\n  twoFactorAuthRequired?: Maybe<TwoFactorAuthRequired>;\n  trustedDevicesEnabled?: Maybe<TrustedDevicesEnabled>;\n  lifetime?: Maybe<Scalars['Float']>;\n  session?: Maybe<Session>;\n  skin?: Maybe<Array<Maybe<Skin>>>;\n  csrfToken?: Maybe<CsrfToken>;\n};\n\nexport type AuthToken = {\n  __typename?: 'AuthToken';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type AutoCompleteGalResponse = {\n  __typename?: 'AutoCompleteGALResponse';\n  contacts?: Maybe<Array<Maybe<Contact>>>;\n};\n\nexport type AutoCompleteMatch = {\n  __typename?: 'AutoCompleteMatch';\n  email?: Maybe<Scalars['String']>;\n  type?: Maybe<AutoCompleteMatchType>;\n  ranking?: Maybe<Scalars['Int']>;\n  isGroup?: Maybe<Scalars['Boolean']>;\n  exp?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['ID']>;\n  folderId?: Maybe<Scalars['ID']>;\n  display?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['String']>;\n  middle?: Maybe<Scalars['String']>;\n  last?: Maybe<Scalars['String']>;\n  full?: Maybe<Scalars['String']>;\n  nick?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  fileas?: Maybe<Scalars['String']>;\n};\n\nexport enum AutoCompleteMatchType {\n  Gal = 'gal',\n  Contact = 'contact',\n  RankingTable = 'rankingTable'\n}\n\nexport type AutoCompleteResponse = {\n  __typename?: 'AutoCompleteResponse';\n  canBeCached?: Maybe<Scalars['Boolean']>;\n  match?: Maybe<Array<Maybe<AutoCompleteMatch>>>;\n};\n\nexport type BasicAction = {\n  __typename?: 'BasicAction';\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type BasicActionInput = {\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type BasicCondition = {\n  __typename?: 'BasicCondition';\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BasicConditionInput = {\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BodyCondition = {\n  __typename?: 'BodyCondition';\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  value?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BodyConditionInput = {\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  value?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ByDayRule = {\n  __typename?: 'ByDayRule';\n  wkday?: Maybe<Array<Maybe<WkDay>>>;\n};\n\nexport type ByMonthDayRule = {\n  __typename?: 'ByMonthDayRule';\n  dayList?: Maybe<Scalars['String']>;\n};\n\nexport type ByMonthRule = {\n  __typename?: 'ByMonthRule';\n  monthList?: Maybe<Scalars['Int']>;\n};\n\nexport type BySetPosRule = {\n  __typename?: 'BySetPosRule';\n  poslist?: Maybe<Scalars['Int']>;\n};\n\nexport type CalendarCounterAppointmentInput = {\n  components: Array<Maybe<CalendarItemInviteComponentCounterInput>>;\n};\n\nexport type CalendarItemAlarm = {\n  __typename?: 'CalendarItemAlarm';\n  action: AlarmAction;\n  trigger?: Maybe<Array<Maybe<CalendarItemAlarmTrigger>>>;\n  attendees?: Maybe<Array<Maybe<CalendarItemAlarmAttendees>>>;\n};\n\nexport type CalendarItemAlarmAttendees = {\n  __typename?: 'CalendarItemAlarmAttendees';\n  email: Scalars['String'];\n};\n\nexport type CalendarItemAlarmAttendeesInput = {\n  email: Scalars['String'];\n};\n\nexport type CalendarItemAlarmInput = {\n  action: AlarmAction;\n  trigger: CalendarItemAlarmTriggerInput;\n  attendees?: Maybe<CalendarItemAlarmAttendeesInput>;\n};\n\nexport type CalendarItemAlarmTrigger = {\n  __typename?: 'CalendarItemAlarmTrigger';\n  relative?: Maybe<Array<Maybe<CalendarItemAlarmTriggerRelative>>>;\n};\n\nexport type CalendarItemAlarmTriggerAbsoluteInput = {\n  date: Scalars['String'];\n};\n\nexport type CalendarItemAlarmTriggerInput = {\n  relative?: Maybe<CalendarItemAlarmTriggerRelativeInput>;\n  absolute?: Maybe<CalendarItemAlarmTriggerAbsoluteInput>;\n};\n\nexport type CalendarItemAlarmTriggerRelative = {\n  __typename?: 'CalendarItemAlarmTriggerRelative';\n  weeks?: Maybe<Scalars['Int']>;\n  days?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  minutes?: Maybe<Scalars['Int']>;\n  seconds?: Maybe<Scalars['Int']>;\n  relatedTo?: Maybe<AlarmRelatedTo>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemAlarmTriggerRelativeInput = {\n  weeks?: Maybe<Scalars['Int']>;\n  days?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  minutes?: Maybe<Scalars['Int']>;\n  seconds?: Maybe<Scalars['Int']>;\n  relatedTo?: Maybe<AlarmRelatedTo>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemAttendee = {\n  __typename?: 'CalendarItemAttendee';\n  role?: Maybe<ParticipationRole>;\n  participationStatus?: Maybe<ParticipationStatus>;\n  rsvp?: Maybe<Scalars['Boolean']>;\n  address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  calendarUserType?: Maybe<Scalars['String']>;\n};\n\nexport type CalendarItemAttendeesInput = {\n  role?: Maybe<ParticipationRole>;\n  participationStatus?: Maybe<ParticipationStatus>;\n  rsvp?: Maybe<Scalars['Boolean']>;\n  address: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  calendarUserType?: Maybe<Scalars['String']>;\n};\n\nexport enum CalendarItemClass {\n  Pri = 'PRI',\n  Pub = 'PUB',\n  Con = 'CON'\n}\n\nexport type CalendarItemDateTimeInput = {\n  timezone?: Maybe<Scalars['String']>;\n  date: Scalars['String'];\n};\n\nexport type CalendarItemHitInfo = {\n  __typename?: 'CalendarItemHitInfo';\n  alarm?: Maybe<Scalars['Boolean']>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  class: CalendarItemClass;\n  componentNum?: Maybe<Scalars['Int']>;\n  date?: Maybe<Scalars['Float']>;\n  timezoneOffset?: Maybe<Scalars['Int']>;\n  duration?: Maybe<Scalars['Float']>;\n  excerpt?: Maybe<Scalars['String']>;\n  flags?: Maybe<Scalars['String']>;\n  folderId: Scalars['ID'];\n  freeBusy?: Maybe<FreeBusyStatus>;\n  freeBusyActual?: Maybe<FreeBusyStatus>;\n  id: Scalars['ID'];\n  alarmData?: Maybe<Array<Maybe<Alarm>>>;\n  instances?: Maybe<Array<Maybe<Instance>>>;\n  invitations?: Maybe<Array<Maybe<Invitation>>>;\n  inviteId: Scalars['ID'];\n  isOrganizer?: Maybe<Scalars['Boolean']>;\n  isRecurring?: Maybe<Scalars['Boolean']>;\n  location?: Maybe<Scalars['String']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  organizer?: Maybe<CalOrganizer>;\n  otherAttendees?: Maybe<Scalars['Boolean']>;\n  participationStatus?: Maybe<ParticipationStatus>;\n  percentComplete?: Maybe<Scalars['String']>;\n  priority?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  utcRecurrenceId?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  sortField?: Maybe<Scalars['String']>;\n  status?: Maybe<InviteCompletionStatus>;\n  tagNames?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  uid?: Maybe<Scalars['String']>;\n  x_uid?: Maybe<Scalars['String']>;\n  aid?: Maybe<Scalars['String']>;\n  draft?: Maybe<Scalars['Boolean']>;\n  neverSent?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemInput = {\n  id?: Maybe<Scalars['ID']>;\n  modifiedSequence?: Maybe<Scalars['Float']>;\n  revision?: Maybe<Scalars['Float']>;\n  componentNum?: Maybe<Scalars['Int']>;\n  message: CalendarItemMessageInput;\n};\n\nexport type CalendarItemInviteComponentCounterInput = {\n  name: Scalars['String'];\n  location?: Maybe<Scalars['String']>;\n  start: CalendarItemDateTimeInput;\n  end: CalendarItemDateTimeInput;\n  exceptId?: Maybe<CalendarOptionalItemDateTimeInput>;\n  freeBusy?: Maybe<FreeBusyStatus>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  organizer?: Maybe<CalendarItemOrganizerInput>;\n  recurrence?: Maybe<CalendarItemRecurrenceInput>;\n  attendees?: Maybe<Array<Maybe<CalendarItemAttendeesInput>>>;\n  alarms?: Maybe<Array<Maybe<CalendarItemAlarmInput>>>;\n  class?: Maybe<CalendarItemClass>;\n  uid?: Maybe<Scalars['String']>;\n  priority?: Maybe<Scalars['String']>;\n  percentComplete?: Maybe<Scalars['String']>;\n  status?: Maybe<InviteCompletionStatus>;\n  noBlob?: Maybe<Scalars['Boolean']>;\n  description?: Maybe<Array<Maybe<CalendarItemInviteComponentDescriptionInput>>>;\n  draft?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemInviteComponentDescriptionInput = {\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type CalendarItemInviteComponentInput = {\n  name?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  start?: Maybe<CalendarItemDateTimeInput>;\n  end?: Maybe<CalendarItemDateTimeInput>;\n  exceptId?: Maybe<CalendarOptionalItemDateTimeInput>;\n  freeBusy?: Maybe<FreeBusyStatus>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  organizer?: Maybe<CalendarItemOrganizerInput>;\n  recurrence?: Maybe<CalendarItemRecurrenceInput>;\n  attendees?: Maybe<Array<Maybe<CalendarItemAttendeesInput>>>;\n  alarms?: Maybe<Array<Maybe<CalendarItemAlarmInput>>>;\n  class: CalendarItemClass;\n  priority?: Maybe<Scalars['String']>;\n  percentComplete?: Maybe<Scalars['String']>;\n  status?: Maybe<InviteCompletionStatus>;\n  noBlob?: Maybe<Scalars['Boolean']>;\n  description?: Maybe<Array<Maybe<CalendarItemInviteComponentDescriptionInput>>>;\n  draft?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemInviteInput = {\n  components: Array<Maybe<CalendarItemInviteComponentInput>>;\n};\n\nexport type CalendarItemMessageInput = {\n  folderId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  invitations?: Maybe<CalendarItemInviteInput>;\n  mimeParts?: Maybe<Array<Maybe<MimePartInput>>>;\n  emailAddresses?: Maybe<Array<Maybe<MailItemEmailAddressInput>>>;\n  attachments?: Maybe<Array<Maybe<AttachmentInput>>>;\n  replyType?: Maybe<InviteReplyType>;\n};\n\nexport type CalendarItemOrganizerInput = {\n  address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  sentBy?: Maybe<Scalars['String']>;\n};\n\nexport type CalendarItemRecurrenceAddInput = {\n  rule?: Maybe<CalendarItemRecurrenceRuleInput>;\n};\n\nexport type CalendarItemRecurrenceByDayInput = {\n  wkday?: Maybe<Array<Maybe<WkDayInput>>>;\n};\n\nexport type CalendarItemRecurrenceByMonthDayInput = {\n  dayList: Scalars['String'];\n};\n\nexport type CalendarItemRecurrenceByMonthInput = {\n  monthList: Scalars['Int'];\n};\n\nexport type CalendarItemRecurrenceBySetPosInput = {\n  poslist: Scalars['Int'];\n};\n\nexport type CalendarItemRecurrenceEndCount = {\n  __typename?: 'CalendarItemRecurrenceEndCount';\n  number?: Maybe<Scalars['Int']>;\n};\n\nexport type CalendarItemRecurrenceEndCountInput = {\n  number: Scalars['Int'];\n};\n\nexport type CalendarItemRecurrenceEndDate = {\n  __typename?: 'CalendarItemRecurrenceEndDate';\n  date?: Maybe<Scalars['String']>;\n};\n\nexport type CalendarItemRecurrenceEndDateInput = {\n  date: Scalars['String'];\n};\n\nexport enum CalendarItemRecurrenceFrequency {\n  Sec = 'SEC',\n  Min = 'MIN',\n  Hou = 'HOU',\n  Dai = 'DAI',\n  Wee = 'WEE',\n  Mon = 'MON',\n  Yea = 'YEA'\n}\n\nexport type CalendarItemRecurrenceInput = {\n  add?: Maybe<CalendarItemRecurrenceAddInput>;\n};\n\nexport type CalendarItemRecurrenceIntervalInput = {\n  intervalCount: Scalars['Int'];\n  zimbraPrefAutoAddAppointmentsToCalendar?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CalendarItemRecurrenceRuleInput = {\n  interval?: Maybe<CalendarItemRecurrenceIntervalInput>;\n  frequency?: Maybe<CalendarItemRecurrenceFrequency>;\n  count?: Maybe<CalendarItemRecurrenceEndCountInput>;\n  until?: Maybe<CalendarItemRecurrenceEndDateInput>;\n  byday?: Maybe<CalendarItemRecurrenceByDayInput>;\n  bymonthday?: Maybe<CalendarItemRecurrenceByMonthDayInput>;\n  bymonth?: Maybe<CalendarItemRecurrenceByMonthInput>;\n  bysetpos?: Maybe<CalendarItemRecurrenceBySetPosInput>;\n};\n\nexport type CalendarItemReply = {\n  __typename?: 'CalendarItemReply';\n  participationStatus?: Maybe<ParticipationStatus>;\n  attendee?: Maybe<Scalars['String']>;\n};\n\nexport type CalendarOptionalItemDateTimeInput = {\n  timezone?: Maybe<Scalars['String']>;\n  date?: Maybe<Scalars['String']>;\n};\n\nexport type CalOrganizer = {\n  __typename?: 'CalOrganizer';\n  address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  sentBy?: Maybe<Scalars['String']>;\n};\n\nexport type CalTzInfo = {\n  __typename?: 'CalTZInfo';\n  id?: Maybe<Scalars['String']>;\n  timezoneStdOffset?: Maybe<Scalars['Int']>;\n  timezoneDaylightOffset?: Maybe<Scalars['Int']>;\n  stdname?: Maybe<Scalars['String']>;\n  dayname?: Maybe<Scalars['String']>;\n  standard?: Maybe<TzOnsetInfo>;\n  daylight?: Maybe<TzOnsetInfo>;\n};\n\nexport type CancelRuleInfo = {\n  __typename?: 'CancelRuleInfo';\n  rangeType?: Maybe<Scalars['Int']>;\n  recurId?: Maybe<Scalars['String']>;\n  tz?: Maybe<Scalars['String']>;\n  ridZ?: Maybe<Scalars['String']>;\n};\n\nexport type ClientInfoAttributes = {\n  __typename?: 'ClientInfoAttributes';\n  zimbraWebClientLoginURL?: Maybe<Scalars['String']>;\n  zimbraWebClientLogoutURL?: Maybe<Scalars['String']>;\n};\n\nexport type ClientInfoInput = {\n  domain?: Maybe<Scalars['String']>;\n};\n\nexport type ClientInfoType = {\n  __typename?: 'ClientInfoType';\n  attributes?: Maybe<ClientInfoAttributes>;\n};\n\nexport enum ConnectionType {\n  Cleartext = 'cleartext',\n  Ssl = 'ssl',\n  Tls = 'tls',\n  TlsIsAvailable = 'tls_is_available'\n}\n\nexport type Contact = {\n  __typename?: 'Contact';\n  id: Scalars['ID'];\n  date?: Maybe<Scalars['Float']>;\n  folderId?: Maybe<Scalars['ID']>;\n  revision?: Maybe<Scalars['Float']>;\n  sortField?: Maybe<Scalars['String']>;\n  fileAsStr?: Maybe<Scalars['String']>;\n  memberOf?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  attributes?: Maybe<ContactAttributes>;\n  members?: Maybe<Array<Maybe<ContactListMember>>>;\n};\n\nexport type ContactAttributes = {\n  __typename?: 'ContactAttributes';\n  firstName?: Maybe<Scalars['String']>;\n  middleName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  maidenName?: Maybe<Scalars['String']>;\n  namePrefix?: Maybe<Scalars['String']>;\n  nameSuffix?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  email2?: Maybe<Scalars['String']>;\n  workEmail?: Maybe<Scalars['String']>;\n  workEmail2?: Maybe<Scalars['String']>;\n  homeEmail?: Maybe<Scalars['String']>;\n  homeEmail2?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  phone2?: Maybe<Scalars['String']>;\n  companyPhone?: Maybe<Scalars['String']>;\n  companyPhone2?: Maybe<Scalars['String']>;\n  otherPhone?: Maybe<Scalars['String']>;\n  otherPhone2?: Maybe<Scalars['String']>;\n  mobilePhone?: Maybe<Scalars['String']>;\n  mobilePhone2?: Maybe<Scalars['String']>;\n  homePhone?: Maybe<Scalars['String']>;\n  homePhone2?: Maybe<Scalars['String']>;\n  workPhone?: Maybe<Scalars['String']>;\n  workPhone2?: Maybe<Scalars['String']>;\n  pager?: Maybe<Scalars['String']>;\n  pager2?: Maybe<Scalars['String']>;\n  homeFax?: Maybe<Scalars['String']>;\n  homeFax2?: Maybe<Scalars['String']>;\n  workFax?: Maybe<Scalars['String']>;\n  workFax2?: Maybe<Scalars['String']>;\n  imAddress?: Maybe<Scalars['String']>;\n  imAddress1?: Maybe<Scalars['String']>;\n  imAddress2?: Maybe<Scalars['String']>;\n  imAddress3?: Maybe<Scalars['String']>;\n  imAddress4?: Maybe<Scalars['String']>;\n  imAddress5?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  homeStreet?: Maybe<Scalars['String']>;\n  homeCity?: Maybe<Scalars['String']>;\n  homeState?: Maybe<Scalars['String']>;\n  homePostalCode?: Maybe<Scalars['String']>;\n  homeCountry?: Maybe<Scalars['String']>;\n  homeURL?: Maybe<Scalars['String']>;\n  workStreet?: Maybe<Scalars['String']>;\n  workCity?: Maybe<Scalars['String']>;\n  workState?: Maybe<Scalars['String']>;\n  workPostalCode?: Maybe<Scalars['String']>;\n  workCountry?: Maybe<Scalars['String']>;\n  workURL?: Maybe<Scalars['String']>;\n  jobTitle?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  department?: Maybe<Scalars['String']>;\n  birthday?: Maybe<Scalars['String']>;\n  anniversary?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  notes?: Maybe<Scalars['String']>;\n  thumbnailPhoto?: Maybe<Scalars['String']>;\n  image?: Maybe<ContactImage>;\n  userCertificate?: Maybe<Scalars['String']>;\n  zimbraCalResType?: Maybe<Scalars['String']>;\n  assistantPhone?: Maybe<Scalars['String']>;\n  callbackPhone?: Maybe<Scalars['String']>;\n  carPhone?: Maybe<Scalars['String']>;\n  otherCity?: Maybe<Scalars['String']>;\n  otherCountry?: Maybe<Scalars['String']>;\n  otherFax?: Maybe<Scalars['String']>;\n  otherPostalCode?: Maybe<Scalars['String']>;\n  otherState?: Maybe<Scalars['String']>;\n  otherStreet?: Maybe<Scalars['String']>;\n  otherURL?: Maybe<Scalars['String']>;\n  /** Used for contact lists */\n  fileAs?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  other?: Maybe<Array<Maybe<OtherContactAttribute>>>;\n};\n\nexport type ContactAttrsInput = {\n  firstName?: Maybe<Scalars['String']>;\n  middleName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  maidenName?: Maybe<Scalars['String']>;\n  namePrefix?: Maybe<Scalars['String']>;\n  nameSuffix?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  email2?: Maybe<Scalars['String']>;\n  workEmail?: Maybe<Scalars['String']>;\n  workEmail2?: Maybe<Scalars['String']>;\n  homeEmail?: Maybe<Scalars['String']>;\n  homeEmail2?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  phone2?: Maybe<Scalars['String']>;\n  companyPhone?: Maybe<Scalars['String']>;\n  companyPhone2?: Maybe<Scalars['String']>;\n  otherPhone?: Maybe<Scalars['String']>;\n  otherPhone2?: Maybe<Scalars['String']>;\n  mobilePhone?: Maybe<Scalars['String']>;\n  mobilePhone2?: Maybe<Scalars['String']>;\n  homePhone?: Maybe<Scalars['String']>;\n  homePhone2?: Maybe<Scalars['String']>;\n  workPhone?: Maybe<Scalars['String']>;\n  workPhone2?: Maybe<Scalars['String']>;\n  pager?: Maybe<Scalars['String']>;\n  pager2?: Maybe<Scalars['String']>;\n  homeFax2?: Maybe<Scalars['String']>;\n  workFax2?: Maybe<Scalars['String']>;\n  imAddress?: Maybe<Scalars['String']>;\n  imAddress1?: Maybe<Scalars['String']>;\n  imAddress2?: Maybe<Scalars['String']>;\n  imAddress3?: Maybe<Scalars['String']>;\n  imAddress4?: Maybe<Scalars['String']>;\n  imAddress5?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  homeStreet?: Maybe<Scalars['String']>;\n  homeCity?: Maybe<Scalars['String']>;\n  homeFax?: Maybe<Scalars['String']>;\n  homeState?: Maybe<Scalars['String']>;\n  homePostalCode?: Maybe<Scalars['String']>;\n  homeCountry?: Maybe<Scalars['String']>;\n  homeURL?: Maybe<Scalars['String']>;\n  workFax?: Maybe<Scalars['String']>;\n  workStreet?: Maybe<Scalars['String']>;\n  workCity?: Maybe<Scalars['String']>;\n  workState?: Maybe<Scalars['String']>;\n  workPostalCode?: Maybe<Scalars['String']>;\n  workCountry?: Maybe<Scalars['String']>;\n  workURL?: Maybe<Scalars['String']>;\n  jobTitle?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  department?: Maybe<Scalars['String']>;\n  birthday?: Maybe<Scalars['String']>;\n  anniversary?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  notes?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  userCertificate?: Maybe<Scalars['String']>;\n  assistantPhone?: Maybe<Scalars['String']>;\n  callbackPhone?: Maybe<Scalars['String']>;\n  carPhone?: Maybe<Scalars['String']>;\n  otherCity?: Maybe<Scalars['String']>;\n  otherCountry?: Maybe<Scalars['String']>;\n  otherFax?: Maybe<Scalars['String']>;\n  otherPostalCode?: Maybe<Scalars['String']>;\n  otherState?: Maybe<Scalars['String']>;\n  otherStreet?: Maybe<Scalars['String']>;\n  otherURL?: Maybe<Scalars['String']>;\n  /** Used for contact lists */\n  fileAs?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  other?: Maybe<Array<Maybe<OtherContactAttributeInput>>>;\n};\n\nexport type ContactFrequencyData = {\n  __typename?: 'ContactFrequencyData';\n  by?: Maybe<Scalars['String']>;\n  dataPoint?: Maybe<Array<Maybe<ContactFrequencyDataPoints>>>;\n};\n\nexport type ContactFrequencyDataPoints = {\n  __typename?: 'ContactFrequencyDataPoints';\n  label?: Maybe<Scalars['Float']>;\n  value?: Maybe<Scalars['Int']>;\n};\n\nexport type ContactFrequencyResponse = {\n  __typename?: 'ContactFrequencyResponse';\n  data?: Maybe<Array<Maybe<ContactFrequencyData>>>;\n};\n\nexport type ContactFrequencySpec = {\n  range: Scalars['String'];\n  interval: Scalars['String'];\n};\n\nexport type ContactImage = {\n  __typename?: 'ContactImage';\n  contentType?: Maybe<Scalars['String']>;\n  filename?: Maybe<Scalars['String']>;\n  part?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n};\n\nexport type ContactListMember = {\n  __typename?: 'ContactListMember';\n  contacts?: Maybe<Array<Maybe<Contact>>>;\n  type: ContactType;\n  value: Scalars['ID'];\n};\n\nexport type ContactListOps = {\n  op: Scalars['String'];\n  type: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport enum ContactType {\n  C = 'C',\n  G = 'G',\n  I = 'I'\n}\n\nexport type Conversation = MailItem & {\n  __typename?: 'Conversation';\n  id?: Maybe<Scalars['ID']>;\n  size?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['Float']>;\n  folderId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n  emailAddresses?: Maybe<Array<Maybe<EmailAddress>>>;\n  conversationId?: Maybe<Scalars['ID']>;\n  flags?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  invitations?: Maybe<Array<Maybe<InviteInfo>>>;\n  sortField?: Maybe<Scalars['String']>;\n  messages?: Maybe<Array<Maybe<MessageInfo>>>;\n  messagesMetaData?: Maybe<Array<Maybe<MessageInfo>>>;\n  numMessages?: Maybe<Scalars['Int']>;\n  unread?: Maybe<Scalars['Int']>;\n  share?: Maybe<Array<Maybe<ShareNotification>>>;\n  replyType?: Maybe<Scalars['String']>;\n};\n\nexport type ConversationCondition = {\n  __typename?: 'ConversationCondition';\n  where?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ConversationConditionInput = {\n  where?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CounterAppointmentInput = {\n  id: Scalars['ID'];\n  modifiedSequence?: Maybe<Scalars['Float']>;\n  revision?: Maybe<Scalars['Float']>;\n  componentNum?: Maybe<Scalars['Int']>;\n  message: CounterAppointmentMessageInput;\n};\n\nexport type CounterAppointmentMessageInput = {\n  origId?: Maybe<Scalars['ID']>;\n  folderId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  invitations?: Maybe<CalendarCounterAppointmentInput>;\n  mimeParts?: Maybe<Array<Maybe<MimePartInput>>>;\n  emailAddresses?: Maybe<Array<Maybe<MailItemEmailAddressInput>>>;\n  attachments?: Maybe<Array<Maybe<AttachmentInput>>>;\n  replyType?: Maybe<InviteReplyType>;\n};\n\nexport type CreateAppSpecificPasswordResponse = {\n  __typename?: 'CreateAppSpecificPasswordResponse';\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type CreateContactInput = {\n  folderId?: Maybe<Scalars['ID']>;\n  tagNames?: Maybe<Scalars['String']>;\n  attributes: ContactAttrsInput;\n};\n\nexport type CreateIdentityInput = {\n  name: Scalars['String'];\n  attrs?: Maybe<IdentityAttrsInput>;\n};\n\nexport type CreateMountpointInput = {\n  link?: Maybe<NewMountpointSpec>;\n};\n\nexport type CreateTagInput = {\n  name: Scalars['String'];\n  color?: Maybe<Scalars['Int']>;\n};\n\nexport type CsrfToken = {\n  __typename?: 'CsrfToken';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type Cursor = {\n  id?: Maybe<Scalars['ID']>;\n  sortField?: Maybe<Scalars['String']>;\n  endSortVal?: Maybe<Scalars['String']>;\n  includeOffset?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CustomMetadata = {\n  __typename?: 'CustomMetadata';\n  meta?: Maybe<Array<Maybe<CustomMetadataMeta>>>;\n};\n\nexport type CustomMetadataAttrs = {\n  __typename?: 'CustomMetadataAttrs';\n  key?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type CustomMetadataAttrsInput = {\n  key?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type CustomMetadataInput = {\n  id: Scalars['ID'];\n  section?: Maybe<Scalars['String']>;\n  attrs?: Maybe<Array<Maybe<CustomMetadataAttrsInput>>>;\n};\n\nexport type CustomMetadataMeta = {\n  __typename?: 'CustomMetadataMeta';\n  section: Scalars['String'];\n  _attrs?: Maybe<Array<Maybe<CustomMetadataAttrs>>>;\n};\n\nexport type DataSource = {\n  __typename?: 'DataSource';\n  id: Scalars['ID'];\n  connectionType?: Maybe<Scalars['String']>;\n  defaultSignature?: Maybe<Scalars['ID']>;\n  emailAddress?: Maybe<Scalars['String']>;\n  l?: Maybe<Scalars['ID']>;\n  forwardReplySignature?: Maybe<Scalars['ID']>;\n  fromDisplay?: Maybe<Scalars['String']>;\n  host?: Maybe<Scalars['String']>;\n  importOnly?: Maybe<Scalars['Boolean']>;\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  pollingInterval?: Maybe<Scalars['Float']>;\n  port?: Maybe<Scalars['String']>;\n  replyToAddress?: Maybe<Scalars['String']>;\n  replyToDisplay?: Maybe<Scalars['String']>;\n  smtpPort?: Maybe<Scalars['String']>;\n  useAddressForForwardReply?: Maybe<Scalars['Boolean']>;\n  username?: Maybe<Scalars['String']>;\n  failingSince?: Maybe<Scalars['String']>;\n  lastError?: Maybe<StringContent>;\n};\n\nexport type DataSources = {\n  __typename?: 'DataSources';\n  imap?: Maybe<Array<Maybe<DataSource>>>;\n  pop3?: Maybe<Array<Maybe<DataSource>>>;\n  cal?: Maybe<Array<Maybe<DataSource>>>;\n};\n\nexport type DateCondition = {\n  __typename?: 'DateCondition';\n  dateComparison?: Maybe<Scalars['String']>;\n  date?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DateConditionInput = {\n  dateComparison?: Maybe<Scalars['String']>;\n  date?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DeleteAppointmentInput = {\n  instanceDate?: Maybe<InstanceDate>;\n  inviteId: Scalars['String'];\n  componentNum: Scalars['String'];\n  start?: Maybe<Scalars['Int']>;\n  message?: Maybe<CalendarItemMessageInput>;\n};\n\nexport type DeleteIdentityInput = {\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type DiscoverRights = {\n  __typename?: 'DiscoverRights';\n  targets?: Maybe<Array<Maybe<Targets>>>;\n};\n\nexport type DismissInput = {\n  id: Scalars['ID'];\n  dismissedAt: Scalars['Float'];\n};\n\nexport type Document = {\n  __typename?: 'Document';\n  id?: Maybe<Scalars['ID']>;\n  folderId?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  descriptionEnabled?: Maybe<Scalars['Boolean']>;\n  date?: Maybe<Scalars['Float']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  modifiedSequence?: Maybe<Scalars['Float']>;\n  revision?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n  sortField?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  uuid?: Maybe<Scalars['ID']>;\n  folderUuid?: Maybe<Scalars['String']>;\n  metadataVersion?: Maybe<Scalars['Float']>;\n  lastEditedAccount?: Maybe<Scalars['String']>;\n  revisonCreator?: Maybe<Scalars['String']>;\n  revisedCreationDate?: Maybe<Scalars['Float']>;\n  lockOwnerId?: Maybe<Scalars['ID']>;\n};\n\nexport type DocumentInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type DtTimeInfo = {\n  __typename?: 'DtTimeInfo';\n  date?: Maybe<Scalars['String']>;\n  timezone?: Maybe<Scalars['String']>;\n  utc?: Maybe<Scalars['Float']>;\n};\n\nexport type EmailAddress = {\n  __typename?: 'EmailAddress';\n  address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  displayName?: Maybe<Scalars['String']>;\n};\n\nexport type EmailAddressInput = {\n  email: Scalars['String'];\n  name: Scalars['String'];\n  shortName: Scalars['String'];\n};\n\nexport type EnableTwoFactorAuthInput = {\n  name: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  twoFactorCode?: Maybe<Scalars['String']>;\n  authToken?: Maybe<Scalars['String']>;\n  csrfTokenSecured: Scalars['Boolean'];\n};\n\nexport type EnableTwoFactorAuthResponse = {\n  __typename?: 'EnableTwoFactorAuthResponse';\n  secret?: Maybe<Array<Maybe<Secret>>>;\n  scratchCodes?: Maybe<Array<Maybe<ScratchCode>>>;\n  authToken?: Maybe<Array<Maybe<AuthToken>>>;\n  csrfToken?: Maybe<Array<Maybe<CsrfToken>>>;\n};\n\nexport type ExceptionRuleInfo = {\n  __typename?: 'ExceptionRuleInfo';\n  rangeType?: Maybe<Scalars['Int']>;\n  recurId?: Maybe<Scalars['String']>;\n  tz?: Maybe<Scalars['String']>;\n  ridZ?: Maybe<Scalars['String']>;\n  add?: Maybe<Array<Maybe<AddRecurrenceInfo>>>;\n  exclude?: Maybe<Array<Maybe<ExcludeRecurrenceInfo>>>;\n};\n\nexport type ExcludeRecurrenceInfo = {\n  __typename?: 'ExcludeRecurrenceInfo';\n  exclude?: Maybe<Array<Maybe<ExcludeRecurrenceInfo>>>;\n  except?: Maybe<Array<Maybe<ExceptionRuleInfo>>>;\n};\n\nexport type ExistingAttachmentInput = {\n  messageId?: Maybe<Scalars['ID']>;\n  part?: Maybe<Scalars['String']>;\n};\n\nexport type ExternalAccount = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  accountType?: Maybe<AccountType>;\n  isEnabled?: Maybe<Scalars['Int']>;\n  host: Scalars['String'];\n  port: Scalars['String'];\n  connectionType?: Maybe<ConnectionType>;\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type ExternalAccountAddInput = {\n  accountType?: Maybe<AccountType>;\n  connectionType?: Maybe<ConnectionType>;\n  emailAddress?: Maybe<Scalars['String']>;\n  host: Scalars['String'];\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  l: Scalars['ID'];\n  leaveOnServer?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  password: Scalars['String'];\n  port: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type ExternalAccountImportInput = {\n  accountType?: Maybe<AccountType>;\n  id: Scalars['ID'];\n};\n\nexport type ExternalAccountModifyAttrsInput = {\n  id?: Maybe<Scalars['ID']>;\n  accountType?: Maybe<AccountType>;\n  defaultSignature?: Maybe<Scalars['ID']>;\n  description?: Maybe<Scalars['String']>;\n  emailAddress?: Maybe<Scalars['String']>;\n  fromDisplay?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  replyToAddress?: Maybe<Scalars['String']>;\n  replyToDisplay?: Maybe<Scalars['String']>;\n  replyToEnabled?: Maybe<Scalars['Boolean']>;\n  storeAndForward?: Maybe<Scalars['String']>;\n  useAddressForForwardReply?: Maybe<Scalars['Boolean']>;\n  username?: Maybe<Scalars['String']>;\n  host?: Maybe<Scalars['String']>;\n  signatureValue?: Maybe<Scalars['String']>;\n  importOnly?: Maybe<Scalars['Boolean']>;\n  forwardReplySignature?: Maybe<Scalars['ID']>;\n  connectionType?: Maybe<ConnectionType>;\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  port?: Maybe<Scalars['String']>;\n  smtpPort?: Maybe<Scalars['String']>;\n};\n\nexport type ExternalAccountTestInput = {\n  accountType?: Maybe<AccountType>;\n  connectionType?: Maybe<ConnectionType>;\n  emailAddress?: Maybe<Scalars['String']>;\n  host: Scalars['String'];\n  leaveOnServer?: Maybe<Scalars['Boolean']>;\n  port: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type ExternalAccountTestResponse = {\n  __typename?: 'ExternalAccountTestResponse';\n  success: Scalars['Boolean'];\n  error?: Maybe<Scalars['String']>;\n};\n\nexport type FileIntoAction = {\n  __typename?: 'FileIntoAction';\n  folderPath?: Maybe<Scalars['String']>;\n  copy?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type FileIntoActionInput = {\n  folderPath?: Maybe<Scalars['String']>;\n  copy?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type Filter = {\n  __typename?: 'Filter';\n  name: Scalars['String'];\n  active: Scalars['Boolean'];\n  actions?: Maybe<Array<Maybe<FilterAction>>>;\n  conditions?: Maybe<Array<Maybe<FilterCondition>>>;\n};\n\nexport type FilterAction = {\n  __typename?: 'FilterAction';\n  keep?: Maybe<Array<Maybe<BasicAction>>>;\n  discard?: Maybe<Array<Maybe<BasicAction>>>;\n  fileInto?: Maybe<Array<Maybe<FileIntoAction>>>;\n  flag?: Maybe<Array<Maybe<FlagAction>>>;\n  tag?: Maybe<Array<Maybe<TagAction>>>;\n  redirect?: Maybe<Array<Maybe<RedirectAction>>>;\n  reply?: Maybe<Array<Maybe<ReplyAction>>>;\n  notify?: Maybe<Array<Maybe<NotifyAction>>>;\n  stop?: Maybe<Array<Maybe<BasicAction>>>;\n};\n\nexport type FilterActionInput = {\n  keep?: Maybe<Array<Maybe<BasicActionInput>>>;\n  discard?: Maybe<Array<Maybe<BasicActionInput>>>;\n  fileInto?: Maybe<Array<Maybe<FileIntoActionInput>>>;\n  flag?: Maybe<Array<Maybe<FlagActionInput>>>;\n  tag?: Maybe<Array<Maybe<TagActionInput>>>;\n  redirect?: Maybe<Array<Maybe<RedirectActionInput>>>;\n  reply?: Maybe<Array<Maybe<ReplyActionInput>>>;\n  notify?: Maybe<Array<Maybe<NotifyActionInput>>>;\n  stop?: Maybe<Array<Maybe<BasicActionInput>>>;\n};\n\nexport type FilterCondition = {\n  __typename?: 'FilterCondition';\n  allOrAny: FilterMatchCondition;\n  addressBook?: Maybe<Array<Maybe<HeaderCheckCondition>>>;\n  address?: Maybe<Array<Maybe<AddressCondition>>>;\n  attachment?: Maybe<Array<Maybe<BasicCondition>>>;\n  body?: Maybe<Array<Maybe<BodyCondition>>>;\n  bulk?: Maybe<Array<Maybe<BasicCondition>>>;\n  contactRanking?: Maybe<Array<Maybe<HeaderCheckCondition>>>;\n  conversation?: Maybe<Array<Maybe<ConversationCondition>>>;\n  date?: Maybe<Array<Maybe<DateCondition>>>;\n  facebook?: Maybe<Array<Maybe<BasicCondition>>>;\n  flag?: Maybe<Array<Maybe<FlagCondition>>>;\n  headerExists?: Maybe<Array<Maybe<HeaderCheckCondition>>>;\n  header?: Maybe<Array<Maybe<HeaderCondition>>>;\n  importance?: Maybe<Array<Maybe<ImportanceCondition>>>;\n  invite?: Maybe<Array<Maybe<InviteCondition>>>;\n  linkedin?: Maybe<Array<Maybe<BasicCondition>>>;\n  list?: Maybe<Array<Maybe<BasicCondition>>>;\n  me?: Maybe<Array<Maybe<HeaderCheckCondition>>>;\n  mimeHeader?: Maybe<Array<Maybe<MimeHeaderCondition>>>;\n  size?: Maybe<Array<Maybe<SizeCondition>>>;\n  twitter?: Maybe<Array<Maybe<BasicCondition>>>;\n  communityRequests?: Maybe<Array<Maybe<BasicCondition>>>;\n  communityContent?: Maybe<Array<Maybe<BasicCondition>>>;\n  communityConnections?: Maybe<Array<Maybe<BasicCondition>>>;\n};\n\nexport type FilterConditionInput = {\n  allOrAny: FilterMatchCondition;\n  addressBook?: Maybe<Array<Maybe<HeaderCheckConditionInput>>>;\n  address?: Maybe<Array<Maybe<AddressConditionInput>>>;\n  attachment?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  body?: Maybe<Array<Maybe<BodyConditionInput>>>;\n  bulk?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  contactRanking?: Maybe<Array<Maybe<HeaderCheckConditionInput>>>;\n  conversation?: Maybe<Array<Maybe<ConversationConditionInput>>>;\n  date?: Maybe<Array<Maybe<DateConditionInput>>>;\n  facebook?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  flag?: Maybe<Array<Maybe<FlagConditionInput>>>;\n  headerExists?: Maybe<Array<Maybe<HeaderCheckConditionInput>>>;\n  header?: Maybe<Array<Maybe<HeaderConditionInput>>>;\n  importance?: Maybe<Array<Maybe<ImportanceConditionInput>>>;\n  invite?: Maybe<Array<Maybe<InviteConditionInput>>>;\n  linkedin?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  list?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  me?: Maybe<Array<Maybe<HeaderCheckConditionInput>>>;\n  mimeHeader?: Maybe<Array<Maybe<MimeHeaderConditionInput>>>;\n  size?: Maybe<Array<Maybe<SizeConditionInput>>>;\n  twitter?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  communityRequests?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  communityContent?: Maybe<Array<Maybe<BasicConditionInput>>>;\n  communityConnections?: Maybe<Array<Maybe<BasicConditionInput>>>;\n};\n\nexport type FilterInput = {\n  name: Scalars['String'];\n  active: Scalars['Boolean'];\n  actions?: Maybe<Array<Maybe<FilterActionInput>>>;\n  conditions?: Maybe<Array<Maybe<FilterConditionInput>>>;\n};\n\nexport enum FilterMatchCondition {\n  Allof = 'allof',\n  Anyof = 'anyof'\n}\n\nexport type FilterRuleInput = {\n  name: Scalars['String'];\n};\n\nexport type FlagAction = {\n  __typename?: 'FlagAction';\n  flagName?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type FlagActionInput = {\n  flagName?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type FlagCondition = {\n  __typename?: 'FlagCondition';\n  flagName: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type FlagConditionInput = {\n  flagName: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Folder = {\n  __typename?: 'Folder';\n  absFolderPath?: Maybe<Scalars['String']>;\n  acl?: Maybe<Acl>;\n  color?: Maybe<Scalars['Int']>;\n  flags?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  uuid?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  oname?: Maybe<Scalars['String']>;\n  nonFolderItemCount?: Maybe<Scalars['Int']>;\n  nonFolderItemCountTotal?: Maybe<Scalars['Float']>;\n  linkedFolders?: Maybe<Array<Maybe<Folder>>>;\n  folders?: Maybe<Array<Maybe<Folder>>>;\n  search?: Maybe<Array<Maybe<Folder>>>;\n  owner?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  view?: Maybe<FolderView>;\n  parentFolderId?: Maybe<Scalars['ID']>;\n  unread?: Maybe<Scalars['Int']>;\n  query?: Maybe<Scalars['String']>;\n  permissions?: Maybe<Scalars['String']>;\n  ownerZimbraId?: Maybe<Scalars['ID']>;\n  sharedItemId?: Maybe<Scalars['ID']>;\n  url?: Maybe<Scalars['String']>;\n  local?: Maybe<Scalars['Boolean']>;\n  droppable?: Maybe<Scalars['Boolean']>;\n  userId?: Maybe<Scalars['ID']>;\n  broken?: Maybe<Scalars['Boolean']>;\n  deletable?: Maybe<Scalars['Boolean']>;\n};\n\n/** Special case of FolderAction for `changeFolderColor` resolver */\nexport type FolderActionChangeColorInput = {\n  id: Scalars['ID'];\n  color: Scalars['Int'];\n};\n\n/** Special case of FolderAction for `checkCalendar` resolver */\nexport type FolderActionCheckCalendarInput = {\n  id: Scalars['ID'];\n  value?: Maybe<Scalars['Boolean']>;\n};\n\nexport type FolderActionInput = {\n  id: Scalars['ID'];\n  op: Scalars['String'];\n  grant?: Maybe<Array<Maybe<GrantInput>>>;\n  name?: Maybe<Scalars['String']>;\n  folderId?: Maybe<Scalars['ID']>;\n  zimbraId?: Maybe<Scalars['ID']>;\n  color?: Maybe<Scalars['Int']>;\n};\n\nexport type FolderQueryInput = {\n  uuid?: Maybe<Scalars['ID']>;\n  id?: Maybe<Scalars['ID']>;\n  view?: Maybe<FolderView>;\n};\n\nexport enum FolderView {\n  Search = 'search',\n  Folder = 'folder',\n  Tag = 'tag',\n  Conversation = 'conversation',\n  Message = 'message',\n  Contact = 'contact',\n  Document = 'document',\n  Appointment = 'appointment',\n  Virtual = 'virtual',\n  Remote = 'remote',\n  Wiki = 'wiki',\n  Task = 'task',\n  Chat = 'chat',\n  Note = 'note',\n  Comment = 'comment'\n}\n\nexport type ForwardAppointmentInput = {\n  id: Scalars['ID'];\n  message: ForwardMessageInput;\n  exceptId?: Maybe<ForwardExceptIdInput>;\n};\n\nexport type ForwardAppointmentInviteInput = {\n  id: Scalars['ID'];\n  message: ForwardMessageInput;\n};\n\nexport type ForwardExceptIdInput = {\n  timezone: Scalars['String'];\n  date: Scalars['String'];\n};\n\nexport type ForwardMessageInput = {\n  subject?: Maybe<Scalars['String']>;\n  mimeParts?: Maybe<Array<Maybe<MimePartInput>>>;\n  emailAddresses?: Maybe<Array<Maybe<MailItemEmailAddressInput>>>;\n};\n\nexport type FreeBusy = {\n  __typename?: 'FreeBusy';\n  id: Scalars['String'];\n  tentative?: Maybe<Array<Maybe<FreeBusyInstance>>>;\n  busy?: Maybe<Array<Maybe<FreeBusyInstance>>>;\n  unavailable?: Maybe<Array<Maybe<FreeBusyInstance>>>;\n  nodata?: Maybe<Array<Maybe<FreeBusyInstance>>>;\n  free?: Maybe<Array<Maybe<FreeBusyInstance>>>;\n};\n\nexport type FreeBusyInstance = {\n  __typename?: 'FreeBusyInstance';\n  start?: Maybe<Scalars['Float']>;\n  end?: Maybe<Scalars['Float']>;\n};\n\nexport enum FreeBusyStatus {\n  F = 'F',\n  B = 'B',\n  T = 'T',\n  O = 'O'\n}\n\nexport enum GalSearchType {\n  All = 'all',\n  Account = 'account',\n  Resource = 'resource',\n  Group = 'group'\n}\n\nexport type GetAppointmentResponse = {\n  __typename?: 'GetAppointmentResponse';\n  appointment?: Maybe<Array<Maybe<AppointmentInfo>>>;\n};\n\n/** Include one of these fields to query for a folder */\nexport type GetFolderFolderInput = {\n  uuid?: Maybe<Scalars['ID']>;\n  parentFolderId?: Maybe<Scalars['ID']>;\n  path?: Maybe<Scalars['String']>;\n};\n\nexport type GetRightsInput = {\n  access?: Maybe<Array<Maybe<Right>>>;\n};\n\nexport type GetTrustedDevicesResponse = {\n  __typename?: 'GetTrustedDevicesResponse';\n  nOtherDevices?: Maybe<Scalars['Int']>;\n  thisDeviceTrusted?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Grantee = {\n  id?: Maybe<Scalars['ID']>;\n  type?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/acl.md */\nexport enum GranteeType {\n  Usr = 'usr',\n  Grp = 'grp',\n  Egp = 'egp',\n  Dom = 'dom',\n  All = 'all',\n  Pub = 'pub',\n  Guest = 'guest',\n  Key = 'key',\n  Cos = 'cos'\n}\n\nexport type GrantInput = {\n  address?: Maybe<Scalars['String']>;\n  granteeType: GranteeType;\n  key?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  permissions: Scalars['String'];\n  zimbraId?: Maybe<Scalars['ID']>;\n};\n\nexport type GrantRightsInput = {\n  access?: Maybe<Array<Maybe<AccountAceInfoInput>>>;\n};\n\nexport type HeaderCheckCondition = {\n  __typename?: 'HeaderCheckCondition';\n  header: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type HeaderCheckConditionInput = {\n  header: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type HeaderCondition = {\n  __typename?: 'HeaderCondition';\n  header?: Maybe<Scalars['String']>;\n  stringComparison?: Maybe<Scalars['String']>;\n  valueComparison?: Maybe<Scalars['String']>;\n  countComparison?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type HeaderConditionInput = {\n  header?: Maybe<Scalars['String']>;\n  stringComparison?: Maybe<Scalars['String']>;\n  valueComparison?: Maybe<Scalars['String']>;\n  countComparison?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Hit = {\n  __typename?: 'Hit';\n  id?: Maybe<Scalars['String']>;\n  sortField?: Maybe<Scalars['String']>;\n};\n\nexport type Identities = {\n  __typename?: 'Identities';\n  identity?: Maybe<Array<Maybe<Identity>>>;\n};\n\nexport type Identity = {\n  __typename?: 'Identity';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  _attrs?: Maybe<IdentityAttrs>;\n  defaultSignature?: Maybe<Scalars['ID']>;\n};\n\nexport type IdentityAttrs = {\n  __typename?: 'IdentityAttrs';\n  zimbraPrefIdentityId: Scalars['ID'];\n  zimbraPrefDefaultSignatureId?: Maybe<Scalars['ID']>;\n  zimbraPrefForwardReplySignatureId?: Maybe<Scalars['ID']>;\n  zimbraPrefForwardReplyFormat?: Maybe<Scalars['String']>;\n  zimbraPrefFromAddress?: Maybe<Scalars['String']>;\n  zimbraPrefFromAddressType?: Maybe<Scalars['String']>;\n  zimbraPrefFromDisplay?: Maybe<Scalars['String']>;\n  zimbraPrefIdentityName?: Maybe<Scalars['String']>;\n  zimbraPrefMailSignatureStyle?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToAddress?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToDisplay?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSentMailFolder?: Maybe<Scalars['String']>;\n};\n\nexport type IdentityAttrsInput = {\n  zimbraPrefIdentityId?: Maybe<Scalars['ID']>;\n  zimbraPrefDefaultSignatureId?: Maybe<Scalars['ID']>;\n  zimbraPrefForwardReplySignatureId?: Maybe<Scalars['ID']>;\n  zimbraPrefForwardReplyFormat?: Maybe<Scalars['String']>;\n  zimbraPrefFromAddress?: Maybe<Scalars['String']>;\n  zimbraPrefFromAddressType?: Maybe<Scalars['String']>;\n  zimbraPrefFromDisplay?: Maybe<Scalars['String']>;\n  zimbraPrefIdentityName?: Maybe<Scalars['String']>;\n  zimbraPrefMailSignatureStyle?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToAddress?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToDisplay?: Maybe<Scalars['String']>;\n  zimbraPrefReplyToEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSentMailFolder?: Maybe<Scalars['String']>;\n};\n\nexport enum Importance {\n  High = 'high',\n  Normal = 'normal',\n  Low = 'low'\n}\n\nexport type ImportanceCondition = {\n  __typename?: 'ImportanceCondition';\n  importance: Importance;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ImportanceConditionInput = {\n  importance: Importance;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Instance = {\n  __typename?: 'Instance';\n  start?: Maybe<Scalars['Float']>;\n  dueDate?: Maybe<Scalars['Float']>;\n  tzoDue?: Maybe<Scalars['Int']>;\n  utcRecurrenceId?: Maybe<Scalars['String']>;\n  isException?: Maybe<Scalars['Boolean']>;\n  alarm?: Maybe<Scalars['Boolean']>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  class?: Maybe<CalendarItemClass>;\n  componentNum?: Maybe<Scalars['Int']>;\n  date?: Maybe<Scalars['Float']>;\n  duration?: Maybe<Scalars['Float']>;\n  excerpt?: Maybe<Scalars['String']>;\n  flags?: Maybe<Scalars['String']>;\n  freeBusy?: Maybe<FreeBusyStatus>;\n  freeBusyActual?: Maybe<FreeBusyStatus>;\n  inviteId?: Maybe<Scalars['ID']>;\n  location?: Maybe<Scalars['String']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  organizer?: Maybe<CalOrganizer>;\n  otherAttendees?: Maybe<Scalars['Boolean']>;\n  participationStatus?: Maybe<ParticipationStatus>;\n  revision?: Maybe<Scalars['Float']>;\n  status?: Maybe<InviteCompletionStatus>;\n  isOrganizer?: Maybe<Scalars['Boolean']>;\n  exceptId?: Maybe<Array<Maybe<DtTimeInfo>>>;\n};\n\nexport type InstanceDate = {\n  date?: Maybe<Scalars['String']>;\n};\n\nexport type IntervalRule = {\n  __typename?: 'IntervalRule';\n  intervalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type Invitation = {\n  __typename?: 'Invitation';\n  type: Scalars['String'];\n  sequenceNumber: Scalars['Int'];\n  id: Scalars['Int'];\n  componentNum: Scalars['Int'];\n  recurrenceId?: Maybe<Scalars['String']>;\n  tz?: Maybe<CalTzInfo>;\n  components: Array<Maybe<InviteComponent>>;\n  replies?: Maybe<Array<Maybe<InviteReplies>>>;\n  mimeParts?: Maybe<MimePart>;\n};\n\nexport enum InviteCompletionStatus {\n  Need = 'NEED',\n  Tent = 'TENT',\n  Conf = 'CONF',\n  Canc = 'CANC',\n  Comp = 'COMP',\n  Inpr = 'INPR',\n  Waiting = 'WAITING',\n  Deferred = 'DEFERRED'\n}\n\nexport type InviteComponent = {\n  __typename?: 'InviteComponent';\n  /** duration: DurationInfo # dur - TODO */\n  alarms?: Maybe<Array<Maybe<CalendarItemAlarm>>>;\n  recurrence?: Maybe<Array<Maybe<RecurrenceInfo>>>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  attendees?: Maybe<Array<Maybe<CalendarItemAttendee>>>;\n  calendarItemId?: Maybe<Scalars['ID']>;\n  ciFolder?: Maybe<Scalars['ID']>;\n  class?: Maybe<CalendarItemClass>;\n  completedDateTime?: Maybe<Scalars['String']>;\n  componentNum?: Maybe<Scalars['Int']>;\n  date?: Maybe<Scalars['Float']>;\n  description?: Maybe<Array<Maybe<StringContent>>>;\n  draft?: Maybe<Scalars['Boolean']>;\n  neverSent?: Maybe<Scalars['Boolean']>;\n  end?: Maybe<Array<Maybe<DtTimeInfo>>>;\n  excerpt?: Maybe<Scalars['String']>;\n  freeBusy?: Maybe<FreeBusyStatus>;\n  freeBusyActual?: Maybe<FreeBusyStatus>;\n  htmlDescription?: Maybe<Array<Maybe<StringContent>>>;\n  isException?: Maybe<Scalars['Boolean']>;\n  isOrganizer?: Maybe<Scalars['Boolean']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  noBlob?: Maybe<Scalars['Boolean']>;\n  organizer?: Maybe<CalOrganizer>;\n  percentComplete?: Maybe<Scalars['String']>;\n  priority?: Maybe<Scalars['String']>;\n  utcRecurrenceId?: Maybe<Scalars['String']>;\n  rsvp?: Maybe<Scalars['Boolean']>;\n  sequence?: Maybe<Scalars['Int']>;\n  start?: Maybe<Array<Maybe<DtTimeInfo>>>;\n  status?: Maybe<InviteCompletionStatus>;\n  uid?: Maybe<Scalars['String']>;\n  x_uid?: Maybe<Scalars['String']>;\n  aid?: Maybe<Scalars['String']>;\n  method?: Maybe<Scalars['String']>;\n  exceptId?: Maybe<Array<Maybe<DtTimeInfo>>>;\n};\n\nexport type InviteCondition = {\n  __typename?: 'InviteCondition';\n  methods?: Maybe<Array<Maybe<Scalars['String']>>>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type InviteConditionInput = {\n  methods?: Maybe<Array<Maybe<Scalars['String']>>>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type InviteInfo = {\n  __typename?: 'InviteInfo';\n  type?: Maybe<InviteType>;\n  components?: Maybe<Array<Maybe<InviteComponent>>>;\n  replies?: Maybe<Array<Maybe<InviteReplies>>>;\n};\n\nexport type InviteReplies = {\n  __typename?: 'InviteReplies';\n  reply?: Maybe<Array<Maybe<CalendarItemReply>>>;\n};\n\nexport type InviteReplyInput = {\n  componentNum: Scalars['Int'];\n  id: Scalars['ID'];\n  verb: InviteReplyVerb;\n  updateOrganizer?: Maybe<Scalars['Boolean']>;\n  message?: Maybe<CalendarItemMessageInput>;\n  exceptId?: Maybe<InstanceDate>;\n};\n\nexport type InviteReplyResponse = {\n  __typename?: 'InviteReplyResponse';\n  inviteId?: Maybe<Scalars['ID']>;\n  calendarItemId?: Maybe<Scalars['ID']>;\n};\n\nexport enum InviteReplyType {\n  R = 'r',\n  W = 'w'\n}\n\nexport enum InviteReplyVerb {\n  Accept = 'ACCEPT',\n  Decline = 'DECLINE',\n  Tentative = 'TENTATIVE'\n}\n\nexport enum InviteType {\n  Appt = 'appt',\n  Task = 'task'\n}\n\nexport type License = {\n  __typename?: 'License';\n  status: LicenseStatus;\n  attr?: Maybe<Array<Maybe<LicenseAttrs>>>;\n};\n\nexport type LicenseAttrs = {\n  __typename?: 'LicenseAttrs';\n  name: Scalars['String'];\n  _content: Scalars['Boolean'];\n};\n\nexport enum LicenseStatus {\n  Ok = 'OK',\n  NotInstalled = 'NOT_INSTALLED',\n  NotActivated = 'NOT_ACTIVATED',\n  InFuture = 'IN_FUTURE',\n  Expired = 'EXPIRED',\n  Invalid = 'INVALID',\n  LicenseGracePeriod = 'LICENSE_GRACE_PERIOD',\n  ActivationGracePeriod = 'ACTIVATION_GRACE_PERIOD'\n}\n\nexport type Locale = {\n  __typename?: 'Locale';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  localName?: Maybe<Scalars['String']>;\n};\n\nexport type MailboxMetadata = {\n  __typename?: 'MailboxMetadata';\n  meta?: Maybe<Array<Maybe<MailboxMetadataMeta>>>;\n};\n\nexport type MailboxMetadataAttrs = {\n  __typename?: 'MailboxMetadataAttrs';\n  zimbraPrefCustomFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDateFormat?: Maybe<Scalars['String']>;\n  zimbraPrefSharedFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefFoldersExpanded?: Maybe<Scalars['String']>;\n  zimbraPrefFolderTreeSash?: Maybe<Scalars['Int']>;\n  zimbraPrefGenerateLinkPreviews?: Maybe<Scalars['Boolean']>;\n  zimbraPrefGroupByList?: Maybe<Scalars['String']>;\n  zimbraPrefMessageListDensity?: Maybe<Scalars['String']>;\n  zimbraPrefMultitasking?: Maybe<Scalars['String']>;\n  zimbraPrefReadingPaneSashHorizontal?: Maybe<Scalars['Int']>;\n  zimbraPrefReadingPaneSashVertical?: Maybe<Scalars['Int']>;\n  zimbraPrefSmartFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefTimeFormat?: Maybe<Scalars['String']>;\n  zimbraPrefUndoSendEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefUndoSendTimeout?: Maybe<Scalars['Int']>;\n  archivedFolder?: Maybe<Scalars['String']>;\n  zimbraPrefSMIMEDefaultSetting?: Maybe<Scalars['String']>;\n  zimbraPrefSMIMELastOperation?: Maybe<Scalars['String']>;\n  zimbraPrefContactSourceFolderID?: Maybe<Scalars['String']>;\n};\n\nexport type MailboxMetadataMeta = {\n  __typename?: 'MailboxMetadataMeta';\n  section: Scalars['String'];\n  _attrs: MailboxMetadataAttrs;\n};\n\nexport type MailboxMetadataSectionAttrsInput = {\n  zimbraPrefCustomFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDateFormat?: Maybe<Scalars['String']>;\n  zimbraPrefSharedFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefFoldersExpanded?: Maybe<Scalars['String']>;\n  zimbraPrefFolderTreeSash?: Maybe<Scalars['Int']>;\n  zimbraPrefGenerateLinkPreviews?: Maybe<Scalars['Boolean']>;\n  zimbraPrefGroupByList?: Maybe<Scalars['String']>;\n  zimbraPrefMessageListDensity?: Maybe<Scalars['String']>;\n  zimbraPrefMultitasking?: Maybe<Scalars['String']>;\n  zimbraPrefReadingPaneSashHorizontal?: Maybe<Scalars['Int']>;\n  zimbraPrefReadingPaneSashVertical?: Maybe<Scalars['Int']>;\n  zimbraPrefSmartFolderTreeOpen?: Maybe<Scalars['Boolean']>;\n  zimbraPrefTimeFormat?: Maybe<Scalars['String']>;\n  zimbraPrefUndoSendEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefUndoSendTimeout?: Maybe<Scalars['Int']>;\n  archivedFolder?: Maybe<Scalars['String']>;\n  zimbraPrefSMIMEDefaultSetting?: Maybe<Scalars['String']>;\n  zimbraPrefSMIMELastOperation?: Maybe<Scalars['String']>;\n  zimbraPrefContactSourceFolderID?: Maybe<Scalars['String']>;\n};\n\nexport type MailItem = {\n  id?: Maybe<Scalars['ID']>;\n  size?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['Float']>;\n  folderId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  emailAddresses?: Maybe<Array<Maybe<EmailAddress>>>;\n  excerpt?: Maybe<Scalars['String']>;\n  conversationId?: Maybe<Scalars['ID']>;\n  flags?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  invitations?: Maybe<Array<Maybe<InviteInfo>>>;\n  sortField?: Maybe<Scalars['String']>;\n  share?: Maybe<Array<Maybe<ShareNotification>>>;\n  replyType?: Maybe<Scalars['String']>;\n};\n\nexport type MailItemEmailAddressInput = {\n  address: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  type: AddressType;\n};\n\nexport type MailItemHeaderInput = {\n  n: Scalars['String'];\n};\n\nexport type MaxAppPasswords = {\n  __typename?: 'MaxAppPasswords';\n  _content?: Maybe<Scalars['Int']>;\n};\n\nexport type MessageAttributes = {\n  __typename?: 'MessageAttributes';\n  isEncrypted?: Maybe<Scalars['Boolean']>;\n  isSigned?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MessageInfo = MailItem & {\n  __typename?: 'MessageInfo';\n  id?: Maybe<Scalars['ID']>;\n  size?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['Float']>;\n  folderId?: Maybe<Scalars['ID']>;\n  origId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  emailAddresses?: Maybe<Array<Maybe<EmailAddress>>>;\n  excerpt?: Maybe<Scalars['String']>;\n  conversationId?: Maybe<Scalars['ID']>;\n  flags?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  invitations?: Maybe<Array<Maybe<InviteInfo>>>;\n  sortField?: Maybe<Scalars['String']>;\n  mimeParts?: Maybe<Array<Maybe<MimePart>>>;\n  to?: Maybe<Array<Maybe<EmailAddress>>>;\n  from?: Maybe<Array<Maybe<EmailAddress>>>;\n  cc?: Maybe<Array<Maybe<EmailAddress>>>;\n  bcc?: Maybe<Array<Maybe<EmailAddress>>>;\n  sender?: Maybe<Array<Maybe<EmailAddress>>>;\n  html?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  attachments?: Maybe<Array<Maybe<MimePart>>>;\n  inlineAttachments?: Maybe<Array<Maybe<MimePart>>>;\n  share?: Maybe<Array<Maybe<ShareNotification>>>;\n  replyType?: Maybe<Scalars['String']>;\n  attributes?: Maybe<MessageAttributes>;\n  autoSendTime?: Maybe<Scalars['Float']>;\n  local?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MessagePartForDocument = {\n  messageId: Scalars['ID'];\n  attachmentPart: Scalars['String'];\n};\n\nexport type MimeHeaderCondition = {\n  __typename?: 'MimeHeaderCondition';\n  header?: Maybe<Scalars['String']>;\n  stringComparison?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MimeHeaderConditionInput = {\n  header?: Maybe<Scalars['String']>;\n  stringComparison?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n  caseSensitive?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MimePart = {\n  __typename?: 'MimePart';\n  body?: Maybe<Scalars['Boolean']>;\n  filename?: Maybe<Scalars['String']>;\n  part?: Maybe<Scalars['ID']>;\n  content?: Maybe<Scalars['String']>;\n  contentId?: Maybe<Scalars['String']>;\n  contentType?: Maybe<Scalars['String']>;\n  contentDisposition?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  mimeParts?: Maybe<Array<Maybe<MimePart>>>;\n  url?: Maybe<Scalars['String']>;\n  messageId?: Maybe<Scalars['ID']>;\n};\n\nexport type MimePartInput = {\n  body?: Maybe<Scalars['Boolean']>;\n  filename?: Maybe<Scalars['String']>;\n  part?: Maybe<Scalars['ID']>;\n  content?: Maybe<Scalars['String']>;\n  contentId?: Maybe<Scalars['String']>;\n  contentType?: Maybe<Scalars['String']>;\n  contentDisposition?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  mimeParts?: Maybe<Array<Maybe<MimePartInput>>>;\n  url?: Maybe<Scalars['String']>;\n  messageId?: Maybe<Scalars['ID']>;\n  attachments?: Maybe<Array<Maybe<AttachmentInput>>>;\n};\n\nexport type ModifyAppointmentResponse = {\n  __typename?: 'ModifyAppointmentResponse';\n  appointmentId?: Maybe<Scalars['ID']>;\n  calendarItemId?: Maybe<Scalars['ID']>;\n  inviteId?: Maybe<Scalars['ID']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  revision?: Maybe<Scalars['Float']>;\n};\n\nexport type ModifyContactInput = {\n  id: Scalars['ID'];\n  folderId?: Maybe<Scalars['ID']>;\n  tagNames?: Maybe<Scalars['String']>;\n  attributes: ContactAttrsInput;\n  memberOps?: Maybe<Array<Maybe<ContactListOps>>>;\n};\n\nexport type ModifyIdentityInput = {\n  id: Scalars['ID'];\n  attrs?: Maybe<IdentityAttrsInput>;\n};\n\nexport type ModifyZimletPrefsResponse = {\n  __typename?: 'ModifyZimletPrefsResponse';\n  zimlet?: Maybe<Array<Maybe<ZimletPref>>>;\n};\n\nexport type MsgWithGroupInfo = MailItem & {\n  __typename?: 'MsgWithGroupInfo';\n  id?: Maybe<Scalars['ID']>;\n  i4uid?: Maybe<Scalars['Int']>;\n  cif?: Maybe<Scalars['String']>;\n  origid?: Maybe<Scalars['String']>;\n  entityId?: Maybe<Scalars['ID']>;\n  forAcct?: Maybe<Scalars['String']>;\n  autoSendTime?: Maybe<Scalars['Float']>;\n  size?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['Float']>;\n  folderId?: Maybe<Scalars['ID']>;\n  subject?: Maybe<Scalars['String']>;\n  emailAddresses?: Maybe<Array<Maybe<EmailAddress>>>;\n  excerpt?: Maybe<Scalars['String']>;\n  conversationId?: Maybe<Scalars['ID']>;\n  flags?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  invitations?: Maybe<Array<Maybe<InviteInfo>>>;\n  sortField?: Maybe<Scalars['String']>;\n  share?: Maybe<Array<Maybe<ShareNotification>>>;\n  replyType?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  action?: Maybe<Scalars['Boolean']>;\n  applyFilterRules?: Maybe<Array<Maybe<Scalars['String']>>>;\n  testExternalAccount?: Maybe<ExternalAccountTestResponse>;\n  addExternalAccount?: Maybe<Scalars['ID']>;\n  addMessage?: Maybe<MessageInfo>;\n  cancelTask?: Maybe<Scalars['Boolean']>;\n  saveDocument?: Maybe<Scalars['Boolean']>;\n  changeFolderColor?: Maybe<Scalars['Boolean']>;\n  changePassword?: Maybe<AuthResponse>;\n  modifyProfileImage?: Maybe<ProfileImageChangeResponse>;\n  checkCalendar?: Maybe<Scalars['Boolean']>;\n  contactAction?: Maybe<ActionOpResponse>;\n  conversationAction?: Maybe<Scalars['Boolean']>;\n  counterAppointment?: Maybe<Scalars['Boolean']>;\n  createAppointment?: Maybe<Scalars['Boolean']>;\n  createAppointmentException?: Maybe<Scalars['Boolean']>;\n  createAppSpecificPassword?: Maybe<CreateAppSpecificPasswordResponse>;\n  createCalendar?: Maybe<Folder>;\n  createContact?: Maybe<Contact>;\n  createContactList?: Maybe<Contact>;\n  modifyContact?: Maybe<Contact>;\n  modifyContactList?: Maybe<Contact>;\n  createFolder?: Maybe<Folder>;\n  createIdentity?: Maybe<Identities>;\n  createMountpoint?: Maybe<Scalars['Boolean']>;\n  createSharedCalendar?: Maybe<Scalars['Boolean']>;\n  createSearchFolder?: Maybe<Folder>;\n  createSignature?: Maybe<SignatureResponse>;\n  createTask?: Maybe<Scalars['Boolean']>;\n  declineCounterAppointment?: Maybe<Scalars['Boolean']>;\n  deleteAppointment?: Maybe<Scalars['Boolean']>;\n  deleteIdentity?: Maybe<Scalars['Boolean']>;\n  deleteExternalAccount?: Maybe<Scalars['Boolean']>;\n  deleteSignature?: Maybe<Scalars['Boolean']>;\n  generateScratchCodes?: Maybe<ScratchCodes>;\n  grantRights?: Maybe<RightsResponse>;\n  folderAction?: Maybe<Scalars['Boolean']>;\n  forwardAppointmentInvite?: Maybe<Scalars['Boolean']>;\n  forwardAppointment?: Maybe<Scalars['Boolean']>;\n  itemAction?: Maybe<Scalars['Boolean']>;\n  importExternalAccount?: Maybe<Scalars['Boolean']>;\n  logout?: Maybe<Scalars['Boolean']>;\n  login?: Maybe<AuthResponse>;\n  enableTwoFactorAuth?: Maybe<EnableTwoFactorAuthResponse>;\n  disableTwoFactorAuth?: Maybe<Scalars['Boolean']>;\n  messageAction?: Maybe<Scalars['Boolean']>;\n  modifyExternalAccount?: Maybe<Scalars['Boolean']>;\n  modifyAppointment?: Maybe<ModifyAppointmentResponse>;\n  modifyIdentity?: Maybe<Scalars['Boolean']>;\n  modifyPrefs?: Maybe<Scalars['Boolean']>;\n  modifyProps?: Maybe<Scalars['Boolean']>;\n  modifyZimletPrefs?: Maybe<ModifyZimletPrefsResponse>;\n  modifyFilterRules?: Maybe<Scalars['Boolean']>;\n  modifySignature?: Maybe<Scalars['Boolean']>;\n  modifySearchFolder?: Maybe<Scalars['Boolean']>;\n  modifyTask?: Maybe<Scalars['Boolean']>;\n  modifyWhiteBlackList?: Maybe<Scalars['Boolean']>;\n  moveTask?: Maybe<Scalars['String']>;\n  prefEnableOutOfOfficeAlertOnLogin?: Maybe<Scalars['Boolean']>;\n  prefEnableOutOfOfficeReply?: Maybe<Scalars['Boolean']>;\n  prefOutOfOfficeFromDate?: Maybe<Scalars['String']>;\n  prefOutOfOfficeReply?: Maybe<Scalars['String']>;\n  prefOutOfOfficeUntilDate?: Maybe<Scalars['String']>;\n  recoverAccount?: Maybe<RecoverAccount>;\n  resetPassword?: Maybe<Scalars['Boolean']>;\n  revokeAppSpecificPassword?: Maybe<Scalars['Boolean']>;\n  revokeOtherTrustedDevices?: Maybe<Scalars['Boolean']>;\n  revokeRights?: Maybe<RightsResponse>;\n  revokeTrustedDevice?: Maybe<Scalars['Boolean']>;\n  saveDraft?: Maybe<SaveDraftResponse>;\n  sendMessage?: Maybe<SendMessageResponse>;\n  sendDeliveryReport?: Maybe<Scalars['Boolean']>;\n  sendInviteReply?: Maybe<InviteReplyResponse>;\n  sendShareNotification?: Maybe<Scalars['Boolean']>;\n  setCustomMetadata?: Maybe<Scalars['Boolean']>;\n  setMailboxMetadata?: Maybe<Scalars['Boolean']>;\n  snoozeCalendarItem?: Maybe<Scalars['Boolean']>;\n  dismissCalendarItem?: Maybe<Scalars['Boolean']>;\n  uploadMessage?: Maybe<Scalars['String']>;\n  setRecoveryAccount?: Maybe<Scalars['Boolean']>;\n  createTag?: Maybe<Tag>;\n  tagAction?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationActionArgs = {\n  type: ActionTypeName;\n  id?: Maybe<Scalars['ID']>;\n  ids?: Maybe<Array<Scalars['ID']>>;\n  op: Scalars['String'];\n  color?: Maybe<Scalars['Int']>;\n  constraints?: Maybe<Scalars['String']>;\n  flags?: Maybe<Scalars['String']>;\n  folderId?: Maybe<Scalars['ID']>;\n  rgb?: Maybe<Scalars['String']>;\n  tagNames?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationApplyFilterRulesArgs = {\n  ids: Scalars['String'];\n  filterRules?: Maybe<Array<Maybe<FilterRuleInput>>>;\n};\n\n\nexport type MutationTestExternalAccountArgs = {\n  externalAccount: ExternalAccountTestInput;\n};\n\n\nexport type MutationAddExternalAccountArgs = {\n  externalAccount: ExternalAccountAddInput;\n};\n\n\nexport type MutationAddMessageArgs = {\n  message: AddMsgInput;\n};\n\n\nexport type MutationCancelTaskArgs = {\n  inviteId: Scalars['ID'];\n};\n\n\nexport type MutationSaveDocumentArgs = {\n  document?: Maybe<SaveDocumentInput>;\n};\n\n\nexport type MutationChangeFolderColorArgs = {\n  id: Scalars['ID'];\n  color: Scalars['Int'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  loginNewPassword: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationModifyProfileImageArgs = {\n  content?: Maybe<Scalars['String']>;\n  contentType?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCheckCalendarArgs = {\n  id: Scalars['ID'];\n  value: Scalars['Boolean'];\n};\n\n\nexport type MutationContactActionArgs = {\n  id?: Maybe<Scalars['ID']>;\n  ids?: Maybe<Array<Scalars['ID']>>;\n  folderId?: Maybe<Scalars['ID']>;\n  op: Scalars['String'];\n  tagNames?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationConversationActionArgs = {\n  ids: Array<Scalars['ID']>;\n  op: Scalars['String'];\n};\n\n\nexport type MutationCounterAppointmentArgs = {\n  counterAppointmentInvite: CounterAppointmentInput;\n};\n\n\nexport type MutationCreateAppointmentArgs = {\n  accountName?: Maybe<Scalars['String']>;\n  appointment: CalendarItemInput;\n};\n\n\nexport type MutationCreateAppointmentExceptionArgs = {\n  accountName?: Maybe<Scalars['String']>;\n  appointment: CalendarItemInput;\n};\n\n\nexport type MutationCreateAppSpecificPasswordArgs = {\n  appName: Scalars['String'];\n};\n\n\nexport type MutationCreateCalendarArgs = {\n  name: Scalars['String'];\n  color: Scalars['Int'];\n  url?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateContactArgs = {\n  contact: CreateContactInput;\n};\n\n\nexport type MutationCreateContactListArgs = {\n  contact: CreateContactInput;\n};\n\n\nexport type MutationModifyContactArgs = {\n  contact: ModifyContactInput;\n};\n\n\nexport type MutationModifyContactListArgs = {\n  contact: ModifyContactInput;\n};\n\n\nexport type MutationCreateFolderArgs = {\n  color?: Maybe<Scalars['Int']>;\n  fetchIfExists?: Maybe<Scalars['Boolean']>;\n  flags?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  parentFolderId?: Maybe<Scalars['ID']>;\n  url?: Maybe<Scalars['String']>;\n  view?: Maybe<FolderView>;\n};\n\n\nexport type MutationCreateIdentityArgs = {\n  name: Scalars['String'];\n  attrs?: Maybe<IdentityAttrsInput>;\n};\n\n\nexport type MutationCreateMountpointArgs = {\n  link: NewMountpointSpec;\n};\n\n\nexport type MutationCreateSharedCalendarArgs = {\n  link: NewMountpointSpec;\n};\n\n\nexport type MutationCreateSearchFolderArgs = {\n  name: Scalars['String'];\n  parentFolderId?: Maybe<Scalars['ID']>;\n  query: Scalars['String'];\n  types?: Maybe<FolderView>;\n};\n\n\nexport type MutationCreateSignatureArgs = {\n  signature: SignatureInput;\n};\n\n\nexport type MutationCreateTaskArgs = {\n  task: CalendarItemInput;\n};\n\n\nexport type MutationDeclineCounterAppointmentArgs = {\n  counterAppointmentInvite: CounterAppointmentInput;\n};\n\n\nexport type MutationDeleteAppointmentArgs = {\n  appointment: DeleteAppointmentInput;\n};\n\n\nexport type MutationDeleteIdentityArgs = {\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationDeleteExternalAccountArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteSignatureArgs = {\n  signature: NameIdInput;\n};\n\n\nexport type MutationGenerateScratchCodesArgs = {\n  username: Scalars['String'];\n};\n\n\nexport type MutationGrantRightsArgs = {\n  input: GrantRightsInput;\n};\n\n\nexport type MutationFolderActionArgs = {\n  action: FolderActionInput;\n};\n\n\nexport type MutationForwardAppointmentInviteArgs = {\n  appointmentInvite: ForwardAppointmentInviteInput;\n};\n\n\nexport type MutationForwardAppointmentArgs = {\n  appointmentInvite: ForwardAppointmentInput;\n};\n\n\nexport type MutationItemActionArgs = {\n  id?: Maybe<Scalars['ID']>;\n  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;\n  folderId?: Maybe<Scalars['ID']>;\n  op: Scalars['String'];\n};\n\n\nexport type MutationImportExternalAccountArgs = {\n  externalAccount: ExternalAccountImportInput;\n};\n\n\nexport type MutationLoginArgs = {\n  username: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  recoveryCode?: Maybe<Scalars['String']>;\n  tokenType?: Maybe<Scalars['String']>;\n  persistAuthTokenCookie?: Maybe<Scalars['Boolean']>;\n  twoFactorCode?: Maybe<Scalars['String']>;\n  deviceTrusted?: Maybe<Scalars['Boolean']>;\n  csrfTokenSecured: Scalars['Boolean'];\n};\n\n\nexport type MutationEnableTwoFactorAuthArgs = {\n  options: EnableTwoFactorAuthInput;\n};\n\n\nexport type MutationMessageActionArgs = {\n  ids: Array<Scalars['ID']>;\n  op: Scalars['String'];\n};\n\n\nexport type MutationModifyExternalAccountArgs = {\n  id: Scalars['ID'];\n  type?: Maybe<AccountType>;\n  attrs: ExternalAccountModifyAttrsInput;\n};\n\n\nexport type MutationModifyAppointmentArgs = {\n  accountName?: Maybe<Scalars['String']>;\n  appointment: CalendarItemInput;\n};\n\n\nexport type MutationModifyIdentityArgs = {\n  id: Scalars['ID'];\n  attrs?: Maybe<IdentityAttrsInput>;\n};\n\n\nexport type MutationModifyPrefsArgs = {\n  prefs: PreferencesInput;\n};\n\n\nexport type MutationModifyPropsArgs = {\n  props?: Maybe<Array<PropertiesInput>>;\n};\n\n\nexport type MutationModifyZimletPrefsArgs = {\n  zimlets?: Maybe<Array<ZimletPreferenceInput>>;\n};\n\n\nexport type MutationModifyFilterRulesArgs = {\n  filters?: Maybe<Array<FilterInput>>;\n};\n\n\nexport type MutationModifySignatureArgs = {\n  signature: SignatureInput;\n};\n\n\nexport type MutationModifySearchFolderArgs = {\n  search: SearchFolderInput;\n};\n\n\nexport type MutationModifyTaskArgs = {\n  task: CalendarItemInput;\n};\n\n\nexport type MutationModifyWhiteBlackListArgs = {\n  whiteBlackList: WhiteBlackListInput;\n};\n\n\nexport type MutationMoveTaskArgs = {\n  inviteId: Scalars['ID'];\n  destFolderId: Scalars['ID'];\n};\n\n\nexport type MutationPrefEnableOutOfOfficeAlertOnLoginArgs = {\n  value: Scalars['Boolean'];\n};\n\n\nexport type MutationPrefEnableOutOfOfficeReplyArgs = {\n  value: Scalars['Boolean'];\n};\n\n\nexport type MutationPrefOutOfOfficeFromDateArgs = {\n  value: Scalars['String'];\n};\n\n\nexport type MutationPrefOutOfOfficeReplyArgs = {\n  value: Scalars['String'];\n};\n\n\nexport type MutationPrefOutOfOfficeUntilDateArgs = {\n  value: Scalars['String'];\n};\n\n\nexport type MutationRecoverAccountArgs = {\n  op: RecoverAccountOp;\n  email: Scalars['String'];\n  channel: SetRecoveryAccountChannel;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n};\n\n\nexport type MutationRevokeAppSpecificPasswordArgs = {\n  appName: Scalars['String'];\n};\n\n\nexport type MutationRevokeRightsArgs = {\n  input: RevokeRightsInput;\n};\n\n\nexport type MutationSaveDraftArgs = {\n  message: SendMessageInput;\n};\n\n\nexport type MutationSendMessageArgs = {\n  message: SendMessageInput;\n};\n\n\nexport type MutationSendDeliveryReportArgs = {\n  messageId: Scalars['ID'];\n};\n\n\nexport type MutationSendInviteReplyArgs = {\n  inviteReply: InviteReplyInput;\n};\n\n\nexport type MutationSendShareNotificationArgs = {\n  shareNotification: ShareNotificationInput;\n};\n\n\nexport type MutationSetCustomMetadataArgs = {\n  customMetaData: CustomMetadataInput;\n};\n\n\nexport type MutationSetMailboxMetadataArgs = {\n  section?: Maybe<Scalars['String']>;\n  attrs: MailboxMetadataSectionAttrsInput;\n};\n\n\nexport type MutationSnoozeCalendarItemArgs = {\n  appointment?: Maybe<Array<Maybe<SnoozeInput>>>;\n  task?: Maybe<SnoozeInput>;\n};\n\n\nexport type MutationDismissCalendarItemArgs = {\n  appointment?: Maybe<Array<Maybe<DismissInput>>>;\n  task?: Maybe<DismissInput>;\n};\n\n\nexport type MutationUploadMessageArgs = {\n  value: Scalars['String'];\n};\n\n\nexport type MutationSetRecoveryAccountArgs = {\n  channel: SetRecoveryAccountChannel;\n  op: SetRecoveryAccountOp;\n  recoveryAccount?: Maybe<Scalars['String']>;\n  recoveryAccountVerificationCode?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCreateTagArgs = {\n  tag?: Maybe<CreateTagInput>;\n};\n\n\nexport type MutationTagActionArgs = {\n  action?: Maybe<FolderActionInput>;\n};\n\nexport type NameId = {\n  __typename?: 'NameId';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type NameIdInput = {\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport enum NeedIsMemberType {\n  All = 'all',\n  DirectOnly = 'directOnly',\n  None = 'none'\n}\n\nexport type NewMountpointSpec = {\n  name: Scalars['String'];\n  owner?: Maybe<Scalars['String']>;\n  view?: Maybe<SearchType>;\n  flags?: Maybe<Scalars['String']>;\n  ownerZimbraId?: Maybe<Scalars['ID']>;\n  sharedItemId?: Maybe<Scalars['ID']>;\n  color?: Maybe<Scalars['Int']>;\n  reminder?: Maybe<Scalars['Boolean']>;\n  parentFolderId?: Maybe<Scalars['ID']>;\n};\n\nexport type NotifyAction = {\n  __typename?: 'NotifyAction';\n  address?: Maybe<Scalars['String']>;\n  subject?: Maybe<Scalars['String']>;\n  maxBodySize?: Maybe<Scalars['Int']>;\n  origHeaders?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  content?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type NotifyActionInput = {\n  address?: Maybe<Scalars['String']>;\n  subject?: Maybe<Scalars['String']>;\n  maxBodySize?: Maybe<Scalars['Int']>;\n  origHeaders?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  content?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type OnlyEmailAddress = {\n  __typename?: 'OnlyEmailAddress';\n  emailAddress?: Maybe<Scalars['String']>;\n};\n\nexport type OtherContactAttribute = {\n  __typename?: 'OtherContactAttribute';\n  key?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type OtherContactAttributeInput = {\n  key?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type Owner = {\n  by?: Maybe<Scalars['String']>;\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport enum ParticipationRole {\n  Req = 'REQ',\n  Opt = 'OPT',\n  Non = 'NON'\n}\n\nexport enum ParticipationStatus {\n  Ne = 'NE',\n  Ac = 'AC',\n  Te = 'TE',\n  De = 'DE',\n  Dg = 'DG',\n  Co = 'CO',\n  In = 'IN',\n  Wa = 'WA',\n  Df = 'DF'\n}\n\nexport enum PasswordRecoveryAddressStatus {\n  Verified = 'verified',\n  Pending = 'pending'\n}\n\nexport enum PrefCalendarInitialView {\n  Day = 'day',\n  List = 'list',\n  Month = 'month',\n  Week = 'week',\n  WorkWeek = 'workWeek',\n  Year = 'year'\n}\n\nexport enum PrefClientType {\n  Advanced = 'advanced',\n  Modern = 'modern',\n  Zimbrax = 'zimbrax',\n  Standard = 'standard'\n}\n\nexport enum PrefDelegatedSendSaveTarget {\n  Owner = 'owner',\n  Sender = 'sender',\n  Both = 'both',\n  None = 'none'\n}\n\nexport type Preferences = {\n  __typename?: 'Preferences';\n  zimbraPrefAutoAddAppointmentsToCalendar?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarAutoAddInvites?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarFirstDayOfWeek?: Maybe<Scalars['Int']>;\n  zimbraPrefCalendarInitialView?: Maybe<PrefCalendarInitialView>;\n  zimbraPrefCalendarReminderEmail?: Maybe<Scalars['String']>;\n  zimbraPrefCalendarWorkingHours?: Maybe<Scalars['String']>;\n  zimbraPrefCalendarApptReminderWarningTime?: Maybe<Scalars['Int']>;\n  zimbraPrefCalendarShowPastDueReminders?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarToasterEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefComposeDirection?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontColor?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontFamily?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontSize?: Maybe<Scalars['String']>;\n  zimbraPrefMailToasterEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefShowAllNewMailNotifications?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDefaultCalendarId?: Maybe<Scalars['ID']>;\n  zimbraPrefDeleteInviteOnReply?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDelegatedSendSaveTarget?: Maybe<PrefDelegatedSendSaveTarget>;\n  zimbraPrefDisplayExternalImages?: Maybe<Scalars['Boolean']>;\n  zimbraPrefGroupMailBy?: Maybe<Scalars['String']>;\n  zimbraPrefMailPollingInterval?: Maybe<Scalars['String']>;\n  zimbraPrefMailRequestReadReceipts?: Maybe<Scalars['Boolean']>;\n  zimbraPrefMailSelectAfterDelete?: Maybe<PrefMailSelectAfterDelete>;\n  zimbraPrefMailSendReadReceipts?: Maybe<PrefMailSendReadReceipts>;\n  zimbraPrefMailTrustedSenderList?: Maybe<Array<Maybe<Scalars['String']>>>;\n  zimbraPrefMarkMsgRead?: Maybe<Scalars['Int']>;\n  zimbraPrefOutOfOfficeFromDate?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeExternalReply?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeExternalReplyEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeReply?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeReplyEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeStatusAlertOnLogin?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeSuppressExternalReply?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeUntilDate?: Maybe<Scalars['String']>;\n  zimbraPrefReadingPaneEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefReadingPaneLocation?: Maybe<ReadingPaneLocation>;\n  zimbraPrefPasswordRecoveryAddress?: Maybe<Scalars['String']>;\n  zimbraPrefPasswordRecoveryAddressStatus?: Maybe<PasswordRecoveryAddressStatus>;\n  zimbraPrefSaveToSent?: Maybe<Scalars['Boolean']>;\n  zimbraPrefShowFragments?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSlackCalendarReminderEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSortOrder?: Maybe<Scalars['String']>;\n  zimbraPrefWebClientOfflineBrowserKey?: Maybe<Scalars['String']>;\n  zimbraPrefTimeZoneId?: Maybe<Scalars['String']>;\n  zimbraPrefLocale?: Maybe<Scalars['String']>;\n  zimbraPrefClientType?: Maybe<PrefClientType>;\n  zimbraPrefAppleIcalDelegationEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarShowDeclinedMeetings?: Maybe<Scalars['Boolean']>;\n  zimbraPrefUseTimeZoneListInCalendar?: Maybe<Scalars['Boolean']>;\n  zimbraPrefMailForwardingAddress?: Maybe<Scalars['String']>;\n  zimbraPrefMailLocalDeliveryDisabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefTagTreeOpen?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PreferencesInput = {\n  zimbraPrefAutoAddAppointmentsToCalendar?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarAutoAddInvites?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDefaultCalendarId?: Maybe<Scalars['ID']>;\n  zimbraPrefCalendarFirstDayOfWeek?: Maybe<Scalars['Int']>;\n  zimbraPrefCalendarInitialView?: Maybe<PrefCalendarInitialView>;\n  zimbraPrefCalendarReminderEmail?: Maybe<Scalars['String']>;\n  zimbraPrefCalendarWorkingHours?: Maybe<Scalars['String']>;\n  zimbraPrefCalendarApptReminderWarningTime?: Maybe<Scalars['Int']>;\n  zimbraPrefCalendarShowPastDueReminders?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarToasterEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefComposeDirection?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontColor?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontFamily?: Maybe<Scalars['String']>;\n  zimbraPrefHtmlEditorDefaultFontSize?: Maybe<Scalars['String']>;\n  zimbraPrefMailToasterEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefShowAllNewMailNotifications?: Maybe<Scalars['Boolean']>;\n  zimbraPrefDelegatedSendSaveTarget?: Maybe<PrefDelegatedSendSaveTarget>;\n  zimbraPrefDisplayExternalImages?: Maybe<Scalars['Boolean']>;\n  zimbraPrefGroupMailBy?: Maybe<Scalars['String']>;\n  zimbraPrefMailPollingInterval?: Maybe<Scalars['String']>;\n  zimbraPrefMailRequestReadReceipts?: Maybe<Scalars['Boolean']>;\n  zimbraPrefMailSelectAfterDelete?: Maybe<PrefMailSelectAfterDelete>;\n  zimbraPrefMailSendReadReceipts?: Maybe<PrefMailSendReadReceipts>;\n  zimbraPrefMailTrustedSenderList?: Maybe<Array<Maybe<Scalars['String']>>>;\n  zimbraPrefMarkMsgRead?: Maybe<Scalars['Int']>;\n  zimbraPrefOutOfOfficeFromDate?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeExternalReply?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeExternalReplyEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeReply?: Maybe<Scalars['String']>;\n  zimbraPrefOutOfOfficeReplyEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeStatusAlertOnLogin?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeSuppressExternalReply?: Maybe<Scalars['Boolean']>;\n  zimbraPrefOutOfOfficeUntilDate?: Maybe<Scalars['String']>;\n  zimbraPrefReadingPaneEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefReadingPaneLocation?: Maybe<ReadingPaneLocation>;\n  zimbraPrefSaveToSent?: Maybe<Scalars['Boolean']>;\n  zimbraPrefShowFragments?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSlackCalendarReminderEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefSortOrder?: Maybe<Scalars['String']>;\n  zimbraPrefWebClientOfflineBrowserKey?: Maybe<Scalars['String']>;\n  zimbraPrefTimeZoneId?: Maybe<Scalars['String']>;\n  zimbraPrefLocale?: Maybe<Scalars['String']>;\n  zimbraPrefClientType?: Maybe<PrefClientType>;\n  zimbraPrefAppleIcalDelegationEnabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefCalendarShowDeclinedMeetings?: Maybe<Scalars['Boolean']>;\n  zimbraPrefUseTimeZoneListInCalendar?: Maybe<Scalars['Boolean']>;\n  zimbraPrefMailForwardingAddress?: Maybe<Scalars['String']>;\n  zimbraPrefMailLocalDeliveryDisabled?: Maybe<Scalars['Boolean']>;\n  zimbraPrefTagTreeOpen?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum PrefMailSelectAfterDelete {\n  Next = 'next',\n  Previous = 'previous',\n  Adaptive = 'adaptive'\n}\n\nexport enum PrefMailSendReadReceipts {\n  Prompt = 'prompt',\n  Always = 'always',\n  Never = 'never'\n}\n\nexport type ProfileImageChangeResponse = {\n  __typename?: 'ProfileImageChangeResponse';\n  itemId?: Maybe<Scalars['ID']>;\n};\n\nexport type Prop = {\n  __typename?: 'Prop';\n  zimlet?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type PropertiesInput = {\n  zimlet: Scalars['String'];\n  name: Scalars['String'];\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type PropList = {\n  __typename?: 'PropList';\n  prop?: Maybe<Array<Maybe<Prop>>>;\n};\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type Query = {\n  __typename?: 'Query';\n  accountInfo?: Maybe<AccountInfo>;\n  autoComplete?: Maybe<AutoCompleteResponse>;\n  autoCompleteGAL?: Maybe<AutoCompleteGalResponse>;\n  clientInfo?: Maybe<ClientInfoType>;\n  downloadMessage?: Maybe<SMimeMessage>;\n  downloadAttachment?: Maybe<Attachment>;\n  discoverRights?: Maybe<DiscoverRights>;\n  freeBusy?: Maybe<Array<Maybe<FreeBusy>>>;\n  getContact?: Maybe<Array<Maybe<Contact>>>;\n  getAppointments?: Maybe<SearchResponse>;\n  getAppointment?: Maybe<GetAppointmentResponse>;\n  getReminders?: Maybe<RemindersResponse>;\n  getTasks?: Maybe<SearchResponse>;\n  getAppSpecificPasswords?: Maybe<AppSpecificPasswordsResponse>;\n  getAvailableLocales?: Maybe<Array<Maybe<Locale>>>;\n  getContactFrequency?: Maybe<ContactFrequencyResponse>;\n  getConversation?: Maybe<Conversation>;\n  getFilterRules?: Maybe<Array<Maybe<Filter>>>;\n  getFolder?: Maybe<Folder>;\n  getCustomMetadata?: Maybe<CustomMetadata>;\n  getMailboxMetadata?: Maybe<MailboxMetadata>;\n  getMessage?: Maybe<MessageInfo>;\n  getMessagesMetadata?: Maybe<Array<Maybe<MessageInfo>>>;\n  getRights?: Maybe<RightsResponse>;\n  getSMimePublicCerts?: Maybe<SMimePublicCertsResponse>;\n  getScratchCodes?: Maybe<ScratchCodes>;\n  getSearchFolder?: Maybe<Folder>;\n  getTrustedDevices?: Maybe<GetTrustedDevicesResponse>;\n  getWhiteBlackList?: Maybe<WhiteBlackList>;\n  getWorkingHours?: Maybe<Array<Maybe<WorkingHours>>>;\n  noop?: Maybe<Scalars['Boolean']>;\n  getPreferences?: Maybe<Preferences>;\n  getDataSources: DataSources;\n  getIdentities?: Maybe<Identities>;\n  getSignatures?: Maybe<Signatures>;\n  recoverAccount?: Maybe<RecoverAccount>;\n  relatedContacts?: Maybe<Array<Maybe<RelatedContact>>>;\n  shareInfo?: Maybe<Array<Maybe<ShareInfo>>>;\n  /**\n   * Perform a search for a variety types using a flexible query interface.\n   * [[SOAP Search API Documentation]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/zimbraMail/Search.html)\n   * [[Query Tips]](https://wiki.zimbra.com/wiki/Zimbra_Web_Client_Search_Tips)\n   */\n  search?: Maybe<SearchResponse>;\n  searchGal?: Maybe<SearchResponse>;\n  taskFolders?: Maybe<Array<Maybe<Folder>>>;\n  getTag?: Maybe<Array<Maybe<Tag>>>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryAutoCompleteArgs = {\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<GalSearchType>;\n  needExp?: Maybe<Scalars['Boolean']>;\n  folders?: Maybe<Scalars['String']>;\n  includeGal?: Maybe<Scalars['Boolean']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryAutoCompleteGalArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  name: Scalars['String'];\n  type?: Maybe<GalSearchType>;\n  needExp?: Maybe<Scalars['Boolean']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryClientInfoArgs = {\n  domain: Scalars['String'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryDownloadMessageArgs = {\n  id: Scalars['ID'];\n  isSecure?: Maybe<Scalars['Boolean']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryDownloadAttachmentArgs = {\n  id: Scalars['ID'];\n  part: Scalars['ID'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryFreeBusyArgs = {\n  names: Array<Scalars['String']>;\n  start?: Maybe<Scalars['Float']>;\n  end?: Maybe<Scalars['Float']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetContactArgs = {\n  id?: Maybe<Scalars['ID']>;\n  ids?: Maybe<Array<Scalars['ID']>>;\n  derefGroupMember?: Maybe<Scalars['Boolean']>;\n  memberOf?: Maybe<Scalars['Boolean']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetAppointmentsArgs = {\n  calExpandInstStart: Scalars['Float'];\n  calExpandInstEnd: Scalars['Float'];\n  query: Scalars['String'];\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  types?: Maybe<SearchType>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetAppointmentArgs = {\n  id: Scalars['ID'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetRemindersArgs = {\n  calExpandInstStart: Scalars['Float'];\n  calExpandInstEnd: Scalars['Float'];\n  query: Scalars['String'];\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  types?: Maybe<SearchType>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetTasksArgs = {\n  query: Scalars['String'];\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  types?: Maybe<SearchType>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetContactFrequencyArgs = {\n  email: Scalars['String'];\n  by: Scalars['String'];\n  offsetInMinutes?: Maybe<Scalars['String']>;\n  spec?: Maybe<Array<ContactFrequencySpec>>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetConversationArgs = {\n  id: Scalars['ID'];\n  header?: Maybe<Array<Maybe<MailItemHeaderInput>>>;\n  html?: Maybe<Scalars['Boolean']>;\n  max?: Maybe<Scalars['Int']>;\n  needExp?: Maybe<Scalars['Boolean']>;\n  fetch?: Maybe<Scalars['String']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetFolderArgs = {\n  visible?: Maybe<Scalars['Boolean']>;\n  needGranteeName?: Maybe<Scalars['Boolean']>;\n  view?: Maybe<FolderView>;\n  depth?: Maybe<Scalars['Int']>;\n  traverseMountpoints?: Maybe<Scalars['Boolean']>;\n  folder?: Maybe<GetFolderFolderInput>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetCustomMetadataArgs = {\n  id: Scalars['ID'];\n  section?: Maybe<Scalars['String']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetMailboxMetadataArgs = {\n  section?: Maybe<Scalars['String']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetMessageArgs = {\n  id: Scalars['ID'];\n  header?: Maybe<Array<Maybe<MailItemHeaderInput>>>;\n  html?: Maybe<Scalars['Boolean']>;\n  max?: Maybe<Scalars['Int']>;\n  needExp?: Maybe<Scalars['Boolean']>;\n  neuter?: Maybe<Scalars['Boolean']>;\n  part?: Maybe<Scalars['ID']>;\n  raw?: Maybe<Scalars['Boolean']>;\n  read?: Maybe<Scalars['Boolean']>;\n  ridZ?: Maybe<Scalars['String']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetMessagesMetadataArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetRightsArgs = {\n  input: GetRightsInput;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetSMimePublicCertsArgs = {\n  contactAddr: Scalars['String'];\n  store: Scalars['String'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetScratchCodesArgs = {\n  username: Scalars['String'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryGetWorkingHoursArgs = {\n  names: Array<Scalars['String']>;\n  start?: Maybe<Scalars['Float']>;\n  end?: Maybe<Scalars['Float']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryRecoverAccountArgs = {\n  op: RecoverAccountOp;\n  email: Scalars['String'];\n  channel: SetRecoveryAccountChannel;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryRelatedContactsArgs = {\n  email: Scalars['String'];\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QueryShareInfoArgs = {\n  internal?: Maybe<Scalars['Boolean']>;\n  includeSelf?: Maybe<Scalars['Boolean']>;\n  grantee?: Maybe<Grantee>;\n  owner?: Maybe<Owner>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QuerySearchArgs = {\n  contact?: Maybe<Scalars['String']>;\n  cursor?: Maybe<Cursor>;\n  fetch?: Maybe<Scalars['String']>;\n  fullConversation?: Maybe<Scalars['Boolean']>;\n  limit?: Maybe<Scalars['Int']>;\n  needExp?: Maybe<Scalars['Boolean']>;\n  memberOf?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  query?: Maybe<Scalars['String']>;\n  recip?: Maybe<Scalars['Int']>;\n  sortBy?: Maybe<SortBy>;\n  types?: Maybe<SearchType>;\n  resultMode?: Maybe<Scalars['String']>;\n};\n\n\n/**\n * Zimbra GraphQL Queries\n * - [[SOAP API Reference]](https://files.zimbra.com/docs/soap_api/8.7.11/api-reference/index.html)\n * - [[SOAP Documentation]](https://github.com/Zimbra/zm-mailbox/blob/develop/store/docs/soap.txt)\n * - [[SOAP XML-to-JSON Documentation]](https://wiki.zimbra.com/wiki/Json_format_to_represent_soap)\n */\nexport type QuerySearchGalArgs = {\n  needIsOwner?: Maybe<Scalars['Boolean']>;\n  needIsMember?: Maybe<NeedIsMemberType>;\n  type?: Maybe<GalSearchType>;\n  name?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  locale?: Maybe<Scalars['String']>;\n  sortBy?: Maybe<Scalars['String']>;\n  needExp?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum ReadingPaneLocation {\n  Off = 'off',\n  Right = 'right',\n  Bottom = 'bottom'\n}\n\nexport type RecoverAccount = {\n  __typename?: 'RecoverAccount';\n  recoveryAccount?: Maybe<Scalars['String']>;\n  recoveryAttemptsLeft?: Maybe<Scalars['Int']>;\n};\n\nexport enum RecoverAccountOp {\n  GetRecoveryAccount = 'getRecoveryAccount',\n  SendRecoveryCode = 'sendRecoveryCode'\n}\n\nexport type RecurrenceInfo = {\n  __typename?: 'RecurrenceInfo';\n  add?: Maybe<Array<Maybe<AddRecurrenceInfo>>>;\n  exclude?: Maybe<Array<Maybe<ExcludeRecurrenceInfo>>>;\n  except?: Maybe<Array<Maybe<ExceptionRuleInfo>>>;\n  cancel?: Maybe<Array<Maybe<CancelRuleInfo>>>;\n  /** dates: [SingleDates] # TODO */\n  rule?: Maybe<Array<Maybe<SimpleRepeatingRule>>>;\n};\n\nexport type RedirectAction = {\n  __typename?: 'RedirectAction';\n  address?: Maybe<Scalars['String']>;\n  copy?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type RedirectActionInput = {\n  address?: Maybe<Scalars['String']>;\n  copy?: Maybe<Scalars['Boolean']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type RelatedContact = {\n  __typename?: 'RelatedContact';\n  email?: Maybe<Scalars['String']>;\n  scope?: Maybe<Scalars['Int']>;\n  p?: Maybe<Scalars['String']>;\n};\n\nexport type ReminderItemHitInfo = {\n  __typename?: 'ReminderItemHitInfo';\n  alarm?: Maybe<Scalars['Boolean']>;\n  allDay?: Maybe<Scalars['Boolean']>;\n  changeDate?: Maybe<Scalars['Float']>;\n  class: CalendarItemClass;\n  componentNum?: Maybe<Scalars['Int']>;\n  date?: Maybe<Scalars['Float']>;\n  timezoneOffset?: Maybe<Scalars['Int']>;\n  duration?: Maybe<Scalars['Float']>;\n  excerpt?: Maybe<Scalars['String']>;\n  flags?: Maybe<Scalars['String']>;\n  folderId: Scalars['ID'];\n  freeBusy?: Maybe<FreeBusyStatus>;\n  freeBusyActual?: Maybe<FreeBusyStatus>;\n  id: Scalars['ID'];\n  alarmData?: Maybe<Array<Maybe<Alarm>>>;\n  instances?: Maybe<Array<Maybe<Instance>>>;\n  invitations?: Maybe<Array<Maybe<Invitation>>>;\n  inviteId: Scalars['ID'];\n  isOrganizer?: Maybe<Scalars['Boolean']>;\n  isRecurring?: Maybe<Scalars['Boolean']>;\n  location?: Maybe<Scalars['String']>;\n  modifiedSequence?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  organizer?: Maybe<CalOrganizer>;\n  otherAttendees?: Maybe<Scalars['Boolean']>;\n  participationStatus?: Maybe<ParticipationStatus>;\n  percentComplete?: Maybe<Scalars['String']>;\n  priority?: Maybe<Scalars['String']>;\n  revision?: Maybe<Scalars['Float']>;\n  utcRecurrenceId?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['Float']>;\n  sortField?: Maybe<Scalars['String']>;\n  status?: Maybe<InviteCompletionStatus>;\n  tagNames?: Maybe<Scalars['String']>;\n  tags?: Maybe<Scalars['String']>;\n  uid?: Maybe<Scalars['String']>;\n  x_uid?: Maybe<Scalars['String']>;\n  aid?: Maybe<Scalars['String']>;\n  draft?: Maybe<Scalars['Boolean']>;\n  neverSent?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RemindersResponse = {\n  __typename?: 'RemindersResponse';\n  tasks?: Maybe<Array<Maybe<ReminderItemHitInfo>>>;\n  appointments?: Maybe<Array<Maybe<ReminderItemHitInfo>>>;\n};\n\nexport type ReplyAction = {\n  __typename?: 'ReplyAction';\n  index?: Maybe<Scalars['Int']>;\n  content?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type ReplyActionInput = {\n  index?: Maybe<Scalars['Int']>;\n  content?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport enum ResetPasswordStatus {\n  Enabled = 'enabled',\n  Disabled = 'disabled',\n  Suspended = 'suspended'\n}\n\nexport type RevokeRightsInput = {\n  access?: Maybe<Array<Maybe<AccountAceInfoInput>>>;\n};\n\nexport type Right = {\n  right: Scalars['String'];\n};\n\nexport type RightsResponse = {\n  __typename?: 'RightsResponse';\n  access?: Maybe<Array<Maybe<AccountAceInfo>>>;\n};\n\nexport type SaveDocumentInput = {\n  id?: Maybe<Scalars['ID']>;\n  folderId?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['Float']>;\n  contentType?: Maybe<Scalars['String']>;\n  upload?: Maybe<UploadDocument>;\n  messageData?: Maybe<Array<Maybe<MessagePartForDocument>>>;\n  descriptionEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SaveDraftResponse = {\n  __typename?: 'SaveDraftResponse';\n  message?: Maybe<Array<Maybe<MessageInfo>>>;\n};\n\nexport type SaveMessageDataInput = {\n  id: Scalars['ID'];\n  content: Scalars['String'];\n  meta: Scalars['String'];\n};\n\nexport type ScratchCode = {\n  __typename?: 'ScratchCode';\n  scratchCode?: Maybe<Array<Maybe<ScratchCodeType>>>;\n};\n\nexport type ScratchCodes = {\n  __typename?: 'ScratchCodes';\n  scratchCodes?: Maybe<ScratchCode>;\n};\n\nexport type ScratchCodeType = {\n  __typename?: 'ScratchCodeType';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SearchFolderInput = {\n  id: Scalars['ID'];\n  query: Scalars['String'];\n  types: FolderView;\n};\n\nexport type SearchResponse = {\n  __typename?: 'SearchResponse';\n  contacts?: Maybe<Array<Maybe<Contact>>>;\n  messages?: Maybe<Array<Maybe<MessageInfo>>>;\n  conversations?: Maybe<Array<Maybe<Conversation>>>;\n  tasks?: Maybe<Array<Maybe<CalendarItemHitInfo>>>;\n  appointments?: Maybe<Array<Maybe<CalendarItemHitInfo>>>;\n  documents?: Maybe<Array<Maybe<Document>>>;\n  more?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  sortBy?: Maybe<Scalars['String']>;\n  paginationSupported?: Maybe<Scalars['Boolean']>;\n  hit?: Maybe<Array<Maybe<Hit>>>;\n};\n\nexport enum SearchType {\n  Conversation = 'conversation',\n  Message = 'message',\n  Contact = 'contact',\n  Appointment = 'appointment',\n  Task = 'task',\n  Wiki = 'wiki',\n  Document = 'document'\n}\n\nexport type Secret = {\n  __typename?: 'Secret';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SendMessageInput = {\n  id?: Maybe<Scalars['ID']>;\n  origId?: Maybe<Scalars['ID']>;\n  folderId?: Maybe<Scalars['ID']>;\n  attach?: Maybe<Array<Maybe<AttachmentInput>>>;\n  attachmentId?: Maybe<Scalars['ID']>;\n  replyType?: Maybe<Scalars['String']>;\n  inReplyTo?: Maybe<Scalars['String']>;\n  flags?: Maybe<Scalars['String']>;\n  autoSendTime?: Maybe<Scalars['Float']>;\n  draftId?: Maybe<Scalars['ID']>;\n  entityId?: Maybe<Scalars['String']>;\n  subject?: Maybe<Scalars['String']>;\n  mimeParts?: Maybe<Array<Maybe<MimePartInput>>>;\n  emailAddresses?: Maybe<Array<Maybe<MailItemEmailAddressInput>>>;\n  attachments?: Maybe<Array<Maybe<AttachmentInput>>>;\n};\n\nexport type SendMessageResponse = {\n  __typename?: 'SendMessageResponse';\n  message?: Maybe<Array<Maybe<MsgWithGroupInfo>>>;\n};\n\nexport type Session = {\n  __typename?: 'Session';\n  id?: Maybe<Scalars['ID']>;\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport enum SetRecoveryAccountChannel {\n  Email = 'email'\n}\n\nexport enum SetRecoveryAccountOp {\n  SendCode = 'sendCode',\n  ValidateCode = 'validateCode',\n  ResendCode = 'resendCode',\n  Reset = 'reset'\n}\n\nexport type ShareInfo = {\n  __typename?: 'ShareInfo';\n  folderId: Scalars['ID'];\n  folderPath?: Maybe<Scalars['String']>;\n  folderUuid?: Maybe<Scalars['String']>;\n  granteeName?: Maybe<Scalars['String']>;\n  granteeDisplayName?: Maybe<Scalars['String']>;\n  granteeId?: Maybe<Scalars['String']>;\n  granteeType?: Maybe<Scalars['String']>;\n  ownerEmail?: Maybe<Scalars['String']>;\n  ownerId?: Maybe<Scalars['String']>;\n  ownerName?: Maybe<Scalars['String']>;\n  rights?: Maybe<Scalars['String']>;\n  view?: Maybe<FolderView>;\n  mid?: Maybe<Scalars['ID']>;\n};\n\nexport enum ShareInputAction {\n  Edit = 'edit',\n  Revoke = 'revoke',\n  Expire = 'expire'\n}\n\nexport type ShareNotificaitonEmailAddressInput = {\n  address: Scalars['String'];\n  type?: Maybe<AddressType>;\n  personalName?: Maybe<Scalars['String']>;\n};\n\nexport type ShareNotification = {\n  __typename?: 'ShareNotification';\n  truncated?: Maybe<Scalars['Boolean']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type ShareNotificationInput = {\n  action?: Maybe<ShareInputAction>;\n  item: ShareNotificationItemInput;\n  address: ShareNotificaitonEmailAddressInput;\n  notes?: Maybe<Scalars['String']>;\n};\n\nexport type ShareNotificationItemInput = {\n  id: Scalars['ID'];\n};\n\nexport type Signature = {\n  __typename?: 'Signature';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  content?: Maybe<Array<Maybe<SignatureContent>>>;\n};\n\nexport type SignatureContent = {\n  __typename?: 'SignatureContent';\n  type?: Maybe<Scalars['String']>;\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SignatureContentInput = {\n  type?: Maybe<Scalars['String']>;\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SignatureInput = {\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  content?: Maybe<SignatureContentInput>;\n  contentId?: Maybe<Scalars['String']>;\n};\n\nexport type SignatureResponse = {\n  __typename?: 'SignatureResponse';\n  signature?: Maybe<Array<Maybe<NameId>>>;\n};\n\nexport type Signatures = {\n  __typename?: 'Signatures';\n  signature?: Maybe<Array<Maybe<Signature>>>;\n};\n\nexport type SimpleRepeatingRule = {\n  __typename?: 'SimpleRepeatingRule';\n  frequency?: Maybe<CalendarItemRecurrenceFrequency>;\n  interval?: Maybe<Array<Maybe<IntervalRule>>>;\n  byday?: Maybe<Array<Maybe<ByDayRule>>>;\n  until?: Maybe<Array<Maybe<CalendarItemRecurrenceEndDate>>>;\n  count?: Maybe<Array<Maybe<CalendarItemRecurrenceEndCount>>>;\n  bymonthday?: Maybe<Array<Maybe<ByMonthDayRule>>>;\n  bymonth?: Maybe<Array<Maybe<ByMonthRule>>>;\n  bysetpos?: Maybe<Array<Maybe<BySetPosRule>>>;\n};\n\nexport type SizeCondition = {\n  __typename?: 'SizeCondition';\n  numberComparison?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type SizeConditionInput = {\n  numberComparison?: Maybe<Scalars['String']>;\n  size?: Maybe<Scalars['String']>;\n  index?: Maybe<Scalars['Int']>;\n  negative?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Skin = {\n  __typename?: 'Skin';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SMimeMessage = {\n  __typename?: 'SMimeMessage';\n  id?: Maybe<Scalars['ID']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type SMimePublicCert = {\n  __typename?: 'SMimePublicCert';\n  store: Scalars['String'];\n  field: Scalars['String'];\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type SMimePublicCerts = {\n  __typename?: 'SMimePublicCerts';\n  email?: Maybe<Scalars['String']>;\n  cert?: Maybe<Array<Maybe<SMimePublicCert>>>;\n};\n\nexport type SMimePublicCertsResponse = {\n  __typename?: 'SMimePublicCertsResponse';\n  certs?: Maybe<Array<Maybe<SMimePublicCerts>>>;\n};\n\nexport type SnoozeInput = {\n  id: Scalars['ID'];\n  until: Scalars['Float'];\n};\n\nexport enum SortBy {\n  None = 'none',\n  DateAsc = 'dateAsc',\n  DateDesc = 'dateDesc',\n  SubjAsc = 'subjAsc',\n  SubjDesc = 'subjDesc',\n  NameAsc = 'nameAsc',\n  NameDesc = 'nameDesc',\n  RcptAsc = 'rcptAsc',\n  RcptDesc = 'rcptDesc',\n  AttachAsc = 'attachAsc',\n  AttachDesc = 'attachDesc',\n  FlagAsc = 'flagAsc',\n  FlagDesc = 'flagDesc',\n  PriorityAsc = 'priorityAsc',\n  PriorityDesc = 'priorityDesc',\n  ReadAsc = 'readAsc',\n  ReadDesc = 'readDesc',\n  SizeAsc = 'sizeAsc',\n  SizeDesc = 'sizeDesc'\n}\n\nexport type StringContent = {\n  __typename?: 'StringContent';\n  _content?: Maybe<Scalars['String']>;\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['Int']>;\n  unread?: Maybe<Scalars['Int']>;\n};\n\nexport type TagAction = {\n  __typename?: 'TagAction';\n  tagName: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type TagActionInput = {\n  tagName: Scalars['String'];\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type Target = {\n  __typename?: 'Target';\n  displayName?: Maybe<Scalars['String']>;\n  email?: Maybe<Array<Maybe<OnlyEmailAddress>>>;\n  type?: Maybe<Scalars['String']>;\n};\n\nexport type Targets = {\n  __typename?: 'Targets';\n  right?: Maybe<Scalars['String']>;\n  target?: Maybe<Array<Maybe<Target>>>;\n};\n\nexport type TrustedDevicesEnabled = {\n  __typename?: 'TrustedDevicesEnabled';\n  _content?: Maybe<Scalars['Boolean']>;\n};\n\nexport type TwoFactorAuthRequired = {\n  __typename?: 'TwoFactorAuthRequired';\n  _content?: Maybe<Scalars['Boolean']>;\n};\n\nexport type TzOnsetInfo = {\n  __typename?: 'TzOnsetInfo';\n  week?: Maybe<Scalars['Int']>;\n  wkday?: Maybe<Scalars['Int']>;\n  mon?: Maybe<Scalars['Int']>;\n  mday?: Maybe<Scalars['Int']>;\n  hour?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n  sec?: Maybe<Scalars['Int']>;\n};\n\nexport type UploadDocument = {\n  id: Scalars['ID'];\n};\n\nexport enum Weekday {\n  Su = 'SU',\n  Mo = 'MO',\n  Tu = 'TU',\n  We = 'WE',\n  Th = 'TH',\n  Fr = 'FR',\n  Sa = 'SA'\n}\n\nexport type WhiteBlackAddress = {\n  __typename?: 'WhiteBlackAddress';\n  _content: Scalars['String'];\n  op?: Maybe<Scalars['String']>;\n};\n\nexport type WhiteBlackAddressOpts = {\n  _content: Scalars['String'];\n  op?: Maybe<Scalars['String']>;\n};\n\nexport type WhiteBlackList = {\n  __typename?: 'WhiteBlackList';\n  whiteList: Array<Maybe<WhiteBlackListArr>>;\n  blackList: Array<Maybe<WhiteBlackListArr>>;\n};\n\nexport type WhiteBlackListArr = {\n  __typename?: 'WhiteBlackListArr';\n  addr?: Maybe<Array<Maybe<WhiteBlackAddress>>>;\n};\n\nexport type WhiteBlackListArrInput = {\n  addr?: Maybe<Array<Maybe<WhiteBlackAddressOpts>>>;\n};\n\nexport type WhiteBlackListInput = {\n  whiteList?: Maybe<WhiteBlackListArrInput>;\n  blackList?: Maybe<WhiteBlackListArrInput>;\n};\n\nexport type WkDay = {\n  __typename?: 'WkDay';\n  day?: Maybe<Weekday>;\n  ordwk?: Maybe<Scalars['Int']>;\n};\n\nexport type WkDayInput = {\n  day: Weekday;\n  ordwk?: Maybe<Scalars['Int']>;\n};\n\nexport type WorkingHours = {\n  __typename?: 'WorkingHours';\n  id: Scalars['ID'];\n  tentative?: Maybe<Array<Maybe<WorkingHoursInstance>>>;\n  busy?: Maybe<Array<Maybe<WorkingHoursInstance>>>;\n  unavailable?: Maybe<Array<Maybe<WorkingHoursInstance>>>;\n  nodata?: Maybe<Array<Maybe<WorkingHoursInstance>>>;\n  free?: Maybe<Array<Maybe<WorkingHoursInstance>>>;\n};\n\nexport type WorkingHoursInstance = {\n  __typename?: 'WorkingHoursInstance';\n  start?: Maybe<Scalars['Float']>;\n  end?: Maybe<Scalars['Float']>;\n};\n\nexport type ZimletPref = {\n  __typename?: 'ZimletPref';\n  name?: Maybe<Scalars['String']>;\n  presence?: Maybe<Scalars['String']>;\n};\n\nexport type ZimletPreferenceInput = {\n  name: Scalars['String'];\n  presence: Scalars['String'];\n};\n\nexport enum ZimletPresence {\n  Mandatory = 'mandatory',\n  Enabled = 'enabled',\n  Disabled = 'disabled'\n}\n","export function coerceBooleanToString<T>(\n\tval: boolean | T\n): string | boolean | T {\n\tif (val === true) {\n\t\treturn 'TRUE';\n\t}\n\tif (val === false) {\n\t\treturn 'FALSE';\n\t}\n\treturn val;\n}\n\nexport function coerceStringToBoolean<T>(\n\tval: string | T\n): boolean | string | T {\n\tif (val === 'true' || val === 'TRUE') {\n\t\treturn true;\n\t}\n\tif (val === 'false' || val === 'FALSE') {\n\t\treturn false;\n\t}\n\treturn val;\n}\n\nexport function coerceBooleanToInt<T>(val: boolean | T): 0 | 1 | T {\n\tif (val === true) {\n\t\treturn 1;\n\t}\n\tif (val === false) {\n\t\treturn 0;\n\t}\n\treturn val;\n}\n","import mapValues from 'lodash/mapValues';\n\nexport function mapValuesDeep(obj: {}, callback: (v: any) => any): {} {\n\tif (typeof obj !== 'object') {\n\t\treturn callback(obj);\n\t} else if (Array.isArray(obj)) {\n\t\treturn obj.map(v => mapValuesDeep(v, callback));\n\t}\n\treturn mapValues(obj, v => mapValuesDeep(v, callback));\n}\n","import forEach from 'lodash/forEach';\n\nexport function setCustomMetaDataBody(data: any) {\n\tconst { attrs, id, section } = data;\n\tconst customMetaAttrs = <Object[]>[];\n\n\tforEach(attrs, ({ key, value }) =>\n\t\tcustomMetaAttrs.push({\n\t\t\t[key]: value\n\t\t})\n\t);\n\treturn {\n\t\tid,\n\t\tmeta: {\n\t\t\tsection,\n\t\t\t_attrs: customMetaAttrs\n\t\t}\n\t};\n}\n\nexport function normalizeCustomMetaDataAttrs(data: any) {\n\tlet attrs: any = [];\n\n\tObject.keys(data._attrs).forEach(\n\t\tkey =>\n\t\t\ttypeof data._attrs[key] === 'string' &&\n\t\t\tattrs.push({ key, value: data._attrs[key] })\n\t);\n\treturn {\n\t\t...data,\n\t\t_attrs: attrs\n\t};\n}\n","enum Mapping {\n\tf = 'from',\n\tt = 'to',\n\tc = 'cc',\n\tb = 'bcc',\n\ts = 'sender'\n}\n\nexport function parseAddress(address: string) {\n\tif (typeof address === 'string') {\n\t\tlet parts = address.match(/(['\"])(.*?)\\1\\s*<(.+)>/);\n\t\tif (parts) {\n\t\t\treturn { address: parts[3], name: parts[2] };\n\t\t}\n\t\treturn { address };\n\t}\n\treturn address;\n}\n\nexport function normalizeEmailAddresses(message: { [key: string]: any }) {\n\tif (!message.emailAddresses) {\n\t\treturn message;\n\t}\n\n\tfor (let i = 0; i < message.emailAddresses.length; i++) {\n\t\tlet sender = message.emailAddresses[i],\n\t\t\ttype: keyof typeof Mapping = sender.type,\n\t\t\tkey = Mapping[type];\n\t\t(message[key] || (message[key] = [])).push(parseAddress(sender));\n\t}\n\n\treturn message;\n}\n","function normalizeCid(cid: string) {\n\treturn cid.replace(/[<>]/g, '');\n}\n\n/** Normalize a Content-Type to include only `type/subtype`. */\nfunction normalizeType(contentType: string) {\n\treturn String(contentType)\n\t\t.replace(/^\\s*(.*?)\\s*;.+$/i, '$1')\n\t\t.toLowerCase();\n}\n\nfunction normalizeDisposition(contentDisposition: string) {\n\treturn normalizeType(contentDisposition);\n}\n\n/** reduce()-like iteration over nested MIME parts */\nfunction reduceMimeParts(\n\tobj: any,\n\titerator: (\n\t\tpart: any,\n\t\ti: number,\n\t\tacc: { [key: string]: any }\n\t) => { [key: string]: any },\n\taccumulator: {}\n) {\n\tlet parts = obj.mimeParts;\n\n\tif (parts && parts.length) {\n\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\taccumulator = iterator(parts[i], i, accumulator);\n\t\t\treduceMimeParts(parts[i], iterator, accumulator);\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\nexport function getAttachmentUrl(\n\tattachment: { [key: string]: any },\n\t{ origin = '', jwtToken }: { jwtToken?: string; origin?: string }\n) {\n\tlet { messageId, mid, part } = attachment;\n\treturn `${origin}/service/home/~/?auth=${\n\t\tjwtToken ? 'jwt' : 'co'\n\t}&id=${encodeURIComponent(messageId || mid)}&part=${encodeURIComponent(\n\t\tpart\n\t)}${jwtToken ? `&zjwt=${jwtToken}` : ''}`;\n}\n\nexport function getContactProfileImageUrl(\n\tattachment: { [key: string]: any },\n\t{ origin = '', jwtToken }: { jwtToken?: string; origin?: string }\n) {\n\tconst imageURL = getAttachmentUrl(attachment, {\n\t\torigin: origin,\n\t\tjwtToken: jwtToken\n\t});\n\treturn imageURL ? `${imageURL}` : '';\n}\n\nexport function getProfileImageUrl(\n\tprofileImageId: string,\n\t{ origin = '', jwtToken }: { jwtToken?: string; origin?: string }\n) {\n\treturn `${origin}/service/home/~/?max_width=100&max_height=100&auth=${\n\t\tjwtToken ? 'jwt' : 'co'\n\t}&id=${encodeURIComponent(profileImageId)}${\n\t\tjwtToken ? `&zjwt=${jwtToken}` : ''\n\t}`;\n}\n\nexport function normalizeMimeParts(\n\tmessage: { [key: string]: any },\n\t{ origin, jwtToken }: { jwtToken?: string; origin?: string }\n) {\n\tconst processAttachment = ({ ...attachment }) => {\n\t\tattachment.messageId = attachment.messageId || message.id;\n\t\tattachment.url = getAttachmentUrl(attachment, { origin, jwtToken });\n\t\tattachment.contentId = attachment.contentId\n\t\t\t? normalizeCid(attachment.contentId)\n\t\t\t: ~normalizeType(attachment.contentType).indexOf('image/') &&\n\t\t\t  attachment.contentDisposition === 'inline'\n\t\t\t? `AUTO-GEN-CID-${attachment.messageId}-${attachment.part}-${attachment.size}`\n\t\t\t: undefined;\n\n\t\treturn attachment;\n\t};\n\n\treduceMimeParts(\n\t\tmessage,\n\t\t(part, _, acc) => {\n\t\t\tlet isBody = false,\n\t\t\t\ttype = normalizeType(part.contentType),\n\t\t\t\tdisposition = normalizeDisposition(part.contentDisposition),\n\t\t\t\tcontent = part.content || ''; //getPartContent(part);\n\n\t\t\t// obey scapi's isBody flag:\n\t\t\tif (isBody) acc.body = content;\n\n\t\t\t// if not explicitly an attachment, discover html/text body:\n\t\t\tif (disposition !== 'attachment') {\n\t\t\t\tlet bodyType =\n\t\t\t\t\ttype === 'text/html' ? 'html' : type === 'text/plain' && 'text';\n\n\t\t\t\tif (\n\t\t\t\t\t~type.indexOf('image/') &&\n\t\t\t\t\tdisposition === 'inline' &&\n\t\t\t\t\t!part.contentId\n\t\t\t\t) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Different email clients work in different ways.\n\t\t\t\t\t * E.g. iOS email client doesn't put `contentId` for image inline attachments when there are other type (normal) of attachments as well in email body.\n\t\t\t\t\t * In such cases, iOS email client doesn't even put `image tag placeholders` for inline image attachments.\n\t\t\t\t\t * So, when parsed, ZimbraX don't understand this, so inline images gets vanished.\n\t\t\t\t\t * To fix this, this code block places placeholders with arbitrary CIDs.\n\t\t\t\t\t */\n\t\t\t\t\tconst attachment = processAttachment(part);\n\n\t\t\t\t\t// Use `text` content, because iOS client always yield `text` part (no `html` part) when multiple attachments are present along with text content.\n\t\t\t\t\t// In cases of forwarded msg from iOS client, there wouldn't be `text` part, instead `html` parts.\n\t\t\t\t\t// Update `text` content so that we stay up-to-date on which CID placeholders were added.\n\t\t\t\t\tacc['text'] = (acc['text'] || acc['html'] || '').concat(\n\t\t\t\t\t\t`<br /><div><img src=\"cid:${attachment.contentId}\" /></div><br />`\n\t\t\t\t\t);\n\n\t\t\t\t\tacc['html'] = acc['text']; // And then update `html` part so that we render `html` in `viewer`.\n\t\t\t\t} else if (\n\t\t\t\t\t//bodyType can be either 'text/html' or 'text/plain' so to handle such inline attachments the below condition is added\n\t\t\t\t\tpart.filename &&\n\t\t\t\t\tbodyType &&\n\t\t\t\t\tdisposition === 'inline'\n\t\t\t\t) {\n\t\t\t\t\t(acc['inlineAttachments'] || (acc['inlineAttachments'] = [])).concat(\n\t\t\t\t\t\tprocessAttachment(part)\n\t\t\t\t\t);\n\t\t\t\t} else if (bodyType && (!acc[bodyType] || disposition !== 'inline')) {\n\t\t\t\t\tif ((bodyType === 'html' || bodyType === 'text') && acc[bodyType]) {\n\t\t\t\t\t\tacc[bodyType] = acc[bodyType].concat(content);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tacc[bodyType] = content;\n\t\t\t\t\t}\n\n\t\t\t\t\tisBody = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// remaining non-body, non-enclosure parts are attachments:\n\t\t\tif (!isBody && type.split('/')[0] !== 'multipart') {\n\t\t\t\tlet mode =\n\t\t\t\t\tdisposition === 'inline' ? 'inlineAttachments' : 'attachments';\n\n\t\t\t\tpart.contentType !== 'application/pkcs7-mime' &&\n\t\t\t\t\tpart.contentType !== 'application/pkcs7-signature' &&\n\t\t\t\t\tpart.contentType !== 'application/x-pkcs7-signature' &&\n\t\t\t\t\t(acc[mode] || (acc[mode] = [])).push(processAttachment(part));\n\n\t\t\t\tmessage.attributes = message.attributes || {};\n\t\t\t\tmessage.attributes.isEncrypted =\n\t\t\t\t\tpart.contentType === 'application/pkcs7-mime';\n\t\t\t\tmessage.attributes.isSigned =\n\t\t\t\t\tpart.contentType === 'application/pkcs7-signature' ||\n\t\t\t\t\tpart.contentType === 'application/x-pkcs7-signature';\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t},\n\t\tmessage\n\t);\n\n\t// Default to null if not exist to unset the key if this is an update.\n\tmessage.autoSendTime = message.autoSendTime || null;\n\n\treturn message;\n}\n","import concat from 'lodash/concat';\nimport differenceBy from 'lodash/differenceBy';\nimport forEach from 'lodash/forEach';\nimport { denormalize } from '../normalize';\nimport { ContactInputRequest } from '../normalize/entities';\n\nconst supportedContactAttributes = [\n\t'firstName',\n\t'middleName',\n\t'lastName',\n\t'fullName',\n\t'maidenName',\n\t'namePrefix',\n\t'nameSuffix',\n\t'email',\n\t'email2',\n\t'workEmail',\n\t'workEmail2',\n\t'homeEmail',\n\t'homeEmail2',\n\t'phone',\n\t'phone2',\n\t'companyPhone',\n\t'companyPhone2',\n\t'otherPhone',\n\t'otherPhone2',\n\t'mobilePhone',\n\t'mobilePhone2',\n\t'homePhone',\n\t'homePhone2',\n\t'workPhone',\n\t'workPhone2',\n\t'pager',\n\t'pager2',\n\t'homeFax',\n\t'homeFax2',\n\t'workFax',\n\t'workFax2',\n\t'imAddress',\n\t'imAddress1',\n\t'imAddress2',\n\t'imAddress3',\n\t'imAddress4',\n\t'imAddress5',\n\t'nickname',\n\t'homeStreet',\n\t'homeCity',\n\t'homeState',\n\t'homePostalCode',\n\t'homeCountry',\n\t'homeURL',\n\t'workStreet',\n\t'workCity',\n\t'workState',\n\t'workPostalCode',\n\t'workCountry',\n\t'workURL',\n\t'jobTitle',\n\t'company',\n\t'department',\n\t'birthday',\n\t'anniversary',\n\t'website',\n\t'notes',\n\t'image',\n\t'userCertificate',\n\t'assistantPhone',\n\t'callbackPhone',\n\t'carPhone',\n\t'otherCity',\n\t'otherCountry',\n\t'otherFax',\n\t'otherPostalCode',\n\t'otherState',\n\t'otherStreet',\n\t'otherURL',\n\t'fileAs',\n\t'type'\n];\nexport function createContactBody(data: any) {\n\tconst { attributes, ...rest } = data;\n\tconst contactAttrs = <Object[]>[];\n\n\tforEach(attributes, (val, key) =>\n\t\tkey !== 'other'\n\t\t\t? contactAttrs.push({\n\t\t\t\t\tname: key,\n\t\t\t\t\t[key === 'image' ? 'aid' : 'content']: val\n\t\t\t  })\n\t\t\t: forEach(val, otherValue =>\n\t\t\t\t\tcontactAttrs.push({\n\t\t\t\t\t\tname: otherValue.key,\n\t\t\t\t\t\t_content: otherValue.value\n\t\t\t\t\t})\n\t\t\t  )\n\t);\n\treturn {\n\t\tcn: denormalize(ContactInputRequest)({\n\t\t\t...rest,\n\t\t\tattributes: contactAttrs\n\t\t})\n\t};\n}\n\nexport function normalizeOtherAttr(data: any) {\n\treturn data.map((contact: any) => {\n\t\tlet other: any = [];\n\n\t\tObject.keys(contact._attrs)\n\t\t\t.filter(key => !supportedContactAttributes.includes(key))\n\t\t\t.forEach(\n\t\t\t\tkey =>\n\t\t\t\t\ttypeof contact._attrs[key] === 'string' &&\n\t\t\t\t\tother.push({ key, value: contact._attrs[key] }) &&\n\t\t\t\t\tdelete contact._attrs[key]\n\t\t\t);\n\t\tconst otherAttributewithCustomKey = other\n\t\t\t.filter((o: any) => o.key.match('custom\\\\d+'))\n\t\t\t.sort(\n\t\t\t\t(a: any, b: any) =>\n\t\t\t\t\tNumber(a.key.match(/(\\d+)/g)[0]) - Number(b.key.match(/(\\d+)/g)[0])\n\t\t\t);\n\t\tconst remainingOtherAttribute = differenceBy(\n\t\t\tother,\n\t\t\totherAttributewithCustomKey,\n\t\t\t'key'\n\t\t).sort((a: any, b: any) => a.key.localeCompare(b.key));\n\t\treturn {\n\t\t\t...contact,\n\t\t\t_attrs: {\n\t\t\t\t...contact._attrs,\n\t\t\t\tother: concat(otherAttributewithCustomKey, remainingOtherAttribute)\n\t\t\t}\n\t\t};\n\t});\n}\n","import {\n\tAccountType,\n\tCursor,\n\tExternalAccountModifyAttrsInput,\n\tFolderView,\n\tGrantee,\n\tOwner,\n\tSearchType,\n\tSortBy,\n\tUploadDocument\n} from '../schema/generated-schema-types';\n\nexport enum GalSearchType {\n\tall = 'all',\n\taccount = 'account',\n\tresource = 'resource',\n\tgroup = 'group'\n}\n\nexport interface AutoCompleteOptions {\n\tfolders?: string;\n\tincludeGal?: boolean;\n\tname: string;\n\tneedExp?: boolean;\n\ttype?: GalSearchType;\n}\n\nexport enum NeedIsMemberType {\n\tall = 'all',\n\tdirectOnly = 'directOnly',\n\tnone = 'none'\n}\nexport interface AutoCompleteGALOptions {\n\tlimit?: number;\n\tname: string;\n\tneedExp?: boolean;\n\ttype?: GalSearchType;\n}\n\nexport interface Notification {\n\tcreated?: any;\n\tdeleted?: any;\n\tmodified?: any;\n\tseq?: number;\n}\n\nexport type NotificationHandler = (notificaton: Notification) => void;\n\nexport type UserAgent = {\n\tname: string;\n\tversion: string;\n};\n\nexport type writeSessionId = (sessionId: string) => void;\n\nexport type readSessionId = () => string;\n\nexport type SessionHandler = {\n\treadSessionId: readSessionId;\n\twriteSessionId: writeSessionId;\n};\n\nexport interface ZimbraClientOptions {\n\tcsrfToken?: string;\n\tjwtToken?: string;\n\tlocalStoreClient?: any;\n\tnotificationHandler?: NotificationHandler;\n\tsessionHandler?: SessionHandler;\n\tsoapPathname?: string;\n\tuserAgent?: UserAgent;\n\tzimbraOrigin?: string;\n}\n\nexport interface FreeBusyOptions {\n\tend: number;\n\tnames: Array<string>;\n\tstart: number;\n}\n\nexport interface WorkingHoursOptions {\n\tend: number;\n\tnames: Array<string>;\n\tstart: number;\n}\n\nexport interface GetContactOptions {\n\tderefGroupMember: boolean;\n\tid: string;\n\tids: Array<string>;\n\tmemberOf: boolean;\n}\n\nexport interface GetContactFrequencyOptions {\n\tby: string;\n\temail: string;\n\toffsetInMinutes: string;\n\tspec: Array<ContactFrequencySpec>;\n}\n\nexport interface ContactFrequencySpec {\n\tinterval: string;\n\trange: string;\n}\nexport interface GetFolderOptions {\n\tdepth?: number;\n\tfolder?: {\n\t\tl?: string;\n\t\tpath?: string;\n\t\tuuid?: string;\n\t};\n\tneedGranteeName?: boolean;\n\ttraverseMountpoints?: boolean;\n\tview?: FolderView;\n\tvisible?: boolean;\n}\n\nexport interface GetCustomMetadataOptions {\n\tid: string;\n\tsection: string;\n}\nexport interface GetMailboxMetadataOptions {\n\tsection: string;\n}\n\nexport interface MailItemHeader {\n\tn: string; // Attribute name\n}\n\nexport interface GetMailItemOptions {\n\theader?: Array<MailItemHeader>;\n\thtml?: boolean;\n\tid: string;\n\tids: [String];\n\tmax?: number;\n\tneedExp?: boolean;\n}\n\nexport interface GetMessageOptions extends GetMailItemOptions {\n\tneuter?: boolean;\n\tpart?: string;\n\traw?: boolean;\n\tread?: boolean;\n\tridZ?: string;\n}\n\nexport interface GetConversationOptions extends GetMailItemOptions {\n\tfetch?: string;\n}\n\nexport interface RelatedContactsOptions {\n\temail: string;\n}\n\nexport interface AppointmentOptions {\n\tid?: string;\n}\n\nexport interface SaveDocumentInput {\n\tct: string;\n\tdescEnabled: Boolean;\n\tid: string;\n\tl: string;\n\tname: string;\n\tupload: UploadDocument;\n\tver: Number;\n}\n\nexport interface SearchOptions {\n\tcalExpandInstEnd?: Number;\n\tcalExpandInstStart?: Number;\n\tcursor?: Cursor;\n\tfetch?: string;\n\tfullConversation?: boolean;\n\tlimit?: number;\n\tneedExp?: boolean;\n\tneedIsMember?: NeedIsMemberType;\n\tneedIsOwner?: boolean;\n\toffset?: number;\n\tquery?: string;\n\trecip?: number;\n\tsortBy?: SortBy;\n\ttype?: GalSearchType;\n\ttypes?: SearchType;\n}\n\nexport interface ShareInfoOptions {\n\tgrantee?: Grantee;\n\tincludeSelf?: Boolean;\n\tinternal?: Boolean;\n\towner?: Owner;\n}\n\nexport interface ChangePasswordOptions {\n\tloginNewPassword: string;\n\tpassword: string;\n\tusername: string;\n}\n\nexport interface ModifyProfileImageOptions {\n\tcontent: string;\n\tcontentType: string;\n}\n\nexport interface LoginOptions {\n\tcsrfTokenSecured: boolean;\n\tdeviceTrusted?: boolean;\n\tpassword: string;\n\tpersistAuthTokenCookie?: boolean;\n\trecoveryCode?: string;\n\ttokenType?: string;\n\ttwoFactorCode?: string;\n\tusername: string;\n}\n\nexport interface ActionOptions {\n\tcolor?: number;\n\tconstraints?: string;\n\tflags?: string;\n\tfolderId?: string;\n\tid?: string;\n\tids?: Array<string>;\n\tname?: string;\n\top: string;\n\trgb?: string;\n\ttagNames?: string;\n}\n\nexport enum ActionType {\n\tcontact = 'ContactAction',\n\tconversation = 'ConvAction',\n\tdistributionList = 'DistributionList',\n\tfolder = 'FolderAction',\n\titem = 'ItemAction',\n\tmessage = 'MsgAction',\n\ttag = 'TagAction'\n}\n\nexport enum ActionResultType {\n\tConvAction = 'Conversation',\n\tMsgAction = 'MessageInfo'\n}\n\nexport interface CreateFolderOptions {\n\tcolor?: number;\n\tfetchIfExists?: boolean;\n\tflags?: string;\n\tname: string;\n\tparentFolderId?: string;\n\turl?: string;\n\tview?: string;\n}\n\nexport interface CreateSearchFolderOptions {\n\tname: string;\n\tparentFolderId?: string;\n\tquery: string;\n\tview?: string;\n}\n\nexport interface GetSMimePublicCertsOptions {\n\tcontactAddr: string;\n\tstore: string;\n}\n\nexport enum SetRecoveryAccountOpType {\n\tsend = 'sendCode',\n\tvalidate = 'validateCode',\n\tresend = 'resendCode',\n\treset = 'reset'\n}\n\nexport enum SetRecoveryAccountChannelType {\n\temail = 'email'\n}\n\nexport interface SetRecoveryAccountOptions {\n\tchannel: SetRecoveryAccountChannelType;\n\top: SetRecoveryAccountOpType;\n\trecoveryAccount?: string;\n\trecoveryAccountVerificationCode?: string;\n}\n\nexport enum RecoverAccountOpType {\n\tget = 'getRecoveryAccount',\n\tsend = 'sendRecoveryCode'\n}\n\nexport interface RecoverAccountOptions {\n\tchannel: SetRecoveryAccountChannelType;\n\temail: string;\n\top: RecoverAccountOpType;\n}\n\nexport interface ResetPasswordOptions {\n\tpassword: string;\n}\n\nexport interface ExternalAccountModifyInput {\n\tattrs: ExternalAccountModifyAttrsInput;\n\tid: string;\n\ttype?: AccountType;\n}\n\nexport interface ExternalAccountDeleteInput {\n\tid: string;\n}\n\nexport interface FilterRule {\n\tname: string;\n}\n\nexport interface ApplyFilterRulesOptions {\n\tfilterRules: Array<FilterRule>;\n\tids: string;\n}\n","import DataLoader from 'dataloader';\nimport castArray from 'lodash/castArray';\nimport get from 'lodash/get';\nimport isError from 'lodash/isError';\nimport mapValues from 'lodash/mapValues';\nimport emitter from 'mitt';\nimport { denormalize, normalize } from '../normalize';\nimport {\n\tAccountRights,\n\tActionOptions as ActionOptionsEntity,\n\tAddMsgInfo,\n\tAutoComplete as AutoCompleteEntity,\n\tAutoCompleteGALResponse,\n\tAutoCompleteResponse as AutoCompleteResponseEntity,\n\tCalendarItemCreateModifyRequest,\n\tCalendarItemDeleteRequest,\n\tCalendarItemHitInfo,\n\tClientInfoResponse,\n\tContact,\n\tConversation,\n\tCounterAppointmentInfo,\n\tCreateAppSpecificPasswordResponse,\n\tCreateMountpointRequest,\n\tCreateSignatureRequest,\n\tDiscoverRightsResponse,\n\tFilter,\n\tFolder,\n\tForwardAppointmentInfo,\n\tForwardAppointmentInviteInfo,\n\tFreeBusy,\n\tFreeBusyInstance,\n\tGetAppointmentResponse,\n\tGetFolderRequest as GetFolderRequestEntity,\n\tGetRightsRequest,\n\tInviteReply,\n\tMessageInfo,\n\tSaveDocuments,\n\tSearchResponse,\n\tSendMessageInfo,\n\tShareNotification,\n\tTag\n} from '../normalize/entities';\nimport {\n\tbatchJsonRequest,\n\tDEFAULT_HOSTNAME,\n\tDEFAULT_SOAP_PATHNAME,\n\tjsonRequest\n} from '../request';\nimport {\n\tJsonRequestOptions,\n\tNamespace,\n\tRequestBody,\n\tRequestOptions\n} from '../request/types';\nimport {\n\tAddMsgInput,\n\tCalendarItemInput,\n\tClientInfoInput,\n\tCounterAppointmentInput,\n\tCreateContactInput,\n\tCreateIdentityInput,\n\tCreateMountpointInput,\n\tCreateTagInput,\n\tDeleteAppointmentInput,\n\tDeleteIdentityInput,\n\tEnableTwoFactorAuthInput,\n\tExternalAccountAddInput,\n\tExternalAccountImportInput,\n\tExternalAccountTestInput,\n\tFilterInput,\n\tFolderActionChangeColorInput,\n\tFolderActionCheckCalendarInput,\n\tFolderView,\n\tForwardAppointmentInput,\n\tForwardAppointmentInviteInput,\n\tGetRightsInput,\n\tGrantRightsInput,\n\tInviteReplyInput,\n\tModifyContactInput,\n\tModifyIdentityInput,\n\tPreferencesInput,\n\tRevokeRightsInput,\n\tSearchFolderInput,\n\tSendMessageInput,\n\tShareNotificationInput,\n\tSignatureInput,\n\tWhiteBlackListInput,\n\tZimletPreferenceInput\n} from '../schema/generated-schema-types';\nimport {\n\tcoerceBooleanToInt,\n\tcoerceBooleanToString,\n\tcoerceStringToBoolean\n} from '../utils/coerce-boolean';\nimport { mapValuesDeep } from '../utils/map-values-deep';\nimport {\n\tnormalizeCustomMetaDataAttrs,\n\tsetCustomMetaDataBody\n} from '../utils/normalize-attrs-custommetadata';\nimport { normalizeEmailAddresses } from '../utils/normalize-email-addresses';\nimport {\n\tgetAttachmentUrl,\n\tgetContactProfileImageUrl,\n\tgetProfileImageUrl,\n\tnormalizeMimeParts\n} from '../utils/normalize-mime-parts';\nimport {\n\tcreateContactBody,\n\tnormalizeOtherAttr\n} from '../utils/normalize-otherAttribute-contact';\nimport {\n\tActionOptions,\n\tActionType,\n\tApplyFilterRulesOptions,\n\tAppointmentOptions,\n\tAutoCompleteGALOptions,\n\tAutoCompleteOptions,\n\tChangePasswordOptions,\n\tCreateFolderOptions,\n\tCreateSearchFolderOptions,\n\tExternalAccountDeleteInput,\n\tExternalAccountModifyInput,\n\tFreeBusyOptions,\n\tGetContactFrequencyOptions,\n\tGetContactOptions,\n\tGetConversationOptions,\n\tGetCustomMetadataOptions,\n\tGetFolderOptions,\n\tGetMailboxMetadataOptions,\n\tGetMessageOptions,\n\tGetSMimePublicCertsOptions,\n\tLoginOptions,\n\tModifyProfileImageOptions,\n\tRecoverAccountOptions,\n\tRelatedContactsOptions,\n\tResetPasswordOptions,\n\tSaveDocumentInput,\n\tSearchOptions,\n\tSessionHandler,\n\tSetRecoveryAccountOptions,\n\tShareInfoOptions,\n\tWorkingHoursOptions,\n\tZimbraClientOptions\n} from './types';\n\nconst DEBUG = false;\n\nfunction normalizeMessage(\n\tmessage: { [key: string]: any },\n\t{ origin, jwtToken }: { jwtToken?: string; origin?: string }\n) {\n\tconst normalizedMessage = normalize(MessageInfo)(message);\n\tnormalizedMessage.attributes =\n\t\tnormalizedMessage.attributes &&\n\t\tmapValuesDeep(normalizedMessage.attributes, coerceStringToBoolean);\n\n\treturn normalizeEmailAddresses(\n\t\tnormalizeMimeParts(normalizedMessage, { origin, jwtToken })\n\t);\n}\n\n/**\n * This function is required because the API returns Subfolder data for shared folder\n * with Actual folder path (not mounted folder path). This could lead to 404 \"NO SUCH FOLDER EXISTS ERROR\".\n */\nfunction updateAbsoluteFolderPath(\n\toriginalName: any,\n\tparentFolderAbsPath: string,\n\tfolders: any\n) {\n\treturn folders.map((folder: any) => {\n\t\t// When the entire mailbox is shared with another user, in that case, the originalName would\n\t\t// have the value as \"USER_ROOT\", for that instance we need to append the value to the absFolderPath\n\t\t// of the current folder and all children\n\t\tif (originalName === 'USER_ROOT') {\n\t\t\tfolder.absFolderPath = `${parentFolderAbsPath}${folder.absFolderPath}`;\n\t\t} else {\n\t\t\tfolder.absFolderPath = folder.absFolderPath.replace(\n\t\t\t\t`/${originalName}`,\n\t\t\t\tparentFolderAbsPath\n\t\t\t);\n\t\t}\n\n\t\tif (folder.folders) {\n\t\t\tfolder.folders = updateAbsoluteFolderPath(\n\t\t\t\toriginalName,\n\t\t\t\tparentFolderAbsPath,\n\t\t\t\tfolder.folders\n\t\t\t);\n\t\t}\n\n\t\treturn folder;\n\t});\n}\n\nexport class ZimbraBatchClient {\n\tpublic notificationsEmitter: any;\n\tpublic notificationsEvents: any = {\n\t\tnotify: 'notify'\n\t};\n\tpublic origin: string;\n\tpublic sessionId: any;\n\tpublic soapPathname: string;\n\tprivate batchDataLoader: DataLoader<RequestOptions, RequestBody>;\n\tprivate csrfToken?: string;\n\tprivate dataLoader: DataLoader<RequestOptions, RequestBody>;\n\tprivate jwtToken?: string;\n\tprivate sessionHandler?: SessionHandler;\n\tprivate userAgent?: {};\n\n\tconstructor(options: ZimbraClientOptions = {}) {\n\t\tthis.sessionHandler = options.sessionHandler;\n\t\tthis.userAgent = options.userAgent;\n\t\tthis.jwtToken = options.jwtToken;\n\t\tthis.csrfToken = options.csrfToken;\n\t\tthis.origin =\n\t\t\toptions.zimbraOrigin !== undefined\n\t\t\t\t? options.zimbraOrigin\n\t\t\t\t: DEFAULT_HOSTNAME;\n\t\tthis.soapPathname = options.soapPathname || DEFAULT_SOAP_PATHNAME;\n\t\tthis.notificationsEmitter = new (emitter as any)();\n\n\t\t// Used for sending batch requests\n\t\tthis.batchDataLoader = new DataLoader(this.batchDataHandler, {\n\t\t\tcache: false\n\t\t});\n\n\t\t// Used for sending individual requests\n\t\tthis.dataLoader = new DataLoader(this.dataHandler, {\n\t\t\tbatch: false,\n\t\t\tcache: false\n\t\t});\n\t}\n\n\tpublic accountInfo = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetInfo',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tsections: 'mbox,attrs,zimlets,props'\n\t\t\t}\n\t\t}).then(res => ({\n\t\t\t...res,\n\t\t\tattrs: {\n\t\t\t\t...mapValuesDeep(res.attrs._attrs, coerceStringToBoolean),\n\t\t\t\tzimbraMailAlias: [].concat(get(res, 'attrs._attrs.zimbraMailAlias', []))\n\t\t\t},\n\t\t\t...(get(res, 'license.attr') && {\n\t\t\t\tlicense: {\n\t\t\t\t\tstatus: res.license.status,\n\t\t\t\t\tattr: mapValuesDeep(res.license.attr, coerceStringToBoolean)\n\t\t\t\t}\n\t\t\t})\n\t\t}));\n\n\tpublic action = (type: ActionType, options: ActionOptions) => {\n\t\tconst { ids, id, ...rest } = options;\n\n\t\treturn this.jsonRequest({\n\t\t\tname: type,\n\t\t\tbody: {\n\t\t\t\taction: {\n\t\t\t\t\tid: id || (ids || []).join(','),\n\t\t\t\t\t...denormalize(ActionOptionsEntity)(rest)\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\t};\n\n\tpublic addExternalAccount = ({\n\t\taccountType,\n\t\t...accountInfo\n\t}: ExternalAccountAddInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateDataSource',\n\t\t\tbody: {\n\t\t\t\t[<string>accountType]: mapValuesDeep(accountInfo, coerceBooleanToString)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => get(res, `${accountType}.0.id`));\n\n\tpublic addMessage = (options: AddMsgInput) => {\n\t\tconst { folderId, content, meta } = get(options, 'message');\n\t\tlet flags, tags, tagNames, date;\n\n\t\ttry {\n\t\t\t({ flags, tags, tagNames, date } = JSON.parse(meta));\n\t\t} catch (err) {}\n\n\t\treturn this.jsonRequest({\n\t\t\tname: 'AddMsg',\n\t\t\tbody: denormalize(AddMsgInfo)({\n\t\t\t\tmessage: {\n\t\t\t\t\tfolderId,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t_content: content\n\t\t\t\t\t},\n\t\t\t\t\tflags,\n\t\t\t\t\ttags,\n\t\t\t\t\ttagNames,\n\t\t\t\t\tdate\n\t\t\t\t}\n\t\t\t}),\n\t\t\tsingleRequest: true\n\t\t}).then(normalize(MessageInfo));\n\t};\n\n\tpublic applyFilterRules = ({ ids, filterRules }: ApplyFilterRulesOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ApplyFilterRules',\n\t\t\tbody: {\n\t\t\t\tfilterRules: {\n\t\t\t\t\tfilterRule: filterRules\n\t\t\t\t},\n\t\t\t\tm: {\n\t\t\t\t\tids\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(res => {\n\t\t\tconst ids = get(res, 'm[0].ids');\n\t\t\treturn ids ? ids.split(',') : [];\n\t\t});\n\n\tpublic autoComplete = (options: AutoCompleteOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'AutoComplete',\n\t\t\tbody: denormalize(AutoCompleteEntity)(options)\n\t\t}).then(normalize(AutoCompleteResponseEntity));\n\n\tpublic autoCompleteGAL = (options: AutoCompleteGALOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'AutoCompleteGal',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: options\n\t\t}).then(res => normalize(AutoCompleteGALResponse)(res));\n\n\tpublic cancelTask = ({ inviteId }: any) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CancelTask',\n\t\t\tbody: {\n\t\t\t\tcomp: '0',\n\t\t\t\tid: inviteId\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic changeFolderColor = ({ id, color }: FolderActionChangeColorInput) =>\n\t\tthis.action(ActionType.folder, {\n\t\t\tid,\n\t\t\top: 'color',\n\t\t\tcolor\n\t\t});\n\n\tpublic changePassword = ({\n\t\tloginNewPassword,\n\t\tpassword,\n\t\tusername\n\t}: ChangePasswordOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ChangePassword',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\taccount: {\n\t\t\t\t\tby: 'name',\n\t\t\t\t\t_content: username\n\t\t\t\t},\n\t\t\t\toldPassword: password,\n\t\t\t\tpassword: loginNewPassword\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic checkCalendar = ({ id, value }: FolderActionCheckCalendarInput) =>\n\t\tthis.action(ActionType.folder, {\n\t\t\tid,\n\t\t\top: value ? 'check' : '!check'\n\t\t});\n\n\tpublic clientInfo = ({ domain }: ClientInfoInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ClientInfo',\n\t\t\tbody: {\n\t\t\t\tdomain: [\n\t\t\t\t\t{\n\t\t\t\t\t\tby: 'name',\n\t\t\t\t\t\t_content: domain\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tsingleRequest: true,\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => normalize(ClientInfoResponse)(res));\n\n\tpublic contactAction = (options: ActionOptions) =>\n\t\tthis.action(ActionType.contact, options);\n\n\tpublic conversationAction = (options: ActionOptions) =>\n\t\tthis.action(ActionType.conversation, options);\n\n\tpublic counterAppointment = (body: CounterAppointmentInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CounterAppointment',\n\t\t\tbody: denormalize(CounterAppointmentInfo)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic createAppointment = (\n\t\taccountName: string,\n\t\tappointment: CalendarItemInput\n\t) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateAppointment',\n\t\t\tbody: {\n\t\t\t\t...denormalize(CalendarItemCreateModifyRequest)(appointment)\n\t\t\t},\n\t\t\taccountName,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic createAppointmentException = (\n\t\taccountName: string,\n\t\tappointment: CalendarItemInput\n\t) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateAppointmentException',\n\t\t\tbody: {\n\t\t\t\t...denormalize(CalendarItemCreateModifyRequest)(appointment)\n\t\t\t},\n\t\t\taccountName,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic createAppSpecificPassword = (appName: string) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateAppSpecificPassword',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tappName: {\n\t\t\t\t\t_content: appName\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(CreateAppSpecificPasswordResponse)(res));\n\n\tpublic createContact = (data: CreateContactInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateContact',\n\t\t\tbody: createContactBody(data),\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(Contact)(normalizeOtherAttr(res.cn)[0]));\n\n\tpublic createFolder = (_options: CreateFolderOptions) => {\n\t\tconst { flags, fetchIfExists, parentFolderId, ...options } = _options;\n\t\treturn this.jsonRequest({\n\t\t\tname: 'CreateFolder',\n\t\t\tbody: {\n\t\t\t\tfolder: {\n\t\t\t\t\t...options,\n\t\t\t\t\tf: flags,\n\t\t\t\t\tfie: fetchIfExists,\n\t\t\t\t\tl: parentFolderId\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(Folder)(res.folder[0]));\n\t};\n\n\tpublic createIdentity = ({ attrs, ...rest }: CreateIdentityInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateIdentity',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tidentity: {\n\t\t\t\t\t...rest,\n\t\t\t\t\t_attrs: mapValues(attrs, coerceBooleanToString)\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => mapValuesDeep(res, coerceStringToBoolean));\n\n\tpublic createMountpoint = (_options: CreateMountpointInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateMountpoint',\n\t\t\tbody: denormalize(CreateMountpointRequest)(_options),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic createSearchFolder = (_options: CreateSearchFolderOptions) => {\n\t\tconst { parentFolderId, ...options } = _options;\n\t\treturn this.jsonRequest({\n\t\t\tname: 'CreateSearchFolder',\n\t\t\tbody: {\n\t\t\t\tsearch: {\n\t\t\t\t\t...options,\n\t\t\t\t\tl: parentFolderId\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(Folder)(res.search[0]));\n\t};\n\n\tpublic createSignature = (options: SignatureInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateSignature',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: denormalize(CreateSignatureRequest)(options),\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic createTag = (tag: CreateTagInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateTag',\n\t\t\tbody: {\n\t\t\t\ttag: {\n\t\t\t\t\t...tag\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(({ tag = [] }) => normalize(Tag)(tag[0]));\n\n\tpublic createTask = (task: CalendarItemInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CreateTask',\n\t\t\tbody: {\n\t\t\t\t...denormalize(CalendarItemCreateModifyRequest)(task)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic declineCounterAppointment = (body: CounterAppointmentInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DeclineCounterAppointment',\n\t\t\tbody: denormalize(CounterAppointmentInfo)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic deleteAppointment = (appointment: DeleteAppointmentInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'CancelAppointment',\n\t\t\tbody: denormalize(CalendarItemDeleteRequest)(appointment),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic deleteExternalAccount = ({ id }: ExternalAccountDeleteInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DeleteDataSource',\n\t\t\tbody: {\n\t\t\t\tdsrc: { id }\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic deleteIdentity = (identity: DeleteIdentityInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DeleteIdentity',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tidentity\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic deleteSignature = (options: SignatureInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DeleteSignature',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: options,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic disableTwoFactorAuth = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DisableTwoFactorAuth',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic discoverRights = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DiscoverRights',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tright: [\n\t\t\t\t\t{\n\t\t\t\t\t\t_content: 'sendAs'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t_content: 'sendOnBehalfOf'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}).then(res => normalize(DiscoverRightsResponse)(res));\n\n\tpublic dismissCalendarItem = (appointment: any, task: any) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'DismissCalendarItemAlarm',\n\t\t\tbody: {\n\t\t\t\tappt: appointment,\n\t\t\t\ttask\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic downloadAttachment = ({ id, part }: any) =>\n\t\tthis.download({ id, part }).then(({ id, part, content }: any) => ({\n\t\t\tid: `${id}_${part}`,\n\t\t\tcontent\n\t\t}));\n\n\tpublic downloadMessage = ({ id, isSecure }: any) =>\n\t\tthis.download({ id, isSecure }).then(({ id, content }: any) => ({\n\t\t\tid,\n\t\t\tcontent\n\t\t}));\n\n\tpublic enableTwoFactorAuth = ({\n\t\tname,\n\t\tpassword,\n\t\tauthToken,\n\t\ttwoFactorCode,\n\t\tcsrfTokenSecured\n\t}: EnableTwoFactorAuthInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'EnableTwoFactorAuth',\n\t\t\tbody: {\n\t\t\t\tname: {\n\t\t\t\t\t_content: name\n\t\t\t\t},\n\t\t\t\t...(password && {\n\t\t\t\t\tpassword: {\n\t\t\t\t\t\t_content: password\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\t...(authToken && {\n\t\t\t\t\tauthToken: {\n\t\t\t\t\t\t_content: authToken\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\t...(twoFactorCode && {\n\t\t\t\t\ttwoFactorCode: {\n\t\t\t\t\t\t_content: twoFactorCode\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tcsrfTokenSecured\n\t\t\t},\n\t\t\tnamespace: Namespace.Account,\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic folderAction = (options: ActionOptions) =>\n\t\tthis.action(ActionType.folder, options);\n\n\tpublic forwardAppointment = (body: ForwardAppointmentInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ForwardAppointment',\n\t\t\tbody: denormalize(ForwardAppointmentInfo)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic forwardAppointmentInvite = (body: ForwardAppointmentInviteInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ForwardAppointmentInvite',\n\t\t\tbody: denormalize(ForwardAppointmentInviteInfo)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic freeBusy = ({ start, end, names }: FreeBusyOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetFreeBusy',\n\t\t\tbody: {\n\t\t\t\ts: start,\n\t\t\t\te: end,\n\t\t\t\tname: names.join(',')\n\t\t\t}\n\t\t}).then(res => normalize(FreeBusy)(res.usr));\n\n\tpublic generateScratchCodes = (username: String) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GenerateScratchCodes',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\taccount: {\n\t\t\t\t\tby: 'name',\n\t\t\t\t\t_content: username\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic getAppointment = (options: AppointmentOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetAppointment',\n\t\t\tbody: options\n\t\t}).then(res => normalize(GetAppointmentResponse)(res));\n\n\tpublic getAppSpecificPasswords = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetAppSpecificPasswords',\n\t\t\tnamespace: Namespace.Account\n\t\t});\n\n\tpublic getAttachmentUrl = (attachment: any) =>\n\t\tgetAttachmentUrl(attachment, {\n\t\t\torigin: this.origin,\n\t\t\tjwtToken: this.jwtToken\n\t\t});\n\n\tpublic getAvailableLocales = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetAvailableLocales',\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => res.locale);\n\n\tpublic getContact = ({ id, ids, ...rest }: GetContactOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetContacts',\n\t\t\tbody: {\n\t\t\t\tcn: {\n\t\t\t\t\tid: id || (ids || []).join(',')\n\t\t\t\t},\n\t\t\t\t...rest\n\t\t\t}\n\t\t}).then(res => res.cn.map((contact: any) => normalize(Contact)(contact)));\n\n\tpublic getContactFrequency = (options: GetContactFrequencyOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetContactFrequency',\n\t\t\tbody: options\n\t\t}).then(res => {\n\t\t\tres.data = res.data.map((item: any) => {\n\t\t\t\titem.by = item.spec[0].range;\n\t\t\t\treturn item;\n\t\t\t});\n\t\t\treturn res;\n\t\t});\n\n\tpublic getContactProfileImageUrl = (attachment: any) =>\n\t\tgetContactProfileImageUrl(attachment, {\n\t\t\torigin: this.origin,\n\t\t\tjwtToken: this.jwtToken\n\t\t});\n\n\tpublic getConversation = (options: GetConversationOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetConv',\n\t\t\tbody: {\n\t\t\t\tc: mapValues(options, coerceBooleanToInt)\n\t\t\t}\n\t\t}).then(res => {\n\t\t\tconst c = normalize(Conversation)(res.c[0]);\n\t\t\tc.messages = c.messages.map(this.normalizeMessage);\n\t\t\treturn c;\n\t\t});\n\n\tpublic getCustomMetadata = ({ id, section }: GetCustomMetadataOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetCustomMetadata',\n\t\t\tbody: {\n\t\t\t\tid,\n\t\t\t\tmeta: {\n\t\t\t\t\tsection\n\t\t\t\t}\n\t\t\t}\n\t\t}).then((res: any) => {\n\t\t\t//ensure _attrs is not undefined in each section to aid graphql reading/writing\n\t\t\tif (res.meta) {\n\t\t\t\tres.meta = res.meta.map((entry: any) => {\n\t\t\t\t\tif (!entry._attrs) {\n\t\t\t\t\t\tentry._attrs = {};\n\t\t\t\t\t}\n\t\t\t\t\tentry = normalizeCustomMetaDataAttrs(entry);\n\t\t\t\t\treturn entry;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn mapValuesDeep(res, coerceStringToBoolean);\n\t\t});\n\n\tpublic getDataSources = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetDataSources'\n\t\t}).then(res => mapValuesDeep(res, coerceStringToBoolean));\n\n\tpublic getFilterRules = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetFilterRules'\n\t\t}).then(res =>\n\t\t\tnormalize(Filter)(get(res, 'filterRules.0.filterRule') || [])\n\t\t);\n\n\tpublic getFolder = (options: GetFolderOptions) => {\n\t\treturn this.jsonRequest({\n\t\t\tname: 'GetFolder',\n\t\t\tbody: denormalize(GetFolderRequestEntity)(options)\n\t\t}).then(res => {\n\t\t\tconst foldersResponse = normalize(Folder)(res);\n\t\t\tconst folders = get(foldersResponse, 'folders.0', {});\n\n\t\t\tif (folders.linkedFolders) {\n\t\t\t\tfolders.linkedFolders = folders.linkedFolders.map((folder: any) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!folder.view ||\n\t\t\t\t\t\tfolder.view === FolderView.Message ||\n\t\t\t\t\t\tfolder.view === FolderView.Contact ||\n\t\t\t\t\t\tfolder.view === FolderView.Document\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tabsFolderPath,\n\t\t\t\t\t\t\toname,\n\t\t\t\t\t\t\tfolders,\n\t\t\t\t\t\t\townerZimbraId,\n\t\t\t\t\t\t\tsharedItemId\n\t\t\t\t\t\t} = folder;\n\n\t\t\t\t\t\t/** changed the id to zimbraId:sharedItemId, which is required while moving contact to shared folder and\n\t\t\t\t\t\t *  server also returns this id in notfications. The original id is stored in userId.\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tif (folder.view === FolderView.Contact) {\n\t\t\t\t\t\t\t(folder.userId = folder.id),\n\t\t\t\t\t\t\t\t(folder.id = `${ownerZimbraId}:${sharedItemId}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (oname && folders) {\n\t\t\t\t\t\t\tfolder.folders = updateAbsoluteFolderPath(\n\t\t\t\t\t\t\t\toname,\n\t\t\t\t\t\t\t\tabsFolderPath,\n\t\t\t\t\t\t\t\tfolders\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn folder;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn foldersResponse;\n\t\t});\n\t};\n\n\tpublic getIdentities = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetIdentities',\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => mapValuesDeep(res, coerceStringToBoolean));\n\n\tpublic getMailboxMetadata = ({ section }: GetMailboxMetadataOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetMailboxMetadata',\n\t\t\tbody: {\n\t\t\t\tmeta: {\n\t\t\t\t\tsection\n\t\t\t\t}\n\t\t\t}\n\t\t}).then((res: any) => {\n\t\t\t//ensure _attrs is not undefined in each section to aid graphql reading/writing\n\t\t\tres.meta = res.meta.map((entry: any) => {\n\t\t\t\tif (!entry._attrs) entry._attrs = {};\n\t\t\t\treturn entry;\n\t\t\t});\n\t\t\treturn mapValuesDeep(res, coerceStringToBoolean);\n\t\t});\n\n\tpublic getMessage = ({\n\t\tid,\n\t\thtml,\n\t\traw,\n\t\theader,\n\t\tread,\n\t\tmax,\n\t\tridZ\n\t}: GetMessageOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetMsg',\n\t\t\tbody: {\n\t\t\t\tm: {\n\t\t\t\t\tid,\n\t\t\t\t\thtml: html !== false && raw !== true ? 1 : 0,\n\t\t\t\t\theader,\n\t\t\t\t\tread: read === true ? 1 : undefined,\n\t\t\t\t\t// expand available expansions\n\t\t\t\t\tneedExp: 1,\n\t\t\t\t\tneuter: 0,\n\t\t\t\t\t// max body length (look for mp.truncated=1)\n\t\t\t\t\tmax: max || 250000,\n\t\t\t\t\traw: raw ? 1 : 0,\n\t\t\t\t\t...(ridZ && { ridZ: ridZ })\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(res => (res && res.m ? this.normalizeMessage(res.m[0]) : null));\n\n\t/**\n\t * Invokes GetMsgMetadataRequest and fetches the metadata of the messages with specified ids\n\t * This api should be used when backend returns all the data necessary to download the\n\t * metadata of the messages that are dragged and dropped to local folders by user.\n\t * @param {GetMessageOptions} {ids: Array<String>} the ids of the messages to be downloaded\n\t *\n\t * @memberof ZimbraBatchClient\n\t */\n\tpublic getMessagesMetadata = ({ ids }: GetMessageOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetMsgMetadata',\n\t\t\tbody: {\n\t\t\t\tm: {\n\t\t\t\t\tids: ids.join(',')\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(res => res.m.map(this.normalizeMessage));\n\n\tpublic getPreferences = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetPrefs',\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => {\n\t\t\tlet prefs: any = mapValuesDeep(res._attrs, coerceStringToBoolean);\n\t\t\tprefs.zimbraPrefMailTrustedSenderList =\n\t\t\t\ttypeof prefs.zimbraPrefMailTrustedSenderList === 'string'\n\t\t\t\t\t? castArray(prefs.zimbraPrefMailTrustedSenderList)\n\t\t\t\t\t: prefs.zimbraPrefMailTrustedSenderList;\n\t\t\treturn prefs;\n\t\t});\n\n\tpublic getProfileImageUrl = (profileImageId: any) =>\n\t\tgetProfileImageUrl(profileImageId, {\n\t\t\torigin: this.origin,\n\t\t\tjwtToken: this.jwtToken\n\t\t});\n\n\tpublic getRights = (options: GetRightsInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetRights',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: denormalize(GetRightsRequest)(options)\n\t\t}).then(normalize(AccountRights));\n\n\tpublic getScratchCodes = (username: String) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetScratchCodes',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\taccount: {\n\t\t\t\t\tby: 'name',\n\t\t\t\t\t_content: username\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\tpublic getSearchFolder = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetSearchFolder'\n\t\t}).then((res: any) =>\n\t\t\tres.search ? { folders: normalize(Folder)(res.search) } : {}\n\t\t);\n\n\tpublic getSignatures = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetSignatures',\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => mapValuesDeep(res, coerceStringToBoolean));\n\n\tpublic getSMimePublicCerts = (options: GetSMimePublicCertsOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetSMIMEPublicCerts',\n\t\t\tbody: {\n\t\t\t\tstore: {\n\t\t\t\t\t_content: options.store\n\t\t\t\t},\n\t\t\t\temail: {\n\t\t\t\t\t_content: options.contactAddr\n\t\t\t\t}\n\t\t\t},\n\t\t\tnamespace: Namespace.Account\n\t\t});\n\n\tpublic getTag = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetTag',\n\t\t\tnamespace: Namespace.Mail\n\t\t}).then(({ tag = [] }) => tag.map(normalize(Tag)));\n\n\tpublic getTasks = (options: SearchOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'Search',\n\t\t\tbody: {\n\t\t\t\t...options\n\t\t\t}\n\t\t}).then(res => {\n\t\t\tif (res.cn) {\n\t\t\t\tres.cn = normalizeOtherAttr(res.cn);\n\t\t\t}\n\n\t\t\tconst normalized = normalize(SearchResponse)(res);\n\n\t\t\treturn {\n\t\t\t\t...normalized,\n\t\t\t\ttasks: normalized.task\n\t\t\t\t\t? normalized.task.map(normalize(CalendarItemHitInfo))\n\t\t\t\t\t: []\n\t\t\t};\n\t\t});\n\n\tpublic getTrustedDevices = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetTrustedDevices',\n\t\t\tnamespace: Namespace.Account\n\t\t});\n\n\tpublic getWhiteBlackList = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetWhiteBlackList',\n\t\t\tnamespace: Namespace.Account\n\t\t});\n\n\tpublic getWorkingHours = ({ start, end, names }: WorkingHoursOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetWorkingHours',\n\t\t\tbody: {\n\t\t\t\tname: names.join(','),\n\t\t\t\t...denormalize(FreeBusyInstance)({ start, end })\n\t\t\t}\n\t\t}).then(res => normalize(FreeBusy)(res.usr));\n\n\tpublic grantRights = (body: GrantRightsInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GrantRights',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: denormalize(AccountRights)(body)\n\t\t}).then(normalize(AccountRights));\n\n\tpublic importExternalAccount = ({\n\t\taccountType,\n\t\tid\n\t}: ExternalAccountImportInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ImportData',\n\t\t\tbody: {\n\t\t\t\t[<string>accountType]: {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(Boolean);\n\n\tpublic itemAction = (options: ActionOptions) =>\n\t\tthis.action(ActionType.item, options);\n\n\tpublic jsonRequest = (options: JsonRequestOptions) =>\n\t\t// If account name is present that means we will not be able to batch requests\n\t\tthis[options.singleRequest ? 'dataLoader' : 'batchDataLoader'].load(\n\t\t\toptions\n\t\t);\n\n\tpublic login = ({\n\t\tusername,\n\t\tpassword,\n\t\trecoveryCode,\n\t\ttokenType,\n\t\tpersistAuthTokenCookie = true,\n\t\ttwoFactorCode,\n\t\tdeviceTrusted,\n\t\tcsrfTokenSecured\n\t}: LoginOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'Auth',\n\t\t\tsingleRequest: true,\n\t\t\tbody: {\n\t\t\t\ttokenType,\n\t\t\t\tcsrfTokenSecured,\n\t\t\t\tpersistAuthTokenCookie,\n\t\t\t\taccount: {\n\t\t\t\t\tby: 'name',\n\t\t\t\t\t_content: username\n\t\t\t\t},\n\t\t\t\t...(password && { password }),\n\t\t\t\t...(recoveryCode && {\n\t\t\t\t\trecoveryCode: {\n\t\t\t\t\t\tverifyAccount: true,\n\t\t\t\t\t\t_content: recoveryCode\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\t...(twoFactorCode && { twoFactorCode }),\n\t\t\t\t...(deviceTrusted && { deviceTrusted })\n\t\t\t},\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(res => mapValuesDeep(res, coerceStringToBoolean));\n\n\tpublic logout = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'EndSession',\n\t\t\tbody: {\n\t\t\t\tlogoff: true\n\t\t\t},\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(Boolean);\n\n\tpublic messageAction = (options: ActionOptions) =>\n\t\tthis.action(ActionType.message, options);\n\n\tpublic modifyAppointment = (\n\t\taccountName: string,\n\t\tappointment: CalendarItemInput\n\t) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyAppointment',\n\t\t\tbody: {\n\t\t\t\t...denormalize(CalendarItemCreateModifyRequest)(appointment)\n\t\t\t},\n\t\t\taccountName,\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(CalendarItemCreateModifyRequest)(res));\n\n\tpublic modifyContact = (data: ModifyContactInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyContact',\n\t\t\tbody: createContactBody(data),\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(Contact)(normalizeOtherAttr(res.cn)[0]));\n\n\tpublic modifyExternalAccount = ({\n\t\tid,\n\t\ttype: accountType,\n\t\tattrs\n\t}: ExternalAccountModifyInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyDataSource',\n\t\t\tbody: {\n\t\t\t\t[<string>accountType]: {\n\t\t\t\t\tid,\n\t\t\t\t\t...mapValuesDeep(attrs, coerceBooleanToString)\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyFilterRules = (filters: Array<FilterInput>) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyFilterRules',\n\t\t\tbody: {\n\t\t\t\tfilterRules: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfilterRule: denormalize(Filter)(filters)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyIdentity = ({ attrs, ...rest }: ModifyIdentityInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyIdentity',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tidentity: {\n\t\t\t\t\t...rest,\n\t\t\t\t\t_attrs: mapValues(attrs, coerceBooleanToString)\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic modifyPrefs = (prefs: PreferencesInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyPrefs',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\t_attrs: mapValuesDeep(prefs, coerceBooleanToString)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyProfileImage = ({\n\t\tcontent,\n\t\tcontentType\n\t}: ModifyProfileImageOptions) => {\n\t\treturn this.jsonRequest({\n\t\t\tname: 'ModifyProfileImage',\n\t\t\tbody: {\n\t\t\t\t_content: content\n\t\t\t},\n\t\t\tsingleRequest: true,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': contentType && contentType\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic modifyProps = (props: any) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyProperties',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tprop: mapValuesDeep(props, coerceBooleanToString)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifySearchFolder = (options: SearchFolderInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifySearchFolder',\n\t\t\tbody: options,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifySignature = (options: SignatureInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifySignature',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: denormalize(CreateSignatureRequest)(options),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyTask = (task: CalendarItemInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyTask',\n\t\t\tbody: {\n\t\t\t\t...denormalize(CalendarItemCreateModifyRequest)(task)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyWhiteBlackList = (whiteBlackList: WhiteBlackListInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyWhiteBlackList',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\t...whiteBlackList\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic modifyZimletPrefs = (zimlet: Array<ZimletPreferenceInput>) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ModifyZimletPrefs',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tzimlet\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t});\n\n\tpublic noop = () => this.jsonRequest({ name: 'NoOp' }).then(Boolean);\n\n\tpublic recoverAccount = ({ channel, email, op }: RecoverAccountOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'RecoverAccount',\n\t\t\tbody: {\n\t\t\t\tchannel,\n\t\t\t\temail,\n\t\t\t\top\n\t\t\t}\n\t\t});\n\n\tpublic relatedContacts = ({ email }: RelatedContactsOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetRelatedContacts',\n\t\t\tbody: {\n\t\t\t\ttargetContact: {\n\t\t\t\t\tcn: email\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(resp => resp.relatedContacts.relatedContact);\n\n\tpublic resetPassword = ({ password }: ResetPasswordOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'ResetPassword',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tpassword\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(() => true);\n\n\tpublic resolve = (path: string) => `${this.origin}${path}`;\n\n\tpublic revokeAppSpecificPassword = (appName: string) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'RevokeAppSpecificPassword',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: {\n\t\t\t\tappName\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic revokeOtherTrustedDevices = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'RevokeOtherTrustedDevices',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic revokeRights = (body: RevokeRightsInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'RevokeRights',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tbody: denormalize(AccountRights)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(normalize(AccountRights));\n\n\tpublic revokeTrustedDevice = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'RevokeTrustedDevice',\n\t\t\tnamespace: Namespace.Account,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic saveDocument = (document: SaveDocumentInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SaveDocument',\n\t\t\tbody: denormalize(SaveDocuments)(document),\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic saveDraft = (options: SendMessageInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SaveDraft',\n\t\t\tbody: denormalize(SendMessageInfo)(options),\n\t\t\tsingleRequest: true\n\t\t}).then(({ m: messages }) => ({\n\t\t\tmessage: messages && messages.map(this.normalizeMessage)\n\t\t}));\n\n\tpublic search = (options: SearchOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'Search',\n\t\t\tbody: {\n\t\t\t\t...options\n\t\t\t}\n\t\t}).then(res => {\n\t\t\tif (res.cn) {\n\t\t\t\tres.cn = normalizeOtherAttr(res.cn);\n\t\t\t}\n\t\t\tconst normalized = normalize(SearchResponse)(res);\n\t\t\tif (normalized.messages) {\n\t\t\t\tnormalized.messages = normalized.messages.map(this.normalizeMessage);\n\t\t\t}\n\t\t\treturn normalized;\n\t\t});\n\n\tpublic searchGal = (options: SearchOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SearchGal',\n\t\t\tbody: options,\n\t\t\tnamespace: Namespace.Account\n\t\t}).then(normalize(SearchResponse));\n\n\tpublic sendDeliveryReport = (messageId: string) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SendDeliveryReport',\n\t\t\tbody: {\n\t\t\t\tmid: messageId\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic sendInviteReply = (requestOptions: InviteReplyInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SendInviteReply',\n\t\t\tbody: {\n\t\t\t\t...denormalize(InviteReply)(requestOptions)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res => normalize(CalendarItemHitInfo)(res));\n\n\tpublic sendMessage = (body: SendMessageInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SendMsg',\n\t\t\tbody: denormalize(SendMessageInfo)(body),\n\t\t\tsingleRequest: true\n\t\t}).then(normalize(SendMessageInfo));\n\n\tpublic sendShareNotification = (body: ShareNotificationInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SendShareNotification',\n\t\t\tbody: {\n\t\t\t\t...denormalize(ShareNotification)(body)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic setCsrfToken = (csrfToken: string) => {\n\t\tthis.csrfToken = csrfToken;\n\t};\n\n\tpublic setCustomMetadata = (variables: any) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SetCustomMetadata',\n\t\t\tbody: setCustomMetaDataBody(variables.customMetaData)\n\t\t}).then(Boolean);\n\n\tpublic setJwtToken = (jwtToken: string) => {\n\t\tthis.jwtToken = jwtToken;\n\t};\n\n\tpublic setRecoveryAccount = (options: SetRecoveryAccountOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SetRecoveryAccount',\n\t\t\tbody: options,\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic setUserAgent = (userAgent: Object) => {\n\t\tthis.userAgent = userAgent;\n\t};\n\n\tpublic shareInfo = (options: ShareInfoOptions) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetShareInfo',\n\t\t\tbody: {\n\t\t\t\t...options,\n\t\t\t\t_jsns: 'urn:zimbraAccount'\n\t\t\t}\n\t\t}).then(res => res.share);\n\n\tpublic snoozeCalendarItem = (appointment: any, task: any) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'SnoozeCalendarItemAlarm',\n\t\t\tbody: {\n\t\t\t\tappt: appointment,\n\t\t\t\ttask\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(Boolean);\n\n\tpublic taskFolders = () =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'GetFolder',\n\t\t\tbody: {\n\t\t\t\tview: FolderView.Task,\n\t\t\t\ttr: true\n\t\t\t}\n\t\t}).then(res => normalize(Folder)(res.folder[0].folder));\n\n\tpublic testExternalAccount = ({\n\t\taccountType,\n\t\t...accountInfo\n\t}: ExternalAccountTestInput) =>\n\t\tthis.jsonRequest({\n\t\t\tname: 'TestDataSource',\n\t\t\tbody: {\n\t\t\t\t[<string>accountType]: mapValuesDeep(accountInfo, coerceBooleanToString)\n\t\t\t},\n\t\t\tsingleRequest: true\n\t\t}).then(res =>\n\t\t\tmapValuesDeep(get(res, `${accountType}.0`), coerceStringToBoolean)\n\t\t);\n\n\tpublic uploadMessage = (message: string): any => {\n\t\tconst contentDisposition = 'attachment';\n\t\tconst filename = 'message.eml';\n\t\tconst contentType = 'message/rfc822';\n\n\t\treturn fetch(`${this.origin}/service/upload?fmt=raw`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: message,\n\t\t\theaders: {\n\t\t\t\t'Content-Disposition': `${contentDisposition}; filename=\"${filename}\"`,\n\t\t\t\t'Content-Type': contentType,\n\t\t\t\t...(this.csrfToken && {\n\t\t\t\t\t'X-Zimbra-Csrf-Token': this.csrfToken\n\t\t\t\t})\n\t\t\t},\n\t\t\tcredentials: 'include'\n\t\t}).then(response => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.text().then(result => {\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// To parser server response like => 200,'null','d93a252a-603e-4675-9e39-95cebe5a9332:b39a4b7c-9232-4228-9269-aa375bc1df67'\n\t\t\t\t\tconst [, status = '', err = undefined, aid = ''] =\n\t\t\t\t\t\tresult.match(/^([^,]+),([^,]+),'(.*)'/) || [];\n\n\t\t\t\t\tif (err && err !== `'null'`) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (+status === 200) {\n\t\t\t\t\t\treturn aid;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tprivate batchDataHandler = (requests: Array<RequestOptions>) =>\n\t\tbatchJsonRequest({\n\t\t\trequests,\n\t\t\t...this.getAdditionalRequestOptions()\n\t\t}).then(response => {\n\t\t\tconst sessionId = get(response, 'header.context.session.id');\n\t\t\tconst notifications = get(response, 'header.context.notify.0');\n\n\t\t\tthis.checkAndUpdateSessionId(sessionId);\n\n\t\t\tif (notifications && this.notificationsEmitter) {\n\t\t\t\t// emit the notifications on the emitter which can be handled by the calling client\n\t\t\t\tthis.notificationsEmitter &&\n\t\t\t\t\tthis.notificationsEmitter.emit(\n\t\t\t\t\t\tthis.notificationsEvents.notify,\n\t\t\t\t\t\tnotifications\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn response.requests.map((r, i) => {\n\t\t\t\tif (DEBUG) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`[Batch Client Request] ${requests[i].name}`,\n\t\t\t\t\t\trequests[i].body,\n\t\t\t\t\t\tr\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn isError(r) ? r : r.body;\n\t\t\t});\n\t\t});\n\n\tprivate checkAndUpdateSessionId = (sessionId: any) => {\n\t\t// Need to save session id in apollo cache for user session management zimlet to stop duplication of sessions data.\n\t\tif (sessionId && this.sessionId !== sessionId) {\n\t\t\tthis.sessionHandler && this.sessionHandler.writeSessionId(sessionId);\n\t\t\tthis.sessionId = sessionId;\n\t\t}\n\t};\n\n\tprivate dataHandler = (requests: Array<JsonRequestOptions>) =>\n\t\tjsonRequest({\n\t\t\t...requests[0],\n\t\t\t// check if login request then don't add csrfToken\n\t\t\t...this.getAdditionalRequestOptions(requests[0].name !== 'Auth')\n\t\t}).then(response => {\n\t\t\tconst sessionId = get(response, 'header.context.session.id');\n\t\t\tconst notifications = get(response, 'header.context.notify.0');\n\n\t\t\tthis.checkAndUpdateSessionId(sessionId);\n\n\t\t\tif (notifications && this.notificationsEmitter) {\n\t\t\t\tthis.notificationsEmitter.emit(\n\t\t\t\t\tthis.notificationsEvents.notify,\n\t\t\t\t\tnotifications\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn isError(response) ? [response] : [response.body];\n\t\t});\n\n\tprivate download = ({ id, part, isSecure }: any) =>\n\t\tfetch(\n\t\t\t`${this.origin}/service/home/~/?auth=co&id=${id}${\n\t\t\t\tpart ? `&part=${part}` : ''\n\t\t\t}`,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t...(isSecure && { 'X-Zimbra-Encoding': 'x-base64' }),\n\t\t\t\t\t...(this.csrfToken && {\n\t\t\t\t\t\t'X-Zimbra-Csrf-Token': this.csrfToken\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tcredentials: 'include'\n\t\t\t}\n\t\t).then(response => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.text().then(content => {\n\t\t\t\t\tif (!content) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tpart,\n\t\t\t\t\t\tcontent\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t/**\n\t * These options are included on every request.\n\t */\n\tprivate getAdditionalRequestOptions = (addCsrfToken: Boolean = true) => ({\n\t\tjwtToken: this.jwtToken,\n\t\t...(addCsrfToken && {\n\t\t\tcsrfToken: this.csrfToken\n\t\t}),\n\t\tsessionId:\n\t\t\tthis.sessionId ||\n\t\t\t(this.sessionHandler && this.sessionHandler.readSessionId()),\n\t\torigin: this.origin,\n\t\tuserAgent: this.userAgent\n\t});\n\n\tprivate normalizeMessage = (message: any) =>\n\t\tnormalizeMessage(message, {\n\t\t\torigin: this.origin,\n\t\t\tjwtToken: this.jwtToken\n\t\t});\n}\n","import gql from 'graphql-tag';\nimport get from 'lodash/get';\nimport { ZimbraInMemoryCache } from '../apollo/zimbra-in-memory-cache';\nimport { ZimbraSessionOptions } from './types';\n\nconst SESSION_GQL_FRAGMENT = gql`\n\tfragment session on Session {\n\t\tid\n\t}\n`;\n\nexport class SessionHandler {\n\tprivate cache: ZimbraInMemoryCache;\n\tprivate cacheKeyForSession: string = 'Session';\n\n\tconstructor(options: ZimbraSessionOptions) {\n\t\tthis.cache = options.cache;\n\t}\n\n\tpublic readSessionId = () => {\n\t\tconst sessionIdFragment: any = this.cache.readFragment({\n\t\t\tid: this.cacheKeyForSession,\n\t\t\tfragment: SESSION_GQL_FRAGMENT\n\t\t});\n\t\treturn get(sessionIdFragment, 'id') || '1';\n\t};\n\n\tpublic writeSessionId = (sessionId: string) => {\n\t\tthis.cache.writeFragment({\n\t\t\tid: this.cacheKeyForSession,\n\t\t\tfragment: SESSION_GQL_FRAGMENT,\n\t\t\tdata: {\n\t\t\t\tid: sessionId,\n\t\t\t\t__typename: 'Session'\n\t\t\t}\n\t\t});\n\t};\n}\n","import { makeExecutableSchema } from 'graphql-tools';\nimport mapValues from 'lodash/mapValues';\n\nimport {\n\tAddMsgInput,\n\tCalendarItemInput,\n\tClientInfoInput,\n\tCounterAppointmentInput,\n\tCreateContactInput,\n\tCreateIdentityInput,\n\tCreateMountpointInput,\n\tCreateTagInput,\n\tCustomMetadataInput,\n\tDeleteAppointmentInput,\n\tDeleteIdentityInput,\n\tEnableTwoFactorAuthInput,\n\tExternalAccountAddInput,\n\tExternalAccountImportInput,\n\tExternalAccountTestInput,\n\tFilterInput,\n\tFolderActionChangeColorInput,\n\tFolderActionCheckCalendarInput,\n\tForwardAppointmentInput,\n\tForwardAppointmentInviteInput,\n\tGetRightsInput,\n\tGrantRightsInput,\n\tInviteReplyInput,\n\tModifyContactInput,\n\tModifyIdentityInput,\n\tNameIdInput,\n\tPreferencesInput,\n\tPropertiesInput,\n\tRevokeRightsInput,\n\tSearchFolderInput,\n\tSendMessageInput,\n\tShareNotificationInput,\n\tSignatureInput,\n\tWhiteBlackListInput,\n\tZimletPreferenceInput\n} from './generated-schema-types';\nimport { ZimbraSchemaOptions } from './types';\n\nimport { ZimbraBatchClient } from '../batch-client';\nimport { coerceBooleanToString } from '../utils/coerce-boolean';\n\nimport { GraphQLSchema } from 'graphql';\nimport {\n\tActionOptions,\n\tActionType,\n\tApplyFilterRulesOptions,\n\tAppointmentOptions,\n\tAutoCompleteGALOptions,\n\tAutoCompleteOptions,\n\tChangePasswordOptions,\n\tCreateFolderOptions,\n\tCreateSearchFolderOptions,\n\tExternalAccountDeleteInput,\n\tExternalAccountModifyInput,\n\tFreeBusyOptions,\n\tGetContactFrequencyOptions,\n\tGetContactOptions,\n\tGetConversationOptions,\n\tGetCustomMetadataOptions,\n\tGetFolderOptions,\n\tGetMailboxMetadataOptions,\n\tGetMessageOptions,\n\tGetSMimePublicCertsOptions,\n\tLoginOptions,\n\tModifyProfileImageOptions,\n\tRecoverAccountOptions,\n\tRelatedContactsOptions,\n\tResetPasswordOptions,\n\tSaveDocumentInput,\n\tSearchOptions,\n\tSetRecoveryAccountOptions,\n\tShareInfoOptions,\n\tWorkingHoursOptions\n} from '../batch-client/types';\nimport schema from './schema.graphql';\nimport { SessionHandler } from './session-handler';\n\nexport function createZimbraSchema(\n\toptions: ZimbraSchemaOptions\n): { client: ZimbraBatchClient; schema: GraphQLSchema } {\n\tconst { cache, getApolloClient, ...clientOptions } = options;\n\tconst sessionHandler = cache ? new SessionHandler({ cache }) : undefined;\n\tconst client = new ZimbraBatchClient({\n\t\t...clientOptions,\n\t\tsessionHandler\n\t});\n\n\tconst localStoreClient = options.localStoreClient;\n\n\tconst executableSchema = makeExecutableSchema({\n\t\ttypeDefs: schema,\n\t\tresolvers: {\n\t\t\tQuery: {\n\t\t\t\taccountInfo: client.accountInfo,\n\t\t\t\tautoComplete: (_, variables) =>\n\t\t\t\t\tclient.autoComplete(variables as AutoCompleteOptions),\n\t\t\t\tautoCompleteGAL: (_, variables) =>\n\t\t\t\t\tclient.autoCompleteGAL(variables as AutoCompleteGALOptions),\n\t\t\t\tdiscoverRights: client.discoverRights,\n\t\t\t\tdownloadAttachment: (_, variables) =>\n\t\t\t\t\tclient.downloadAttachment(variables),\n\t\t\t\tdownloadMessage: (_, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.downloadMessage(variables);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn client.downloadMessage(variables);\n\t\t\t\t},\n\t\t\t\tfreeBusy: (_, variables) =>\n\t\t\t\t\tclient.freeBusy(variables as FreeBusyOptions),\n\t\t\t\tgetContact: (_, variables) =>\n\t\t\t\t\tclient.getContact(variables as GetContactOptions),\n\t\t\t\tclientInfo: (_, variables) =>\n\t\t\t\t\tclient.clientInfo(variables as ClientInfoInput),\n\t\t\t\tgetContactFrequency: (_, variables: any) =>\n\t\t\t\t\tclient.getContactFrequency(variables as GetContactFrequencyOptions),\n\t\t\t\tgetConversation: (_, variables) =>\n\t\t\t\t\tclient.getConversation(variables as GetConversationOptions),\n\t\t\t\tgetCustomMetadata: (_: any, variables) =>\n\t\t\t\t\tclient.getCustomMetadata(variables as GetCustomMetadataOptions),\n\t\t\t\tgetFilterRules: client.getFilterRules,\n\t\t\t\tgetFolder: (_: any, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.getFolder(variables as GetFolderOptions);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn client.getFolder(variables as GetFolderOptions);\n\t\t\t\t},\n\t\t\t\tgetAppointment: (_: any, variables) =>\n\t\t\t\t\tclient.getAppointment(variables as AppointmentOptions),\n\t\t\t\tgetAppointments: (_: any, variables) =>\n\t\t\t\t\tclient.search(variables as SearchOptions),\n\t\t\t\tgetReminders: (_: any, variables) =>\n\t\t\t\t\tclient.search(variables as SearchOptions),\n\t\t\t\tgetTasks: (_: any, variables) =>\n\t\t\t\t\tclient.getTasks(variables as SearchOptions),\n\t\t\t\tgetAvailableLocales: (_: any) => client.getAvailableLocales(),\n\t\t\t\tgetMailboxMetadata: (_: any, variables) =>\n\t\t\t\t\tclient.getMailboxMetadata(variables as GetMailboxMetadataOptions),\n\t\t\t\tgetMessage: (_, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.getMessage(variables as GetMessageOptions);\n\t\t\t\t\t}\n\t\t\t\t\treturn client.getMessage(variables as GetMessageOptions);\n\t\t\t\t},\n\t\t\t\tgetMessagesMetadata: (_, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.getMessagesMetadata(\n\t\t\t\t\t\t\tvariables as GetMessageOptions\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn client.getMessagesMetadata(variables as GetMessageOptions);\n\t\t\t\t},\n\t\t\t\tgetRights: (_, variables) =>\n\t\t\t\t\tclient.getRights(variables as GetRightsInput),\n\t\t\t\tgetScratchCodes: client.getScratchCodes,\n\t\t\t\tgetSearchFolder: client.getSearchFolder,\n\t\t\t\tgetSMimePublicCerts: (_, variables) =>\n\t\t\t\t\tclient.getSMimePublicCerts(variables as GetSMimePublicCertsOptions),\n\t\t\t\tgetTrustedDevices: client.getTrustedDevices,\n\t\t\t\tgetWorkingHours: (_, variables) =>\n\t\t\t\t\tclient.getWorkingHours(variables as WorkingHoursOptions),\n\t\t\t\tgetPreferences: client.getPreferences,\n\t\t\t\tgetDataSources: client.getDataSources,\n\t\t\t\tgetIdentities: client.getIdentities,\n\t\t\t\tgetSignatures: client.getSignatures,\n\t\t\t\tnoop: client.noop,\n\t\t\t\trecoverAccount: (_, variables) =>\n\t\t\t\t\tclient.recoverAccount(variables as RecoverAccountOptions),\n\t\t\t\trelatedContacts: (_, variables) =>\n\t\t\t\t\tclient.relatedContacts(variables as RelatedContactsOptions),\n\t\t\t\tsearch: (_, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.search(variables as SearchOptions);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn client.search(variables as SearchOptions);\n\t\t\t\t},\n\t\t\t\tsearchGal: (_, variables) =>\n\t\t\t\t\tclient.searchGal(variables as SearchOptions),\n\t\t\t\tshareInfo: (_, variables) =>\n\t\t\t\t\tclient.shareInfo(variables as ShareInfoOptions),\n\t\t\t\ttaskFolders: client.taskFolders,\n\t\t\t\tgetWhiteBlackList: client.getWhiteBlackList,\n\t\t\t\tgetAppSpecificPasswords: client.getAppSpecificPasswords,\n\t\t\t\tgetTag: client.getTag\n\t\t\t},\n\t\t\t//resolveType is necessary to differentiate for any Union or Interfaces\n\t\t\tMailItem: {\n\t\t\t\t__resolveType(obj: any) {\n\t\t\t\t\treturn obj.conversationId ? 'MessageInfo' : 'Conversation';\n\t\t\t\t}\n\t\t\t},\n\t\t\tMutation: {\n\t\t\t\taction: (_, { type, ...rest }, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\t\t\t\t\treturn local\n\t\t\t\t\t\t? localStoreClient.action(type, rest as ActionOptions)\n\t\t\t\t\t\t: client.action(type, rest as ActionOptions);\n\t\t\t\t},\n\t\t\t\taddMessage: (_, variables, context = {}) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.addMessage(variables as AddMsgInput);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn client.addMessage(variables as AddMsgInput);\n\t\t\t\t},\n\t\t\t\tapplyFilterRules: (_, variables) =>\n\t\t\t\t\tclient.applyFilterRules(variables as ApplyFilterRulesOptions),\n\t\t\t\tcancelTask: (_, variables) => client.cancelTask(variables),\n\t\t\t\titemAction: (_, variables) =>\n\t\t\t\t\tclient.itemAction(variables as ActionOptions),\n\t\t\t\tlogin: (_, variables) => client.login(variables as LoginOptions),\n\t\t\t\tlogout: client.logout,\n\t\t\t\tdisableTwoFactorAuth: client.disableTwoFactorAuth,\n\t\t\t\tenableTwoFactorAuth: (_, { options }) =>\n\t\t\t\t\tclient.enableTwoFactorAuth(options as EnableTwoFactorAuthInput),\n\t\t\t\tmessageAction: (_, variables) =>\n\t\t\t\t\tclient.messageAction(variables as ActionOptions),\n\t\t\t\tchangePassword: (_, variables) =>\n\t\t\t\t\tclient.changePassword(variables as ChangePasswordOptions),\n\t\t\t\tmodifyProfileImage: (_, variables) =>\n\t\t\t\t\tclient.modifyProfileImage(variables as ModifyProfileImageOptions),\n\t\t\t\tcontactAction: (_, variables) =>\n\t\t\t\t\tclient.contactAction(variables as ActionOptions),\n\t\t\t\tcreateAppSpecificPassword: (_, { appName }) =>\n\t\t\t\t\tclient.createAppSpecificPassword(appName),\n\t\t\t\tconversationAction: (_, variables) =>\n\t\t\t\t\tclient.conversationAction(variables as ActionOptions),\n\t\t\t\tcreateFolder: (_, variables, context) => {\n\t\t\t\t\tconst { local } = context;\n\n\t\t\t\t\tif (local) {\n\t\t\t\t\t\treturn localStoreClient.createFolder(\n\t\t\t\t\t\t\tvariables as CreateFolderOptions\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn client.createFolder(variables as CreateFolderOptions);\n\t\t\t\t},\n\t\t\t\tcreateSearchFolder: (_, variables) =>\n\t\t\t\t\tclient.createSearchFolder(variables as CreateSearchFolderOptions),\n\t\t\t\tcreateContact: (_, { contact }) =>\n\t\t\t\t\tclient.createContact(contact as CreateContactInput),\n\t\t\t\tcreateContactList: (_, { contact }) =>\n\t\t\t\t\tclient.createContact(contact as CreateContactInput),\n\t\t\t\tmodifyContact: (_, { contact }) =>\n\t\t\t\t\tclient.modifyContact(contact as ModifyContactInput),\n\t\t\t\tmodifyContactList: (_, { contact }) =>\n\t\t\t\t\tclient.modifyContact(contact as ModifyContactInput),\n\t\t\t\tcreateAppointment: (_, { accountName, appointment }) =>\n\t\t\t\t\tclient.createAppointment(\n\t\t\t\t\t\taccountName,\n\t\t\t\t\t\tappointment as CalendarItemInput\n\t\t\t\t\t),\n\t\t\t\tsnoozeCalendarItem: (_, { appointment, task }) =>\n\t\t\t\t\tclient.snoozeCalendarItem(appointment, task),\n\t\t\t\tdismissCalendarItem: (_, { appointment, task }) =>\n\t\t\t\t\tclient.dismissCalendarItem(appointment, task),\n\t\t\t\tcreateAppointmentException: (_, { accountName, appointment }) =>\n\t\t\t\t\tclient.createAppointmentException(\n\t\t\t\t\t\taccountName,\n\t\t\t\t\t\tappointment as CalendarItemInput\n\t\t\t\t\t),\n\t\t\t\tmodifyAppointment: (_, { accountName, appointment }) =>\n\t\t\t\t\tclient.modifyAppointment(\n\t\t\t\t\t\taccountName,\n\t\t\t\t\t\tappointment as CalendarItemInput\n\t\t\t\t\t),\n\t\t\t\tcreateMountpoint: (_, variables) =>\n\t\t\t\t\tclient.createMountpoint(variables as CreateMountpointInput),\n\t\t\t\tdeleteAppointment: (_, { appointment }) =>\n\t\t\t\t\tclient.deleteAppointment(appointment as DeleteAppointmentInput),\n\t\t\t\tcheckCalendar: (_, variables) =>\n\t\t\t\t\tclient.checkCalendar(variables as FolderActionCheckCalendarInput),\n\t\t\t\tcounterAppointment: (_, { counterAppointmentInvite }) =>\n\t\t\t\t\tclient.counterAppointment(\n\t\t\t\t\t\tcounterAppointmentInvite as CounterAppointmentInput\n\t\t\t\t\t),\n\t\t\t\tcreateCalendar: (_, { name, color, url }) =>\n\t\t\t\t\tclient.createFolder({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tview: 'appointment',\n\t\t\t\t\t\tflags: '#'\n\t\t\t\t\t} as CreateFolderOptions),\n\t\t\t\tcreateSharedCalendar: (_, { link }) =>\n\t\t\t\t\tclient.createMountpoint({\n\t\t\t\t\t\tlink: {\n\t\t\t\t\t\t\t...link,\n\t\t\t\t\t\t\tparentFolderId: 1,\n\t\t\t\t\t\t\tview: 'appointment',\n\t\t\t\t\t\t\tflags: '#'\n\t\t\t\t\t\t}\n\t\t\t\t\t} as CreateMountpointInput),\n\n\t\t\t\tsaveDocument: (_, document) =>\n\t\t\t\t\tclient.saveDocument(document as SaveDocumentInput),\n\t\t\t\tchangeFolderColor: (_, variables) =>\n\t\t\t\t\tclient.changeFolderColor(variables as FolderActionChangeColorInput),\n\t\t\t\tdeclineCounterAppointment: (_, { counterAppointmentInvite }) =>\n\t\t\t\t\tclient.declineCounterAppointment(\n\t\t\t\t\t\tcounterAppointmentInvite as CounterAppointmentInput\n\t\t\t\t\t),\n\t\t\t\tfolderAction: (_, { action }) => client.folderAction(action),\n\t\t\t\tforwardAppointment: (_, { appointmentInvite }) =>\n\t\t\t\t\tclient.forwardAppointment(\n\t\t\t\t\t\tappointmentInvite as ForwardAppointmentInput\n\t\t\t\t\t),\n\t\t\t\tforwardAppointmentInvite: (_, { appointmentInvite }) =>\n\t\t\t\t\tclient.forwardAppointmentInvite(\n\t\t\t\t\t\tappointmentInvite as ForwardAppointmentInviteInput\n\t\t\t\t\t),\n\t\t\t\tgenerateScratchCodes: client.generateScratchCodes,\n\t\t\t\tgrantRights: (_, variables) =>\n\t\t\t\t\tclient.grantRights(variables.input as GrantRightsInput),\n\t\t\t\tsendShareNotification: (_, { shareNotification }) =>\n\t\t\t\t\tclient.sendShareNotification(\n\t\t\t\t\t\tshareNotification as ShareNotificationInput\n\t\t\t\t\t),\n\t\t\t\ttestExternalAccount: (_, { externalAccount }) =>\n\t\t\t\t\tclient.testExternalAccount(\n\t\t\t\t\t\texternalAccount as ExternalAccountTestInput\n\t\t\t\t\t),\n\t\t\t\taddExternalAccount: (_, { externalAccount }) =>\n\t\t\t\t\tclient.addExternalAccount(externalAccount as ExternalAccountAddInput),\n\t\t\t\tmodifyExternalAccount: (_, variables) =>\n\t\t\t\t\tclient.modifyExternalAccount(variables as ExternalAccountModifyInput),\n\t\t\t\tdeleteExternalAccount: (_, variables) =>\n\t\t\t\t\tclient.deleteExternalAccount(variables as ExternalAccountDeleteInput),\n\t\t\t\timportExternalAccount: (_, { externalAccount }) =>\n\t\t\t\t\tclient.importExternalAccount(\n\t\t\t\t\t\texternalAccount as ExternalAccountImportInput\n\t\t\t\t\t),\n\t\t\t\tprefEnableOutOfOfficeAlertOnLogin: (_, { value }) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.modifyPrefs({\n\t\t\t\t\t\t\tzimbraPrefOutOfOfficeStatusAlertOnLogin: value\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(Boolean),\n\n\t\t\t\tprefEnableOutOfOfficeReply: (_, { value }) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.modifyPrefs({\n\t\t\t\t\t\t\tzimbraPrefOutOfOfficeReplyEnabled: value\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(Boolean),\n\n\t\t\t\tprefOutOfOfficeFromDate: (_, { value }) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.modifyPrefs({\n\t\t\t\t\t\t\tzimbraPrefOutOfOfficeFromDate: value\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => value),\n\n\t\t\t\tprefOutOfOfficeUntilDate: (_, { value }) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.modifyPrefs({ zimbraPrefOutOfOfficeUntilDate: value })\n\t\t\t\t\t\t.then(() => value),\n\n\t\t\t\tprefOutOfOfficeReply: (_, { value }) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.modifyPrefs({\n\t\t\t\t\t\t\tzimbraPrefOutOfOfficeReply: value\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => value),\n\t\t\t\tcreateIdentity: (_, variables) =>\n\t\t\t\t\tclient.createIdentity(variables as CreateIdentityInput),\n\t\t\t\tmodifyIdentity: (_, variables) =>\n\t\t\t\t\tclient.modifyIdentity(variables as ModifyIdentityInput).then(Boolean),\n\t\t\t\tdeleteIdentity: (_, variables) =>\n\t\t\t\t\tclient.deleteIdentity(variables as DeleteIdentityInput).then(Boolean),\n\t\t\t\tmodifyPrefs: (_, { prefs }) =>\n\t\t\t\t\tclient.modifyPrefs(prefs as PreferencesInput),\n\t\t\t\tmodifyProps: (_, { props }) =>\n\t\t\t\t\tclient.modifyProps(props as Array<PropertiesInput>),\n\t\t\t\tmodifyZimletPrefs: (_, { zimlets }) =>\n\t\t\t\t\tclient.modifyZimletPrefs(zimlets as Array<ZimletPreferenceInput>),\n\t\t\t\tmodifyFilterRules: (_, { filters }) =>\n\t\t\t\t\tclient.modifyFilterRules(filters as Array<FilterInput>),\n\t\t\t\tcreateSignature: (_, variables) =>\n\t\t\t\t\tclient.createSignature(variables as SignatureInput),\n\t\t\t\tmodifySignature: (_, variables) =>\n\t\t\t\t\tclient.modifySignature(variables as SignatureInput),\n\t\t\t\tmodifySearchFolder: (_, variables) =>\n\t\t\t\t\tclient.modifySearchFolder(variables as SearchFolderInput),\n\t\t\t\tdeleteSignature: (_, variables) =>\n\t\t\t\t\tclient.deleteSignature(variables as NameIdInput),\n\t\t\t\tsaveDraft: (_, variables) =>\n\t\t\t\t\tclient.saveDraft(variables as SendMessageInput),\n\t\t\t\tsendMessage: (_, variables) =>\n\t\t\t\t\tclient.sendMessage(variables as SendMessageInput),\n\t\t\t\tsendDeliveryReport: (_, { messageId }) =>\n\t\t\t\t\tclient.sendDeliveryReport(messageId),\n\t\t\t\tuploadMessage: (_, { value }) => client.uploadMessage(value),\n\t\t\t\tcreateTask: (_, { task }) =>\n\t\t\t\t\tclient.createTask(task as CalendarItemInput),\n\t\t\t\tmodifyTask: (_, { task }) =>\n\t\t\t\t\tclient.modifyTask(task as CalendarItemInput),\n\t\t\t\tsendInviteReply: (_, { inviteReply }) =>\n\t\t\t\t\tclient.sendInviteReply(inviteReply as InviteReplyInput),\n\t\t\t\trecoverAccount: (_, variables) =>\n\t\t\t\t\tclient.recoverAccount(variables as RecoverAccountOptions),\n\t\t\t\tresetPassword: (_, variables) =>\n\t\t\t\t\tclient.resetPassword(variables as ResetPasswordOptions),\n\t\t\t\trevokeAppSpecificPassword: (_, { appName }) =>\n\t\t\t\t\tclient.revokeAppSpecificPassword(appName),\n\t\t\t\trevokeOtherTrustedDevices: client.revokeOtherTrustedDevices,\n\t\t\t\trevokeRights: (_, variables) =>\n\t\t\t\t\tclient.revokeRights(variables.input as RevokeRightsInput),\n\t\t\t\trevokeTrustedDevice: client.revokeTrustedDevice,\n\t\t\t\tsetCustomMetadata: (_, customMetadata) =>\n\t\t\t\t\tclient.setCustomMetadata(customMetadata as CustomMetadataInput),\n\t\t\t\tsetMailboxMetadata: (_: any, variables: any) =>\n\t\t\t\t\tclient\n\t\t\t\t\t\t.jsonRequest({\n\t\t\t\t\t\t\tname: 'SetMailboxMetadata',\n\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\tmeta: {\n\t\t\t\t\t\t\t\t\tsection: variables.section,\n\t\t\t\t\t\t\t\t\t_attrs: mapValues(variables.attrs, coerceBooleanToString)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(Boolean),\n\t\t\t\tsetRecoveryAccount: (_, variables) =>\n\t\t\t\t\tclient.setRecoveryAccount(variables as SetRecoveryAccountOptions),\n\t\t\t\tmodifyWhiteBlackList: (_, { whiteBlackList }) =>\n\t\t\t\t\tclient.modifyWhiteBlackList(whiteBlackList as WhiteBlackListInput),\n\t\t\t\tcreateTag: (_, { tag }) => client.createTag(tag as CreateTagInput),\n\t\t\t\ttagAction: (_, { action }) => client.action(ActionType.tag, action)\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\tclient,\n\t\tschema: executableSchema\n\t};\n}\n\nexport { schema };\n","import { ApolloLink, FetchResult, Observable, Operation } from 'apollo-link';\nimport { BatchLink } from 'apollo-link-batch';\nimport { graphql } from 'graphql';\nimport { print } from 'graphql/language/printer';\nimport events from 'mitt';\n\nimport { LocalBatchLinkOptions } from './types';\n\nexport class LocalBatchLink extends ApolloLink {\n\tpublic off: any;\n\tpublic on: any;\n\tpublic schema: any;\n\tprivate batcher: BatchLink;\n\n\tconstructor(options: LocalBatchLinkOptions) {\n\t\tsuper();\n\t\tthis.schema = options.schema;\n\t\tconst notifier: any = new (events as any)();\n\t\tthis.on = notifier.on;\n\t\tthis.off = notifier.off;\n\n\t\tconst batchHandler = (operations: Operation[]) =>\n\t\t\tnew Observable<FetchResult[]>(observer => {\n\t\t\t\tnotifier.emit('req', operations);\n\t\t\t\tlet emittedResponse = false;\n\t\t\t\tPromise.all(\n\t\t\t\t\toperations.map((operation: Operation) => {\n\t\t\t\t\t\tconst query = print(operation.query);\n\t\t\t\t\t\tconst { operationName, variables = {} } = operation;\n\n\t\t\t\t\t\treturn graphql(\n\t\t\t\t\t\t\tthis.schema,\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\toperation.getContext() || options.context || {},\n\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\toperationName\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t\t.then((results: FetchResult[]) => {\n\t\t\t\t\t\t(emittedResponse = true) && notifier.emit('res', results);\n\t\t\t\t\t\t// we have data and can send it to back up the link chain\n\t\t\t\t\t\tobserver.next(results);\n\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\temittedResponse || notifier.emit('res', err);\n\t\t\t\t\t\tobserver.error(err);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\tthis.batcher = new BatchLink({\n\t\t\tbatchInterval: options.batchInterval,\n\t\t\tbatchHandler\n\t\t});\n\t}\n\n\trequest(operation: Operation): Observable<FetchResult> | null {\n\t\treturn this.batcher.request(operation);\n\t}\n}\n","import { ErrorLink } from 'apollo-link-error';\nimport get from 'lodash/get';\n\nclass ZimbraErrorLink extends ErrorLink {\n\thandlers: any[] = [];\n\n\tconstructor() {\n\t\tsuper(({ graphQLErrors, networkError }) => {\n\t\t\tgraphQLErrors &&\n\t\t\t\tgraphQLErrors.map(({ message, originalError, ...rest }) => {\n\t\t\t\t\tlet errorCode = get(originalError, 'faults.0.Detail.Error.Code', '');\n\n\t\t\t\t\tthis.executeHandlers({\n\t\t\t\t\t\terrorCode,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\toriginalError,\n\t\t\t\t\t\t...rest\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tnetworkError &&\n\t\t\t\tthis.executeHandlers({\n\t\t\t\t\tmessage: `[Network error]: ${networkError}`\n\t\t\t\t});\n\t\t});\n\t}\n\n\texecuteHandlers = (data: object) => {\n\t\tthis.handlers.map(handler => {\n\t\t\thandler(data);\n\t\t});\n\t};\n\n\tregisterHandler = (handler: any) => {\n\t\tthis.handlers.push(handler);\n\t};\n\n\tunRegisterAllHandlers = () => {\n\t\tthis.handlers = [];\n\t};\n\n\tunRegisterHandler = (handler: any) => {\n\t\tconst index = this.handlers.findIndex(handler);\n\t\tindex !== -1 && this.handlers.splice(index, 1);\n\t};\n}\n\nexport { ZimbraErrorLink };\n","import {\n\tApolloReducerConfig,\n\tdefaultDataIdFromObject,\n\tInMemoryCache,\n\tIntrospectionFragmentMatcher\n} from 'apollo-cache-inmemory';\nimport get from 'lodash/get';\n\nconst dataIdFromPath = (result: any, path: string) => {\n\tif (result.__typename) {\n\t\tconst id = get(result, path);\n\t\treturn id ? `${result.__typename}:${id}` : defaultDataIdFromObject(result);\n\t}\n};\n\nconst dataIdFromObject = (object: any): string | null | undefined => {\n\tswitch (object.__typename) {\n\t\tcase 'CalendarItemHitInfo':\n\t\t\tif (object.instances) {\n\t\t\t\treturn `${defaultDataIdFromObject(object)}:${object.instances.length}`;\n\t\t\t}\n\t\t\treturn `${defaultDataIdFromObject(object)}`;\n\t\tcase 'MailboxMetadata':\n\t\t\t// Identify metadata groups by their section identifier such as\n\t\t\t// `zwc:implicit`.\n\t\t\treturn dataIdFromPath(object, 'meta.0.section');\n\t\tcase 'Folder':\n\t\t\tif (object.id === '1') {\n\t\t\t\t// Cache the root folder based on both ID and UUID from server\n\t\t\t\treturn `${object.__typename}:${object.id}:${object.uuid}`;\n\t\t\t}\n\t\t\treturn defaultDataIdFromObject(object);\n\t\tcase 'AutoCompleteMatch':\n\t\t\t// AutoCompleteMatch is not guarenteed to have an `id`\n\t\t\treturn `${defaultDataIdFromObject(object)}:${object.email}`;\n\t\tcase 'ContactListMember':\n\t\t\t// Contacts list members don't have ids\n\t\t\treturn `${object.type}:${object.value}`;\n\t\tdefault:\n\t\t\treturn defaultDataIdFromObject(object);\n\t}\n};\n\nfunction createFragmentMatcher(fragmentMatcherFactory = Object) {\n\treturn new IntrospectionFragmentMatcher(\n\t\tfragmentMatcherFactory({\n\t\t\tintrospectionQueryResultData: {\n\t\t\t\t__schema: {\n\t\t\t\t\ttypes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'INTERFACE',\n\t\t\t\t\t\t\tname: 'MailItem',\n\t\t\t\t\t\t\tpossibleTypes: [\n\t\t\t\t\t\t\t\t{ name: 'Conversation' },\n\t\t\t\t\t\t\t\t{ name: 'MessageInfo' },\n\t\t\t\t\t\t\t\t{ name: 'MsgWithGroupInfo' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n}\n\n/**\n * Provide a light wrapper over Apollo's inmemory cache with\n * special optimizations for identifying Zimbra object types via\n * `dataIdFromObject`.\n */\nexport class ZimbraInMemoryCache extends InMemoryCache {\n\tconstructor(config: ApolloReducerConfig = {}) {\n\t\tif (\n\t\t\t!config.fragmentMatcher ||\n\t\t\ttypeof config.fragmentMatcher === 'function'\n\t\t) {\n\t\t\tconfig.fragmentMatcher = createFragmentMatcher(config.fragmentMatcher);\n\t\t}\n\t\tsuper({\n\t\t\tdataIdFromObject,\n\t\t\t...config\n\t\t});\n\t}\n}\n","import {\n\tOfflineOperationEntry,\n\tStorageProvider\n} from '../offline-queue-link/types';\n\nimport { SyncOfflineOperationsOptions } from './types';\n\nexport class SyncOfflineOperations {\n\tpublic apolloClient: any;\n\tpublic storage: StorageProvider;\n\tprivate offlineData: Array<OfflineOperationEntry>;\n\tprivate storeKey: string;\n\n\tconstructor({\n\t\tapolloClient,\n\t\tstorage,\n\t\tstoreKey = '@offlineQueueKey'\n\t}: SyncOfflineOperationsOptions) {\n\t\tif (!apolloClient)\n\t\t\tthrow new Error(\n\t\t\t\t'Apollo Client instance is required when syncing data, please assign value to it'\n\t\t\t);\n\t\tif (!storage)\n\t\t\tthrow new Error(\n\t\t\t\t'Storage can be window.localStorage or AsyncStorage but was not set'\n\t\t\t);\n\n\t\tthis.apolloClient = apolloClient;\n\t\tthis.storage = storage;\n\t\tthis.storeKey = storeKey;\n\t\tthis.offlineData = [];\n\t}\n\n\taddOfflineData = (queue: Array<OfflineOperationEntry> = []) => {\n\t\t//add only if there is a value\n\t\tif (queue && queue.length > 0)\n\t\t\tthis.storage.setItem(this.storeKey, JSON.stringify(queue));\n\t};\n\n\tclearOfflineData = () => {\n\t\tthis.offlineData = [];\n\t\treturn Promise.resolve(this.storage.removeItem(this.storeKey));\n\t};\n\n\tgetOfflineData = () => Promise.resolve(this.storage.getItem(this.storeKey));\n\n\thasOfflineData = () => {\n\t\treturn !!(this.offlineData && this.offlineData.length > 0);\n\t};\n\n\tinit = () =>\n\t\tthis.getOfflineData().then(\n\t\t\tstored => (this.offlineData = (stored && JSON.parse(stored)) || [])\n\t\t);\n\n\tsync = () => {\n\t\t//if there is no offline data  then just exit\n\t\tif (!this.hasOfflineData()) return;\n\n\t\tconst uncommitted: Array<OfflineOperationEntry> = [];\n\n\t\treturn Promise.all(\n\t\t\tthis.offlineData.map(item =>\n\t\t\t\tthis.apolloClient['mutation' in item ? 'mutate' : 'query'](item).catch(\n\t\t\t\t\t() => {\n\t\t\t\t\t\t//set the errored item back to the stash\n\t\t\t\t\t\tuncommitted.push(item);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\t\t.catch(e => console.warn('SyncOfflineOperations::sync ERR:', e))\n\t\t\t.then(this.clearOfflineData) //wait before it was cleared\n\t\t\t.then(() => {\n\t\t\t\t//then add again the uncommited storage\n\t\t\t\tthis.addOfflineData(uncommitted);\n\t\t\t});\n\t};\n}\n","export class DedupedByQueueError extends Error {\n\tconstructor() {\n\t\tsuper('Operation was deduplicated by offline-queue-link.');\n\t\tObject.defineProperty(this, 'name', { value: 'DedupedByQueueError' });\n\t}\n}\n","import { Operation } from 'apollo-link';\nimport get from 'lodash/get';\nimport { OfflineOperationEntry, OperationEntry } from './types';\n\nexport function hasSensitiveVariables(operation: Operation) {\n\treturn !!get(operation, 'variables.password');\n}\n\nexport function isMutationOperation({ query }: Operation) {\n\treturn (\n\t\tquery &&\n\t\tquery.definitions &&\n\t\tquery.definitions.filter((e: any) => e.operation === 'mutation').length > 0\n\t);\n}\n\nexport function deriveOfflineQueue(\n\toperationQueue: Array<OperationEntry>\n): Array<OfflineOperationEntry> {\n\treturn operationQueue.map(\n\t\t({ operation: { query, variables } }: OperationEntry) => ({\n\t\t\t[isMutationOperation(<Operation>{ query }) ? 'mutation' : 'query']: query,\n\t\t\tvariables\n\t\t})\n\t);\n}\n","import { ApolloLink, NextLink, Observable, Operation } from 'apollo-link';\nimport castArray from 'lodash/castArray';\nimport { SyncOfflineOperations } from '../sync-offline-operations';\nimport { DedupedByQueueError } from './errors';\nimport {\n\tOfflineQueueLinkOptions,\n\tOperationEntry,\n\tStorageProvider\n} from './types';\nimport { deriveOfflineQueue, hasSensitiveVariables } from './util';\n\n/**\n * Queue operations and refire them at later time, see apollo-link-queue.\n * This link also maintains a persisted copy of the queue to be consumed by a\n * third party. Further, the link maintains a map of keyed queries to be used\n * to deduplicate or cancel operations queued while the link is closed.\n */\nexport class OfflineQueueLink extends ApolloLink {\n\tpublic isOpen: boolean;\n\n\t// Backing storage: localStorage or AsyncStore works out of the box.\n\tpublic storage: StorageProvider;\n\n\t// Queues are named in order to be deduplicated or cancelled, such that an\n\t// operation can cancel other operations in the queue. Useful for mutating an\n\t// entity that only exists in the offline queue.\n\tprivate namedQueues: { [key: string]: OperationEntry | undefined };\n\n\t// All operations are queued when the link is closed. The queue is persisted\n\t// to storage on any change.\n\tprivate operationQueue: Array<OperationEntry>;\n\n\t// The key used to store the persisted operations in storage.\n\tprivate storeKey: string;\n\n\tconstructor({\n\t\tstorage,\n\t\tstoreKey = '@offlineQueueKey',\n\t\tisOpen = true\n\t}: OfflineQueueLinkOptions) {\n\t\tsuper();\n\n\t\tif (!storage)\n\t\t\tthrow new Error(\n\t\t\t\t'Storage can be window.localStorage or AsyncStorage but was not set'\n\t\t\t);\n\t\tthis.storage = storage;\n\t\tthis.storeKey = storeKey;\n\t\tthis.namedQueues = {};\n\t\tthis.operationQueue = [];\n\t\tthis.isOpen = isOpen;\n\t}\n\n\tcancelNamedQueue = (offlineQueueName: string) => {\n\t\tconst entry: OperationEntry | undefined = this.namedQueues[\n\t\t\tofflineQueueName\n\t\t];\n\t\tif (entry) {\n\t\t\tthis.dequeue(entry);\n\t\t\tif (entry.observer && entry.observer.error) {\n\t\t\t\tentry.observer.error(new DedupedByQueueError());\n\t\t\t}\n\n\t\t\tthis.namedQueues[offlineQueueName] = undefined;\n\t\t}\n\t};\n\n\tclose = () => {\n\t\tthis.isOpen = false;\n\t};\n\n\tdequeue = (entry: OperationEntry) => {\n\t\tconst index = this.operationQueue.indexOf(entry);\n\t\tif (index !== -1) {\n\t\t\tthis.operationQueue = [\n\t\t\t\t...this.operationQueue.slice(0, index),\n\t\t\t\t...this.operationQueue.slice(index + 1)\n\t\t\t];\n\t\t}\n\n\t\tthis.persist();\n\t};\n\n\tenqueue = (entry: OperationEntry) => {\n\t\tthis.operationQueue.push(entry);\n\t\tthis.persist();\n\t};\n\n\tgetSize = () =>\n\t\tPromise.resolve(this.storage.getItem(this.storeKey)).then(\n\t\t\td => (d || '').length\n\t\t);\n\n\topen = ({ apolloClient }: { apolloClient?: any } = {}) => {\n\t\tif (!apolloClient) return;\n\n\t\tthis.isOpen = true;\n\n\t\treturn this.retry();\n\t};\n\n\tpersist = () =>\n\t\tPromise.resolve(\n\t\t\tthis.storage.setItem(\n\t\t\t\tthis.storeKey,\n\t\t\t\tJSON.stringify(deriveOfflineQueue(this.operationQueue))\n\t\t\t)\n\t\t);\n\n\tpurge = () => Promise.resolve(this.storage.removeItem(this.storeKey));\n\n\t// @ts-ignore\n\trequest(operation: Operation, forward?: NextLink) {\n\t\tconst {\n\t\t\tskipQueue,\n\t\t\tcancelQueues,\n\t\t\tofflineQueueName,\n\t\t\tlocal\n\t\t} = operation.getContext();\n\n\t\tconst isForwarding =\n\t\t\tthis.isOpen || local || skipQueue || hasSensitiveVariables(operation);\n\n\t\tif (isForwarding && forward) {\n\t\t\t// This link does nothing if the link is open, the operation skips the\n\t\t\t// queue, or the operation has sensitive information.\n\t\t\treturn forward(operation);\n\t\t}\n\n\t\treturn new Observable(observer => {\n\t\t\tconst entry = { operation, forward, observer };\n\n\t\t\tif (offlineQueueName) {\n\t\t\t\t// Deduplication: Any queue with the same name is errored out when a newer\n\t\t\t\t// operation with the same name is queued.\n\t\t\t\tthis.cancelNamedQueue(offlineQueueName);\n\n\t\t\t\t// If the provided offlineQueueName is not self-cancelled, set this entry as\n\t\t\t\t// the head of the given named queue.\n\t\t\t\tif (!~castArray(cancelQueues).indexOf(offlineQueueName)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.namedQueues[offlineQueueName] = entry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// An operation can cancel multiple other operations.\n\t\t\tif (cancelQueues) {\n\t\t\t\tcastArray(cancelQueues).forEach(this.cancelNamedQueue);\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\tthis.enqueue(entry);\n\t\t\t// @ts-ignore\n\t\t\treturn () => this.dequeue(entry);\n\t\t});\n\t}\n\n\t// Retry operations made while offline like apollo-link-queue.\n\t// Returns a Promise that resolves after all operations are processed\n\t// regardless of success.\n\tretry = () =>\n\t\tnew Promise(resolve => {\n\t\t\tlet outstandingReqs = this.operationQueue.length;\n\t\t\tif (!outstandingReqs) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\n\t\t\tconst done = () => {\n\t\t\t\tif (--outstandingReqs === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.operationQueue.forEach(entry => {\n\t\t\t\tconst { operation, forward, observer } = entry;\n\n\t\t\t\t// Wrap the observer to call dequeue on error/complete\n\t\t\t\tforward(operation).subscribe({\n\t\t\t\t\tnext: (value: any) => {\n\t\t\t\t\t\tif (observer.next) {\n\t\t\t\t\t\t\tobserver.next(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terror: (err: any) => {\n\t\t\t\t\t\tthis.dequeue(entry);\n\t\t\t\t\t\tif (observer.error) {\n\t\t\t\t\t\t\tobserver.error(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tthis.dequeue(entry);\n\t\t\t\t\t\tif (observer.complete) {\n\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t/**\n\t * Use {@type SyncOfflineOperations} to sync any operations that have been\n\t * saved to storage\n\t */\n\tsync = ({ apolloClient }: { apolloClient?: any }) => {\n\t\tif (!apolloClient) return;\n\n\t\tconst syncOfflineOperations = new SyncOfflineOperations({\n\t\t\tapolloClient,\n\t\t\tstorage: this.storage,\n\t\t\tstoreKey: this.storeKey\n\t\t});\n\n\t\treturn syncOfflineOperations.init().then(data => {\n\t\t\tif (data && data.length) {\n\t\t\t\treturn syncOfflineOperations.sync();\n\t\t\t}\n\t\t});\n\t};\n}\n","export * from './src/schema/generated-schema-types';\nexport { ActionType, ActionResultType } from './src/batch-client/types';\n\nexport enum MailFolderView {\n\tconversation = 'conversation',\n\tmessage = 'message'\n}\n\nexport enum MessageFlags {\n\tunread = 'u',\n\tflagged = 'f',\n\thasAttachment = 'a',\n\treplied = 'r',\n\tsentByMe = 's',\n\tforwarded = 'w',\n\tcalendarInvite = 'v',\n\tdraft = 'd',\n\timapDeleted = 'x',\n\tnotificationSent = 'n',\n\turgent = '!',\n\tlowPriority = '?',\n\tpriority = '+'\n}\n\nexport enum ActionOps {\n\tupdate = 'update',\n\tdelete = 'delete',\n\tread = 'read',\n\tunread = '!read',\n\tflag = 'flag',\n\tunflag = '!flag',\n\ttag = 'tag',\n\tuntag = '!tag',\n\tmove = 'move',\n\tspam = 'spam',\n\tunspam = '!spam',\n\ttrash = 'trash',\n\tcopy = 'copy',\n}\n\nexport enum _MessageActionOps {\n\tupdate = 'update'\n}\n\nexport type MessageActionOps = ActionOps | _MessageActionOps;\n\nexport enum _ConversationActionOps {\n\tpriority = 'priority'\n}\n\nexport type ConversationActionOps = ActionOps | _ConversationActionOps;\n","export { createZimbraSchema, schema } from './src/schema/schema';\nexport { ZimbraBatchClient } from './src/batch-client';\nexport { LocalBatchLink } from './src/apollo/local-batch-link';\nexport { ZimbraErrorLink } from './src/apollo/zimbra-error-link';\nexport { ZimbraInMemoryCache } from './src/apollo/zimbra-in-memory-cache';\nexport { OfflineQueueLink } from './src/apollo/offline-queue-link';\nexport { SyncOfflineOperations } from './src/apollo/sync-offline-operations';\nexport { batchJsonRequest, jsonRequest } from './src/request';\nimport * as types from './types';\nexport { types };\n\nimport {\n\tContact,\n\tConversation,\n\tFolder as FolderEntity,\n\tMailbox,\n\tMessageInfo,\n\tTag\n} from './src/normalize/entities';\n\nconst entities = {\n\tContact,\n\tConversation,\n\tFolderEntity,\n\tMailbox,\n\tMessageInfo,\n\tTag\n};\n\nexport { entities };\nexport { normalize } from './src/normalize';\n"],"names":["normalizeKey","key","schema","inverse","getKey","inverseKey","schemaValue","Array","isArray","nestedSchema","Entity","_normalize","data","reduce","result","v","k","type","map","i","mapping","addMapping","bind","inverseMapping","initInverseMapping","accumulator","normalize","denormalize","MimePart","cd","ci","ct","s","part","mid","content","CalendarItemAlarmTriggerRelative","w","d","h","m","related","neg","CalendarItemAlarmTrigger","rel","IntervalRule","ival","NumOfOccurences","num","UntilDate","ByMonthDayRule","modaylist","ByMonthRule","molist","SimpleRepeatingRule","freq","interval","count","until","bymonthday","bymonth","AddRecurrenceInfo","rule","RecurrenceInfo","add","CalendarItemAlarmAttendees","a","CalendarItemAlarm","trigger","at","CalendarItemDateTime","tz","tzoDue","u","CalendarItemAttendees","ptst","cutype","CalendarItemReply","CalendarItemOrganizer","commonFieldForMessageAndDocuments","f","l","md","ms","rev","sf","t","tn","commonMessageFields","cid","fr","commonInviteFields","compNum","calItemId","fb","fba","isOrg","invId","loc","or","ridZ","InviteComponent","alarm","completed","desc","descHtml","e","ex","recur","exceptId","seq","InviteReplies","reply","CalTZInfo","stdoff","dayoff","Invitation","recurId","comp","replies","mp","InviteInfo","MailItemEmailAddress","p","ExistingAttachmentsInfo","AttachmentsInfo","aid","doc","attach","commonMailItemFields","inv","shr","su","origid","rt","SendMessageFields","id","irt","did","idnt","SendMessageInfo","MessageInfo","AppointmentInfo","Conversation","n","SearchConversation","CalendarItemCreateModifyRequest","apptId","CounterAppointmentInfo","InstanceDate","CalendarItemDeleteRequest","inst","NewMountpointSpec","rid","zid","CreateMountpointRequest","link","commonAccessControlEntities","gt","pw","ACLGrant","perm","ACL","grant","ShareNotificationAddress","Instance","otherAtt","dur","Alarm","CalendarItemHitInfo","tzo","alarmData","Hit","Folder","acl","folder","ForwardMessageInput","ForwardAppointmentInfo","ForwardAppointmentInviteInfo","FreeBusyInstance","FreeBusy","b","ActionOptions","tcon","AutoComplete","AutoCompleteMatch","AutoCompleteResponse","match","ShareNotification","ExternalCalendar","name","ImageFields","ContactAttributes","image","contactFields","_attrs","contactListMembers","cn","ClientInfoResponse","Contact","AutoCompleteGALResponse","Appointment","Document","luuid","mdver","meta","descEnabled","ver","leb","cr","loid","MessagePartInputForDocuments","SaveDocument","SearchResponse","c","appt","hit","GetAppointmentResponse","RedirectAction","NotifyAction","FilterAction","actionKeep","actionDiscard","actionFileInto","actionFlag","actionTag","actionRedirect","actionReply","actionNotify","actionStop","DateCondition","ImportanceCondition","imp","SizeCondition","FilterCondition","condition","addressBookTest","addressTest","attachmentTest","bodyTest","bulkTest","contactRankingTest","conversationTest","dateTest","facebookTest","flaggedTest","headerExistsTest","headerTest","importanceTest","inviteTest","linkedinTest","listTest","meTest","mimeHeaderTest","sizeTest","twitterTest","communityRequestsTest","communityContentTest","communityConnectionsTest","Filter","filterActions","filterTests","InviteReply","Signature","CreateSignatureRequest","signature","GetFolderSpec","GetFolderRequest","tr","ContactInputAttributes","_content","ContactInputRequest","contentInfo","AddMsgAttributes","AddMsgInfo","OnlyEmailAddress","addr","Target","email","Targets","target","DiscoverRightsResponse","targets","AccountACEInfo","chkgt","AccountRights","ace","SaveDocuments","GetRightsRequest","CreateAppSpecificPasswordResponse","Tag","Mailbox","Namespace","DEFAULT_HOSTNAME","DEFAULT_SOAP_PATHNAME","soapCommandBody","options","_jsns","namespace","Mail","body","parseJSON","response","ok","indexOf","status","networkError","parseErrorJSON","then","parsedResponse","fault","get","parsed","faultError","_responseParseHandler","json","parseError","Promise","resolve","message","statusText","error","Error","faultReasonText","faults","filter","Boolean","join","batchBody","requests","request","value","push","batchResponse","_","res","indexes","responses","batchResponses","index","originalResponse","Fault","batchJsonRequest","requestOptions","jsonRequest","All","credentials","headers","origin","undefined","soapPathname","soapRequestName","soapResponseName","url","header","context","authTokenControl","voidOnExpired","userAgent","sessionId","session","sessionSeq","notify","accountName","account","by","accountId","jwtToken","authToken","csrfToken","fetch","method","JSON","stringify","Body","Header","globalFault","AccountType","ActionTypeName","AddressType","AlarmAction","AlarmRelatedTo","AutoCompleteMatchType","CalendarItemClass","CalendarItemRecurrenceFrequency","ConnectionType","ContactType","FilterMatchCondition","FolderView","FreeBusyStatus","GalSearchType","GranteeType","Importance","InviteCompletionStatus","InviteReplyType","InviteReplyVerb","InviteType","LicenseStatus","NeedIsMemberType","ParticipationRole","ParticipationStatus","PasswordRecoveryAddressStatus","PrefCalendarInitialView","PrefClientType","PrefDelegatedSendSaveTarget","PrefMailSelectAfterDelete","PrefMailSendReadReceipts","ReadingPaneLocation","RecoverAccountOp","ResetPasswordStatus","SearchType","SetRecoveryAccountChannel","SetRecoveryAccountOp","ShareInputAction","SortBy","Weekday","ZimletPresence","coerceBooleanToString","val","coerceStringToBoolean","coerceBooleanToInt","mapValuesDeep","obj","callback","mapValues","setCustomMetaDataBody","attrs","section","customMetaAttrs","forEach","normalizeCustomMetaDataAttrs","Object","keys","Mapping","parseAddress","address","parts","normalizeEmailAddresses","emailAddresses","length","sender","normalizeCid","replace","normalizeType","contentType","String","toLowerCase","normalizeDisposition","contentDisposition","reduceMimeParts","iterator","mimeParts","getAttachmentUrl","attachment","messageId","encodeURIComponent","getContactProfileImageUrl","imageURL","getProfileImageUrl","profileImageId","normalizeMimeParts","processAttachment","contentId","size","acc","isBody","disposition","bodyType","concat","filename","split","mode","attributes","isEncrypted","isSigned","autoSendTime","supportedContactAttributes","createContactBody","rest","contactAttrs","otherValue","normalizeOtherAttr","contact","other","includes","otherAttributewithCustomKey","o","sort","Number","remainingOtherAttribute","differenceBy","localeCompare","ActionType","ActionResultType","SetRecoveryAccountOpType","SetRecoveryAccountChannelType","RecoverAccountOpType","normalizeMessage","normalizedMessage","updateAbsoluteFolderPath","originalName","parentFolderAbsPath","folders","absFolderPath","ZimbraBatchClient","Account","sections","zimbraMailAlias","license","attr","ids","action","ActionOptionsEntity","singleRequest","accountType","accountInfo","folderId","flags","tags","tagNames","date","parse","err","filterRules","filterRule","AutoCompleteEntity","AutoCompleteResponseEntity","inviteId","color","op","loginNewPassword","password","username","oldPassword","domain","conversation","appointment","appName","_options","fetchIfExists","parentFolderId","fie","identity","search","tag","task","dsrc","right","download","isSecure","twoFactorCode","csrfTokenSecured","start","end","names","usr","locale","item","spec","range","messages","entry","GetFolderRequestEntity","foldersResponse","linkedFolders","view","Message","oname","ownerZimbraId","sharedItemId","userId","html","raw","read","max","needExp","neuter","prefs","zimbraPrefMailTrustedSenderList","castArray","store","contactAddr","normalized","tasks","load","recoveryCode","tokenType","persistAuthTokenCookie","deviceTrusted","verifyAccount","logoff","filters","props","prop","whiteBlackList","zimlet","channel","targetContact","resp","relatedContacts","relatedContact","path","document","variables","customMetaData","share","Task","text","getAdditionalRequestOptions","notifications","checkAndUpdateSessionId","notificationsEmitter","emit","notificationsEvents","r","isError","sessionHandler","writeSessionId","addCsrfToken","readSessionId","zimbraOrigin","emitter","batchDataLoader","DataLoader","batchDataHandler","cache","dataLoader","dataHandler","batch","SESSION_GQL_FRAGMENT","gql","SessionHandler","sessionIdFragment","readFragment","cacheKeyForSession","fragment","writeFragment","__typename","createZimbraSchema","getApolloClient","clientOptions","client","localStoreClient","executableSchema","makeExecutableSchema","typeDefs","resolvers","Query","autoComplete","autoCompleteGAL","discoverRights","downloadAttachment","downloadMessage","local","freeBusy","getContact","clientInfo","getContactFrequency","getConversation","getCustomMetadata","getFilterRules","getFolder","getAppointment","getAppointments","getReminders","getTasks","getAvailableLocales","getMailboxMetadata","getMessage","getMessagesMetadata","getRights","getScratchCodes","getSearchFolder","getSMimePublicCerts","getTrustedDevices","getWorkingHours","getPreferences","getDataSources","getIdentities","getSignatures","noop","recoverAccount","searchGal","shareInfo","taskFolders","getWhiteBlackList","getAppSpecificPasswords","getTag","MailItem","__resolveType","conversationId","Mutation","addMessage","applyFilterRules","cancelTask","itemAction","login","logout","disableTwoFactorAuth","enableTwoFactorAuth","messageAction","changePassword","modifyProfileImage","contactAction","createAppSpecificPassword","conversationAction","createFolder","createSearchFolder","createContact","createContactList","modifyContact","modifyContactList","createAppointment","snoozeCalendarItem","dismissCalendarItem","createAppointmentException","modifyAppointment","createMountpoint","deleteAppointment","checkCalendar","counterAppointment","counterAppointmentInvite","createCalendar","createSharedCalendar","saveDocument","changeFolderColor","declineCounterAppointment","folderAction","forwardAppointment","appointmentInvite","forwardAppointmentInvite","generateScratchCodes","grantRights","input","sendShareNotification","shareNotification","testExternalAccount","externalAccount","addExternalAccount","modifyExternalAccount","deleteExternalAccount","importExternalAccount","prefEnableOutOfOfficeAlertOnLogin","modifyPrefs","zimbraPrefOutOfOfficeStatusAlertOnLogin","prefEnableOutOfOfficeReply","zimbraPrefOutOfOfficeReplyEnabled","prefOutOfOfficeFromDate","zimbraPrefOutOfOfficeFromDate","prefOutOfOfficeUntilDate","zimbraPrefOutOfOfficeUntilDate","prefOutOfOfficeReply","zimbraPrefOutOfOfficeReply","createIdentity","modifyIdentity","deleteIdentity","modifyProps","modifyZimletPrefs","zimlets","modifyFilterRules","createSignature","modifySignature","modifySearchFolder","deleteSignature","saveDraft","sendMessage","sendDeliveryReport","uploadMessage","createTask","modifyTask","sendInviteReply","inviteReply","resetPassword","revokeAppSpecificPassword","revokeOtherTrustedDevices","revokeRights","revokeTrustedDevice","setCustomMetadata","customMetadata","setMailboxMetadata","setRecoveryAccount","modifyWhiteBlackList","createTag","tagAction","LocalBatchLink","notifier","events","on","off","batchHandler","operations","Observable","observer","emittedResponse","all","operation","query","print","operationName","graphql","getContext","results","next","complete","batcher","BatchLink","batchInterval","ApolloLink","ZimbraErrorLink","graphQLErrors","originalError","errorCode","executeHandlers","handlers","handler","findIndex","splice","ErrorLink","dataIdFromPath","defaultDataIdFromObject","dataIdFromObject","object","instances","uuid","createFragmentMatcher","fragmentMatcherFactory","IntrospectionFragmentMatcher","introspectionQueryResultData","__schema","types","kind","possibleTypes","ZimbraInMemoryCache","config","fragmentMatcher","InMemoryCache","SyncOfflineOperations","apolloClient","storage","storeKey","queue","setItem","offlineData","removeItem","getItem","getOfflineData","stored","hasOfflineData","uncommitted","console","warn","clearOfflineData","addOfflineData","DedupedByQueueError","defineProperty","hasSensitiveVariables","isMutationOperation","definitions","deriveOfflineQueue","operationQueue","OfflineQueueLink","isOpen","offlineQueueName","namedQueues","dequeue","slice","persist","retry","outstandingReqs","done","forward","subscribe","syncOfflineOperations","init","sync","skipQueue","cancelQueues","isForwarding","cancelNamedQueue","enqueue","MailFolderView","MessageFlags","ActionOps","_MessageActionOps","_ConversationActionOps","entities","FolderEntity"],"mappings":"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"}